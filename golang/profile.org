#+TITLE: Golang 的性能分析
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2021-11-03 Wed 15:14:17>
#+HTML_LINK_UP: ../readme.html
#+HTML_LINK_HOME: ../index.html
#+SETUPFILE: ~/.emacs.d/site-lisp/org-html-themes/setup/theme-readtheorg-local.setup
#+TAGS: golang profile


* 性能分析
** 使用内置的 http 性能分析工具
   1. 导入性能包
      #+BEGIN_SRC go
        package main

        import (
            "net/http"
            _ "net/http/pprof"
        )

        func main() {
            http.ListenAndServe(":8888", nil)
        }
      #+END_SRC
   2. 访问 http://localhost:8888/debug/pprof 查看堆栈信息
      #+BEGIN_SRC text
        /debug/pprof/

        Types of profiles available:
        Count	Profile
        0	allocs
        0	block
        0	cmdline
        3	goroutine
        0	heap
        0	mutex
        0	profile
        5	threadcreate
        0	trace
        full goroutine stack dump

        Profile Descriptions:

            allocs:
            A sampling of all past memory allocations
            block:
            Stack traces that led to blocking on synchronization primitives
            cmdline:
            The command line invocation of the current program
            goroutine:
            Stack traces of all current goroutines
            heap:
            A sampling of memory allocations of live objects. You can specify the gc GET parameter to run GC before taking the heap sample.
            mutex:
            Stack traces of holders of contended mutexes
            profile:
            CPU profile. You can specify the duration in the seconds GET parameter. After you get the profile file, use the go tool pprof command to investigate the profile.
            threadcreate:
            Stack traces that led to the creation of new OS threads
            trace:
            A trace of execution of the current program. You can specify the duration in the seconds GET parameter. After you get the trace file, use the go tool trace command to investigate the trace.
      #+END_SRC

** 生产性能分析图
   #+BEGIN_SRC sh
     go tool pprof http://localhost:8888/debug/pprof/profile
   #+END_SRC
