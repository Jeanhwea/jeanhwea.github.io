#+TITLE: 技术文档
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2023-01-29 Sun 10:55:28>
#+HTML_LINK_UP: ../readme.html
#+HTML_LINK_HOME: ../index.html
#+SETUPFILE: ~/.emacs.d/site-lisp/org-html-themes/setup/theme-readtheorg-local.setup
#+STARTUP: indent cache num inlineimages
#+LATEX_COMPILER: xelatex
#+LATEX_CLASS: beamer
#+LATEX_CLASS_OPTIONS: [presentation]
#+LATEX_HEADER: \usepackage[scheme=plain]{ctex}
#+BEAMER_THEME: boxes


* Oracle
** 📚 参考资料
1. Oracle 关系数据库 [[file:../database/oracle.org::*参考链接][参考链接]]
** 开发环境配置
*** Centos 7
1. [[https://hub.docker.com/_/centos/][docker container]]
2. 启动 centos7 镜像
   #+BEGIN_SRC sh
     docker run -d -it --restart always \
            -v ~/srv/pence/data:/data \
            --hostname pence --name pence centos:7
   #+END_SRC
3. 重新进入进行容器
   #+BEGIN_SRC sh
     docker exec -it pence bash
   #+END_SRC
4. 删除容器
   #+BEGIN_SRC sh
     docker rm -f pence
   #+END_SRC
*** 配置主机开发环境
安装一波系统依赖库
#+BEGIN_SRC sh
  yum update

  # common tools
  yum install -y net-tools vim tmux tree kernel-devel kernel-doc kernel-headers \
      samba samba-client ntp rsync curl git

  # for oracle 11g install
  yum install -y binutils compat-libcap1 compat-libstdc++-33 gcc gcc-c++ glibc \
      glibc-devel ksh libgcc libstdc++ libstdc++-devel libaio libaio-devel libXi \
      libXtst make sysstat unixODBC unixODBC-devel oracleasm-support

  yum install -y gcc gcc-c++ cmake automake zip unzip python3 python3-devel \
      python-devel python rpm-build redhat-rpm-config asciidoc hmaccalc \
      perl-ExtUtils-Embed pesign xmlto audit-libs-devel binutils-devel \
      elfutils-devel elfutils-libelf-devel ncurses-devel bison-devel newt-devel \
      numactl-devel pciutils-devel python-devel zlib-devel readline-devel

  # for mysql
  yum install -y cmake ncurses ncurses-devel bison bison-devel openssl openssl-devel

  # for openGauss
  yum install -y libaio-devel flex bison bison-devel ncurses-devel glibc-devel \
      patch redhat-lsb-core readline-devel

  # basic
  yum install -y openssl-devel gettext-devel
#+END_SRC
*** 设置时区
#+BEGIN_SRC sh
  cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
#+END_SRC

* 💾 MySQL
** 📚 参考资料
1. MySQL 开发文档 8.0.30  [[https://dev.mysql.com/doc/dev/mysql-server/8.0.30/PAGE_GET_STARTED.html#start_source][Source Code Documents]]
2. MySQL 使用文档 [[https://dev.mysql.com/doc/refman/8.0/en/innodb-storage-engine.html][InnoDB Storage Engine]]
3. 专栏 [[https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/MySQL%E5%AE%9E%E6%88%9845%E8%AE%B2][MySQL实战45讲]]
3. 三方库 [[https://gorm.io/docs/index.html][GORM]] | [[https://docs.spring.io/spring-data/jpa/docs/2.7.7/reference/html/][JPA]] | [[https://github.com/mybatis/mybatis-3][mybatis-3]]

** 主从架构实验环境
*** 🐳 配置 Docker 环境
1. 安装 Docker Server
2. 参考文档 [[https://docs.docker.com/compose/install/other][Install the Compose standalone]] 安装 docker-compose
3. 编写启动配置文件 [[file:env-mysql/][MySQL 主备配置]]
4. docker hub [[https://hub.docker.com/_/mysql][mysql 镜像]]
5. 启动服务
#+BEGIN_SRC sh :dir env-mysql
  docker-compose up -d
#+END_SRC

*** 配置主备环境
**** 查看主备网络配置
#+BEGIN_SRC sh :results output
  docker inspect mysql-master | jq '.[0].NetworkSettings.Networks.dbnet.IPAddress'
  docker inspect mysql-slave  | jq '.[0].NetworkSettings.Networks.dbnet.IPAddress'
#+END_SRC

#+RESULTS:
: "172.20.0.100"
: "172.20.0.101"

查看主机网络
#+BEGIN_SRC sh
  docker network ls
#+END_SRC

#+RESULTS:
| NETWORK      | ID       | NAME   | DRIVER | SCOPE |
| e09faf7e7340 | dbnet    | bridge | local  |       |
| c21a61df1551 | none     | null   | local  |       |

**** 主库配置备库用户的访问权限
:properties:
:header-args:sql: :engine mysql :dbhost 127.0.0.1 :dbport 9001 :database test01 :dbuser root :dbpassword p111
:end:

#+BEGIN_SRC sql :results output
  create user "user02"@"%" identified by "user02";
  grant replication slave on *.* to "user02"@"%";
  flush privileges;
#+END_SRC

#+RESULTS:

#+BEGIN_SRC sql
  show master status
#+END_SRC

#+RESULTS:
| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |
|------------------+----------+--------------+------------------+-------------------|
| mysql-bin.000003 |      841 | test01       |                  |                   |

**** 备库同步配置
:properties:
:header-args:sql: :engine mysql :dbhost 127.0.0.1 :dbport 9002 :database test01 :dbuser root :dbpassword p222
:end:

#+BEGIN_SRC sql :results output
  # 这里的 host 等参数需要根据主库的配置修改
  -- change master to master_host='172.20.0.100', master_user='user02', master_password='user02', master_log_file='1.000003', master_log_pos=823;
  -- change master to master_host='mysql-master', master_user='user02', master_password='user02', master_log_file='mysql-bin.000003', master_log_pos=0;
  change master to master_host='mysql-master', master_user='user02', master_password='user02', master_log_file='mysql-bin.000003', master_log_pos=841;
#+END_SRC

#+RESULTS:

#+BEGIN_SRC sql :results output
   start slave;
#+END_SRC

#+RESULTS:

#+BEGIN_SRC sql :results output
  show slave status\G
#+END_SRC

#+RESULTS:
#+begin_example
,*************************** 1. row ***************************
               Slave_IO_State: Waiting for source to send event
                  Master_Host: mysql-master
                  Master_User: user02
                  Master_Port: 3306
                Connect_Retry: 60
              Master_Log_File: mysql-bin.000003
          Read_Master_Log_Pos: 841
               Relay_Log_File: 1e8e597992df-relay-bin.000002
                Relay_Log_Pos: 326
        Relay_Master_Log_File: mysql-bin.000003
             Slave_IO_Running: Yes
            Slave_SQL_Running: Yes
              Replicate_Do_DB:
          Replicate_Ignore_DB:
           Replicate_Do_Table:
       Replicate_Ignore_Table:
      Replicate_Wild_Do_Table:
  Replicate_Wild_Ignore_Table:
                   Last_Errno: 0
                   Last_Error:
                 Skip_Counter: 0
          Exec_Master_Log_Pos: 841
              Relay_Log_Space: 543
              Until_Condition: None
               Until_Log_File:
                Until_Log_Pos: 0
           Master_SSL_Allowed: No
           Master_SSL_CA_File:
           Master_SSL_CA_Path:
              Master_SSL_Cert:
            Master_SSL_Cipher:
               Master_SSL_Key:
        Seconds_Behind_Master: 0
Master_SSL_Verify_Server_Cert: No
                Last_IO_Errno: 0
                Last_IO_Error:
               Last_SQL_Errno: 0
               Last_SQL_Error:
  Replicate_Ignore_Server_Ids:
             Master_Server_Id: 100
                  Master_UUID: 860a4dac-94f0-11ed-a2f3-0242ac140064
             Master_Info_File: mysql.slave_master_info
                    SQL_Delay: 0
          SQL_Remaining_Delay: NULL
      Slave_SQL_Running_State: Replica has read all relay log; waiting for more updates
           Master_Retry_Count: 86400
                  Master_Bind:
      Last_IO_Error_Timestamp:
     Last_SQL_Error_Timestamp:
               Master_SSL_Crl:
           Master_SSL_Crlpath:
           Retrieved_Gtid_Set:
            Executed_Gtid_Set:
                Auto_Position: 0
         Replicate_Rewrite_DB:
                 Channel_Name:
           Master_TLS_Version:
       Master_public_key_path:
        Get_master_public_key: 0
            Network_Namespace:
#+end_example

如果出现这样的两行表示结果是正确的
#+begin_quote
Slave_IO_Running: Yes
Slave_SQL_Running: Yes
#+end_quote

重置 slave
#+BEGIN_SRC sql :results output
  stop slave;
  reset slave;
#+END_SRC

**** 主库建表
:properties:
:header-args:sql: :engine mysql :dbhost 127.0.0.1 :dbport 9001 :database test01 :dbuser root :dbpassword p111
:end:

#+BEGIN_SRC sql :results output
  create table t (
    id int primary key auto_increment,
    c int
  );
#+END_SRC

#+RESULTS:

#+BEGIN_SRC sql :results output
  insert into t(c) values (1), (2), (3);
#+END_SRC

#+RESULTS:

#+BEGIN_SRC sql :results output
  delete from t where id < 10;
#+END_SRC

#+RESULTS:

**** 备库查询
:properties:
:header-args:sql: :engine mysql :dbhost 127.0.0.1 :dbport 9002 :database test01 :dbuser root :dbpassword p222
:end:

#+BEGIN_SRC sql
  select * from t;
#+END_SRC

*** 设置登录别名
#+BEGIN_SRC sh
  alias my1="MYSQL_PWD=p111   mysql -h127.0.0.1 -uroot -P9001"
  alias my2="MYSQL_PWD=p222   mysql -h127.0.0.1 -uroot -P9002"
  alias u01="MYSQL_PWD=user01 mysql -h127.0.0.1 -uuser01 -P9001 test01"
  alias u02="MYSQL_PWD=user02 mysql -h127.0.0.1 -uuser02 -P9002 test01"
  alias m100='docker exec -it mysql-master /bin/bash'
  alias m101='docker exec -it mysql-slave /bin/bash'
#+END_SRC

** 源码研究
1. [[*专栏 \[\[https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/MySQL%E5%AE%9E%E6%88%9845%E8%AE%B2\]\[MySQL实战45讲\]\]][专栏 MySQL实战45讲]]
2. [[file:mysql-source-code.org][MySQL 源码笔记]]
3. 代码阅读分享
   - [[file:../mysql/share-01-mysql-group-by-analysis.org][GroupBy语句实现原理探索]]
*** 安装 Cmake
1. [[https://cmake.org/install/][CMake Install]]
   #+BEGIN_SRC sh
     curl -OL https://github.com/Kitware/CMake/releases/download/v3.20.1/cmake-3.20.1.tar.gz
   #+END_SRC

   #+BEGIN_SRC sh
     ./bootstrap
      make
      make install
   #+END_SRC

* 🌟 K8s
** minikube
1. [[https://minikube.sigs.k8s.io/docs/][文档中心]]
** 环境配置
   #+BEGIN_SRC sh
     # 安装
     brew install minikube

     # 启动
     minikube start
   #+END_SRC
** Pod
*** 查看 Pod
#+BEGIN_SRC sh :results output
  kubectl get pods -A
#+END_SRC

#+RESULTS:
: NAMESPACE     NAME                               READY   STATUS    RESTARTS      AGE
: kube-system   coredns-787d4945fb-g688w           1/1     Running   0             50s
: kube-system   etcd-minikube                      1/1     Running   0             65s
: kube-system   kube-apiserver-minikube            1/1     Running   0             57s
: kube-system   kube-controller-manager-minikube   1/1     Running   0             56s
: kube-system   kube-proxy-4ph9m                   1/1     Running   0             50s
: kube-system   kube-scheduler-minikube            1/1     Running   0             57s
: kube-system   storage-provisioner                1/1     Running   1 (18s ago)   54s

* 🐢 GDB & LLDB
** 📚 参考资料
1. [[https://lldb.llvm.org/use/map.html][LLDB <-> GDB]]
2. [[https://github.com/hellogcc/100-gdb-tips][GDB 小技巧]] | [[https://sourceware.org/gdb/onlinedocs/gdb/][GDB 在线手册]]
3. 视频 [[https://www.youtube.com/watch?v=svG6OPyKsrw][GDB Tutorial]]
** 📒 使用笔记
*** 进程启动: run & attach
方法一：使用 attach 模式调试。首先正常启动重新，然后使用 attach 命令附属到进程上
#+BEGIN_SRC sh
  (lldb) attach -p 18616
  (gdb) attach 18616
#+END_SRC

方法二：直接 run 启动进程
#+BEGIN_SRC sh
  # 指定启动文件
  (lldb/gdb) file <binary>

  # 直接 run 启动进程
  (lldb/gdb) r
  # 添加启动参数
  (lldb/gdb) r args1 args2 ...
  # 查看参数
  (gdb) show args
  (lldb) settings show target.run-args
#+END_SRC
[[file:../static/image/2023/0205/131917.png]]

*** 调试流程控制
**** 设置断点 breakpoint
#+BEGIN_SRC sh
  # 普通断点
  b main
  b main.cc:12
  b 12
  # 条件断点
  b 34 if i = 10
  # 临时断点: 临时断点执行一次后自动销毁
  tb main
#+END_SRC

**** 流程控制 step & next & continue
1. step 单步调试，不进入函数
2. next 单步调试，进入函数
3. continue 继续执行
   #+BEGIN_SRC sh
     s # step
     n # next
     c # continue

     # until 直接执行到行数
     (gdb) until 12
     (lldb) thread until 12
   #+END_SRC
4. 跳转到指定行
   - 条件断点 ~tb~ temp breakpoint
   - until ~until <line>~
5. 返回当前值
   #+BEGIN_SRC sh
     (gdb) return <return expression>
     (lldb) thread return <return expression>
   #+END_SRC

*** 保持断点 & 现场恢复
GDB 保存断点的方式比较方便，直接保持成一个文本文件后，再应用代码
#+BEGIN_SRC sh
  # 保持断点到文件中
  (gdb) save breakpoint mybreak.txt
  # 重新加载保存的断点
  (gdb) source mybreak.txt
#+END_SRC

LLDB 保存断点也有类似的命令，但是保存结果是一个 JSON
#+BEGIN_SRC sh
  # 保存断点到 json 格式文件
  (lldb) breakpoint write -f dbg001
  # 读取断点到 json 格式文件
  (lldb) breakpoint read -f dbg001
#+END_SRC

也可以参考这个答案优化流程 [[https://stackoverflow.com/questions/24638515/save-breakpoints-in-lldb][SO]]

[[file:../static/image/2023/0205/100837.png]]

*** 查看/修改变量和内存数据
1. 打印变量 print
   #+BEGIN_SRC sh
     (lldb) p thd->m_thread_id
     (my_thread_id) $1 = 10
     (lldb) x/w &$1
     0x7fbdc1240188: 0x0000000a
     (lldb)
   #+END_SRC
2. 查看内存地址中的数据
   #+BEGIN_SRC sh
     (lldb) x/8w $0 => 打印地址的数据, 打印8 条数据, [w, b] 表示不同的打印方式
     0x7fbdc123dc00: 0x0916f4d8 0x00000001 0x0916f548 0x00000001
     0x7fbdc123dc10: 0x00000000 0x00000000 0xc1240440 0x00007fbd
     (lldb) x/8b $0
     0x7fbdc123dc00: 0xd8 0xf4 0x16 0x09 0x01 0x00 0x00 0x00
     (lldb) x/8x $0
     0x7fbdc123dc00: 0xd8 0xf4 0x16 0x09 0x01 0x00 0x00 0x00
   #+END_SRC
3. 查看 frame 中变量
   #+BEGIN_SRC sh
     # 查看局部变量
     (lldb) frame variable
     (lldb) fr v
     # 查看全局变量
     (lldb) target variable
     (lldb) ta v
     # 查看调用栈 thread backtrace
     (lldb/gdb) bt
   #+END_SRC

** 🐛 问题修复
*** MacOS: 证书错误问题 [[https://timnash.co.uk/getting-gdb-to-semi-reliably-work-on-mojave-macos/][(^-^)]]
#+BEGIN_QUOTE
  please check gdb is codesigned - see taskgated(8)
#+END_QUOTE
手工编写 gdb.xml
#+BEGIN_SRC xml
  <?xml version="1.0" encoding="UTF-8"?>
  <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN"
  "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
  <plist version="1.0">
  <dict>
      <key>com.apple.security.cs.allow-jit</key>
      <true/>
      <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
      <true/>
      <key>com.apple.security.cs.allow-dyld-environment-variables</key>
      <true/>
      <key>com.apple.security.cs.disable-library-validation</key>
      <true/>
      <key>com.apple.security.cs.disable-executable-page-protection</key>
      <true/>
      <key>com.apple.security.cs.debugger</key>
      <true/>
      <key>com.apple.security.get-task-allow</key>
      <true/>
  </dict>
  </plist>
#+END_SRC
使用命令给 gdb 添加证书
#+BEGIN_SRC sh
  codesign --entitlements gdb.xml -fs gdb-cert /usr/local/bin/gdb
#+END_SRC
* 🏄 脚本语言
** Perl
*** 环境配置
**** 包管理工具配置 CPAN
1. 官网 [[https://metacpan.org/][CPAN]]
2. 镜像 [[https://mirrors.tuna.tsinghua.edu.cn/help/CPAN/][TUNA]]
   #+BEGIN_SRC sh
     PERL_MM_USE_DEFAULT=1 perl -MCPAN -e 'CPAN::HandleConfig->edit("pushy_https", 0); CPAN::HandleConfig->edit("urllist", "unshift", "https://mirrors.tuna.tsinghua.edu.cn/CPAN/"); mkmyconfig'
   #+END_SRC
3. CPAN 的配置文件: =~/.cpan/CPAN/MyConfig.pm=
**** 包管理命令
#+BEGIN_SRC sh
  perl -MCPAN -e 'install Excel::Writer::XLSX'
#+END_SRC
*** 基本使用
**** Hello world
创建 =hello.pl= 文件写以下代码
#+BEGIN_SRC perl :results output
  print("hello world\n");
#+END_SRC

#+RESULTS:
: hello world

使用 perl 命令运行代码
#+BEGIN_SRC sh
  perl hello.pl
#+END_SRC
[[file:../static/image/2023/0129/192740.png]]

** Python
* 极客时光
** 专栏 [[https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/22%20%E8%AE%B2%E9%80%9A%E5%85%B3%20Go%20%E8%AF%AD%E8%A8%80-%E5%AE%8C][22 讲通关 Go 语言]]
** 专栏 [[https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/24%E8%AE%B2%E5%90%83%E9%80%8F%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93-%E5%AE%8C][24讲吃透分布式数据库]]
