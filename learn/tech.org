#+TITLE: 技术文档
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2023-01-29 Sun 10:55:28>
#+HTML_LINK_UP: ../readme.html
#+HTML_LINK_HOME: ../index.html
#+SETUPFILE: ~/.emacs.d/site-lisp/org-html-themes/setup/theme-readtheorg-local.setup
#+STARTUP: indent cache num inlineimages
#+LATEX_COMPILER: xelatex
#+LATEX_CLASS: beamer
#+LATEX_CLASS_OPTIONS: [presentation]
#+LATEX_HEADER: \usepackage[scheme=plain]{ctex}
#+BEAMER_THEME: boxes

* 💾 Oracle
** 📚 参考资料
1. Oracle 关系数据库 [[file:../database/oracle.org::*参考链接][参考链接]]
** 开发环境配置
*** CentOS 7 镜像启动
1. [[https://hub.docker.com/_/centos/][docker container]]
2. 启动 centos7 镜像
   #+BEGIN_SRC sh
     docker run _D -it --restart always \
            -v ~/srv/pence/data:/data \
            --hostname pence --name pence centos:7
   #+END_SRC
3. 重新进入进行容器
   #+BEGIN_SRC sh
     docker exec -it pence bash
   #+END_SRC
4. 删除容器
   #+BEGIN_SRC sh
     docker rm -f pence
   #+END_SRC
*** 配置主机开发环境
安装一波系统依赖库
#+BEGIN_SRC sh
  yum update

  # common tools
  yum install -y net-tools vim tmux tree kernel-devel kernel-doc kernel-headers \
      samba samba-client ntp rsync curl git

  # for oracle 11g install
  yum install -y binutils compat-libcap1 compat-libstdc++-33 gcc gcc-c++ glibc \
      glibc-devel ksh libgcc libstdc++ libstdc++-devel libaio libaio-devel libXi \
      libXtst make sysstat unixODBC unixODBC-devel oracleasm-support

  yum install -y gcc gcc-c++ cmake automake zip unzip python3 python3-devel \
      python-devel python rpm-build redhat-rpm-config asciidoc hmaccalc \
      perl-ExtUtils-Embed pesign xmlto audit-libs-devel binutils-devel \
      elfutils-devel elfutils-libelf-devel ncurses-devel bison-devel newt-devel \
      numactl-devel pciutils-devel python-devel zlib-devel readline-devel

  # for mysql
  yum install -y cmake ncurses ncurses-devel bison bison-devel openssl openssl-devel

  # for openGauss
  yum install -y libaio-devel flex bison bison-devel ncurses-devel glibc-devel \
      patch redhat-lsb-core readline-devel

#+END_SRC

*** 设置时区
#+BEGIN_SRC sh
  cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
#+END_SRC

*** TODO 安装数据库的前置准备
1. [[file:../article/install-oracle-11g-on-linux.org][安装Oracle 11g]]
2. 配置系统内存以及 swap

* 🐬 MySQL
** 📚 参考资料
1. MySQL 开发文档 8.0.30  [[https://dev.mysql.com/doc/dev/mysql-server/8.0.30/PAGE_GET_STARTED.html#start_source][Source Code Documents]]
2. MySQL 使用文档 [[https://dev.mysql.com/doc/refman/8.0/en/innodb-storage-engine.html][InnoDB Storage Engine]]
3. 专栏 [[https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/MySQL%E5%AE%9E%E6%88%9845%E8%AE%B2][MySQL 实战 45 讲]]
4. 三方库 [[https://gorm.io/docs/index.html][GORM]] | [[https://docs.spring.io/spring-data/jpa/docs/2.7.7/reference/html/][JPA]] | [[https://github.com/mybatis/mybatis-3][mybatis-3]]

** 主从架构实验环境
*** 配置 Docker 环境
1. 安装 Docker Server
2. 参考文档 [[https://docs.docker.com/compose/install/other][Install the Compose standalone]] 安装 docker-compose
3. 编写启动配置文件 [[file:env-mysql/][MySQL 主备配置]]
4. docker hub [[https://hub.docker.com/_/mysql][mysql 镜像]]
5. 启动服务
#+BEGIN_SRC sh :dir env-mysql
  docker-compose up -d
#+END_SRC

*** 配置主备环境
**** 查看主备网络配置
#+BEGIN_SRC sh :results output
  docker inspect mysql-master | jq '.[0].NetworkSettings.Networks.dbnet.IPAddress'
  docker inspect mysql-slave  | jq '.[0].NetworkSettings.Networks.dbnet.IPAddress'
#+END_SRC

#+RESULTS:
: "172.20.0.100"
: "172.20.0.101"

查看主机网络
#+BEGIN_SRC sh
  docker network ls
#+END_SRC

#+RESULTS:
| NETWORK      | ID       | NAME   | DRIVER | SCOPE |
| e09faf7e7340 | dbnet    | bridge | local  |       |
| c21a61df1551 | none     | null   | local  |       |

**** 主库配置备库用户的访问权限
:properties:
:header-args:sql: :engine mysql :dbhost 127.0.0.1 :dbport 9001 :database test01 :dbuser root :dbpassword p111
:end:

#+BEGIN_SRC sql :results output
  create user "user02"@"%" identified by "user02";
  grant replication slave on *.* to "user02"@"%";
  flush privileges;
#+END_SRC

#+RESULTS:

#+BEGIN_SRC sql
  show master status
#+END_SRC

#+RESULTS:
| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |
|------------------+----------+--------------+------------------+-------------------|
| mysql-bin.000003 |      841 | test01       |                  |                   |

**** 备库同步配置
:properties:
:header-args:sql: :engine mysql :dbhost 127.0.0.1 :dbport 9002 :database test01 :dbuser root :dbpassword p222
:end:

#+BEGIN_SRC sql :results output
  # 这里的 host 等参数需要根据主库的配置修改
  -- change master to master_host='172.20.0.100', master_user='user02', master_password='user02', master_log_file='1.000003', master_log_pos=823;
  -- change master to master_host='mysql-master', master_user='user02', master_password='user02', master_log_file='mysql-bin.000003', master_log_pos=0;
  change master to master_host='mysql-master', master_user='user02', master_password='user02', master_log_file='mysql-bin.000003', master_log_pos=841;
#+END_SRC

#+RESULTS:

#+BEGIN_SRC sql :results output
   start slave;
#+END_SRC

#+RESULTS:

#+BEGIN_SRC sql :results output
  show slave status\G
#+END_SRC

#+RESULTS:
#+begin_example
,*************************** 1. row ***************************
               Slave_IO_State: Waiting for source to send event
                  Master_Host: mysql-master
                  Master_User: user02
                  Master_Port: 3306
                Connect_Retry: 60
              Master_Log_File: mysql-bin.000003
          Read_Master_Log_Pos: 841
               Relay_Log_File: 1e8e597992df-relay-bin.000002
                Relay_Log_Pos: 326
        Relay_Master_Log_File: mysql-bin.000003
             Slave_IO_Running: Yes
            Slave_SQL_Running: Yes
              Replicate_Do_DB:
          Replicate_Ignore_DB:
           Replicate_Do_Table:
       Replicate_Ignore_Table:
      Replicate_Wild_Do_Table:
  Replicate_Wild_Ignore_Table:
                   Last_Errno: 0
                   Last_Error:
                 Skip_Counter: 0
          Exec_Master_Log_Pos: 841
              Relay_Log_Space: 543
              Until_Condition: None
               Until_Log_File:
                Until_Log_Pos: 0
           Master_SSL_Allowed: No
           Master_SSL_CA_File:
           Master_SSL_CA_Path:
              Master_SSL_Cert:
            Master_SSL_Cipher:
               Master_SSL_Key:
        Seconds_Behind_Master: 0
Master_SSL_Verify_Server_Cert: No
                Last_IO_Errno: 0
                Last_IO_Error:
               Last_SQL_Errno: 0
               Last_SQL_Error:
  Replicate_Ignore_Server_Ids:
             Master_Server_Id: 100
                  Master_UUID: 860a4dac-94f0-11ed-a2f3-0242ac140064
             Master_Info_File: mysql.slave_master_info
                    SQL_Delay: 0
          SQL_Remaining_Delay: NULL
      Slave_SQL_Running_State: Replica has read all relay log; waiting for more updates
           Master_Retry_Count: 86400
                  Master_Bind:
      Last_IO_Error_Timestamp:
     Last_SQL_Error_Timestamp:
               Master_SSL_Crl:
           Master_SSL_Crlpath:
           Retrieved_Gtid_Set:
            Executed_Gtid_Set:
                Auto_Position: 0
         Replicate_Rewrite_DB:
                 Channel_Name:
           Master_TLS_Version:
       Master_public_key_path:
        Get_master_public_key: 0
            Network_Namespace:
#+end_example

如果出现这样的两行表示结果是正确的
#+begin_quote
Slave_IO_Running: Yes
Slave_SQL_Running: Yes
#+end_quote

重置 slave
#+BEGIN_SRC sql :results output
  stop slave;
  reset slave;
#+END_SRC

**** 主库建表
:properties:
:header-args:sql: :engine mysql :dbhost 127.0.0.1 :dbport 9001 :database test01 :dbuser root :dbpassword p111
:end:

#+BEGIN_SRC sql :results output
  create table t (
    id int primary key auto_increment,
    c int
  );
#+END_SRC

#+RESULTS:

#+BEGIN_SRC sql :results output
  insert into t(c) values (1), (2), (3);
#+END_SRC

#+RESULTS:

#+BEGIN_SRC sql :results output
  delete from t where id < 10;
#+END_SRC

#+RESULTS:

**** 备库查询
:properties:
:header-args:sql: :engine mysql :dbhost 127.0.0.1 :dbport 9002 :database test01 :dbuser root :dbpassword p222
:end:

#+BEGIN_SRC sql
  select * from t;
#+END_SRC

*** 设置登录别名
#+BEGIN_SRC sh
  alias my1="MYSQL_PWD=p111   mysql -h127.0.0.1 -uroot -P9001"
  alias my2="MYSQL_PWD=p222   mysql -h127.0.0.1 -uroot -P9002"
  alias u01="MYSQL_PWD=user01 mysql -h127.0.0.1 -uuser01 -P9001 test01"
  alias u02="MYSQL_PWD=user02 mysql -h127.0.0.1 -uuser02 -P9002 test01"
  alias m100='docker exec -it mysql-master /bin/bash'
  alias m101='docker exec -it mysql-slave /bin/bash'
#+END_SRC

** 源码研究
1. 专栏 [[https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/MySQL%E5%AE%9E%E6%88%9845%E8%AE%B2][MySQL45]] | [[https://blog.jcole.us/innodb/][Data Structure]] | [[http://www.unofficialmysqlguide.com/introduction.html][Unofficial Optimizer Guide]]
2. [[file:mysql-source-code.org][MySQL 源码笔记]]
3. 示例数据库 [[https://dev.mysql.com/doc/employee/en/employees-installation.html][Employees Sample Database]] | [[https://github.com/datacharmer/test_db][Github]] | [[https://dev.mysql.com/doc/index-other.html][Example DB: world, sakila]]
4. 代码阅读分享
   - [[file:../mysql/share-01-mysql-group-by-analysis.org][GroupBy 语句实现原理探索]]
   - [[file:../mysql/share-02-mysql-optimize.org][MySQL 优化器实现原理探索]]
*** 安装编译调试环境
1. 系统依赖安装
   #+BEGIN_SRC sh
     # 安装依赖包
     yum update

     yum install -y net-tools vim tmux tree kernel-devel kernel-doc kernel-headers \
         samba samba-client ntp rsync curl git wget

     yum install -y binutils compat-libcap1 compat-libstdc++-33 gcc gcc-c++ glibc \
         glibc-devel ksh libgcc libstdc++ libstdc++-devel libaio libaio-devel libXi \
         libXtst make sysstat unixODBC unixODBC-devel oracleasm-support zip unzip \
         python-devel python rpm-build redhat-rpm-config asciidoc hmaccalc \
         perl-ExtUtils-Embed pesign xmlto audit-libs-devel binutils-devel \
         elfutils-devel elfutils-libelf-devel ncurses-devel bison-devel newt-devel \
         python3 python3-devel \
         numactl-devel pciutils-devel python-devel zlib-devel readline-devel
   #+END_SRC
2. 编译工具安装 [[https://gcc.gnu.org/install/][GCC]] | [[https://www.sourceware.org/gdb/][GDB]]
   #+BEGIN_SRC sh
     # gcc
     wget https://mirrors.tuna.tsinghua.edu.cn/gnu/gcc/gcc-12.1.0/gcc-12.1.0.tar.gz
     # 下载 gcc 的依赖
     ./contrib/download_prerequisites
     # --enable-multilib 开启 32 位库支持
     ./configure --prefix=/usr/local/gcc --disable-multilib
     make
     make install

     # gdb
     wget https://mirrors.tuna.tsinghua.edu.cn/gnu/gdb/gdb-12.1.tar.gz
     ./configure --prefix=/usr/local/gdb
     make
     make install
   #+END_SRC
   添加环境变量
   #+BEGIN_SRC sh
     export PATH=/usr/local/gcc/bin:$PATH
     export LD_LIBRARY_PATH=/usr/local/gcc/lib64:$LD_LIBRARY_PATH
     export PATH=/usr/local/gdb/bin:$PATH
   #+END_SRC
4. cmake 安装 [[https://cmake.org/install/][CMake Install]]
   #+BEGIN_SRC sh
     # 下载代码
     curl -OL https://github.com/Kitware/CMake/releases/download/v3.25.2/cmake-3.25.2.tar.gz
     # 编译安装
     ./bootstrap --prefix=/usr/local/cmake
     make
     make install
   #+END_SRC
   添加环境变量
   #+BEGIN_SRC sh
     export PATH=/usr/local/cmake/bin:$PATH
   #+END_SRC
*** 编译代码及初始数据库
1. 参考资料 [[https://dev.mysql.com/doc/refman/8.0/en/source-installation.html][源代码安装文档]] | [[https://dev.mysql.com/doc/refman/8.0/en/making-trace-files.html][TRACE 文件]] | [[https://dev.mysql.com/doc/refman/8.0/en/using-gdb-on-mysqld.html][--gdb]] | [[https://dev.mysql.com/doc/dev/mysql-server/8.0.30/PAGE_OPT_TRACE.html][The Optimizer Trace]]
2. 配置文件 ~/etc/my.cnf~
   #+BEGIN_SRC conf
     # -* mode: Conf; -*-

     [mysqld]
     basedir=/opt/local/mysql
     datadir=/opt/local/mysql/data
     log-error=/tmp/mysql-error.log
     pid-file=/tmp/mysql.pid
     # debug=d,info,error,query,general,where:O,/tmp/mysqld.trace
     # debug=+d,info,error,query,general,enter,where:O,/tmp/mysqld.trace
     debug

     # autocommit=0
     innodb_lock_wait_timeout=3600
     # long_query_time = 0
     slow_query_log = on
     slow_query_log_file = /tmp/mysql-slow.log
     # secure_file_priv = /tmp

     [client]
     user=root
   #+END_SRC
2. 编译源代码
   #+BEGIN_SRC sh
     # 准备代码编译目录, 输出目录为 out
     mkdir out
     cd out
     cmake -DCMAKE_INSTALL_PREFIX=/opt/local/mysql -DWITH_BOOST=../../boost/boost_1_77_0 -DWITH_DEBUG=1 -DWITH_UNIT_TESTS=0 ..
     # 编译代码
     cd out
     make -j8
     make install
   #+END_SRC
3. 初始化数据库
   #+BEGIN_SRC sh
     # 初始化数据库
     mysqld --defaults-file=/etc/my.cnf --initialize-insecure

     # https://dev.mysql.com/doc/refman/8.0/en/starting-server.html
     # 启动数据库数据库, --gdb 是开启 gdb 调试支持
     # --debug=d,info,error,query,general,where:O,/tmp/mysqld.trace
     mysqld --gdb >/dev/null 2>&1 &

     # 链接数据库
     mysql
     # 关闭数据库
     mysqladmin shutdown
   #+END_SRC
*** 代码阅读配置
#+BEGIN_SRC sh
  # 生成跳转的 TAG
  ctags -e -R --languages=c,c++ .
#+END_SRC

* 🐘 Postgres
** 前置环境变量
#+BEGIN_SRC sh
  export PGDATA=/opt/local/pgsql/data
#+END_SRC
** 编译调试 & 初始化数据
#+BEGIN_SRC sh
  # 配置调试环境
  ./configure --prefix=/opt/local/pgsql --enable-cassert --enable-debug CFLAGS="-ggdb -O0 -fno-omit-frame-pointer"
  # 编译, 安装
  make -j8
  make install
#+END_SRC

#+BEGIN_SRC sh
  # 初始化数据库
  initdb -D /opt/local/pgsql/data
  # 启动数据库
  pg_ctl -D /opt/local/pgsql/data -l logfile start
  # 创建库
  createdb test01
  # 链接库
  psql test01
#+END_SRC
** 调试命令
找到对应的进程
#+BEGIN_SRC sh :results output :exports both
  $ ps aux | grep postgres
  jinghuihu        87208   0.0  0.0 34130524    676 s006  S+   12:13PM   0:00.00 grep --color=auto --exclude-dir=.bzr --exclude-dir=CVS --exclude-dir=.git --exclude-dir=.hg --exclude-dir=.svn --exclude-dir=.idea --exclude-dir=.tox postgres
  jinghuihu        82329   0.0  0.2 34313316  36860   ??  Ss   10:51AM   0:00.16 postgres: jinghuihu test01 [local] idle
  jinghuihu        82278   0.0  0.0 34309036   1792   ??  Ss   10:51AM   0:00.00 postgres: logical replication launcher
  jinghuihu        82277   0.0  0.0 34310060   2136   ??  Ss   10:51AM   0:00.02 postgres: autovacuum launcher
  jinghuihu        82276   0.0  0.0 34307820   5152   ??  Ss   10:51AM   0:00.04 postgres: walwriter
  jinghuihu        82275   0.0  0.0 34307820   2212   ??  Ss   10:51AM   0:00.06 postgres: background writer
  jinghuihu        82274   0.0  0.0 34307820   2788   ??  Ss   10:51AM   0:00.01 postgres: checkpointer
  jinghuihu        80299   0.0  0.1 34309108  14920   ??  Ss   10:41AM   0:00.13 /opt/local/pgsql/bin/postgres -D /opt/local/pgsql/data
#+END_SRC

找到对应的进程，然后使用 lldb attach 上，打断点
#+BEGIN_SRC text
  (lldb) attach -p 82329
  Process 82329 stopped
  ,* thread #1, queue = 'com.apple.main-thread', stop reason = signal SIGSTOP
      frame #0: 0x00007ff810e892fe libsystem_kernel.dylib`kevent + 10
  libsystem_kernel.dylib`kevent:
  ->  0x7ff810e892fe <+10>: jae    0x7ff810e89308            ; <+20>
      0x7ff810e89300 <+12>: movq   %rax, %rdi
      0x7ff810e89303 <+15>: jmp    0x7ff810e84dc2            ; cerror_nocancel
      0x7ff810e89308 <+20>: retq
  Target 0: (postgres) stopped.
  Executable module set to "/opt/local/pgsql/bin/postgres".
  Architecture set to: x86_64h-apple-macosx-.
  (lldb) b exec_simple_query
  Breakpoint 1: where = postgres`exec_simple_query + 29 at postgres.c:994:21, address = 0x000000010f17af6d
  (lldb) c
  Process 82329 resuming
  Process 82329 stopped
  ,* thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1
      frame #0: 0x000000010f17af6d postgres`exec_simple_query + 29 at /Users/jinghuihu/code/jeanhwea/postgres/src/backend/tcop/postgres.c:994
     991  static void
     992  exec_simple_query(const char *query_string)
     993  {
  -> 994      CommandDest dest = whereToSendOutput;
                                 ^
     995      MemoryContext oldcontext;
     996      List	   *parsetree_list;
     997      ListCell   *parsetree_item;
  Target 0: (postgres) stopped.
  (lldb)  bt
  ,* thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1
    ,* frame #0: 0x000000010f17af6d postgres`exec_simple_query + 29 at /Users/jinghuihu/code/jeanhwea/postgres/src/backend/tcop/postgres.c:994
      frame #1: 0x000000010f17a633 postgres`PostgresMain + 2243 at /Users/jinghuihu/code/jeanhwea/postgres/src/backend/tcop/postgres.c:4593
      frame #2: 0x000000010f08d0d2 postgres`BackendRun + 50 at /Users/jinghuihu/code/jeanhwea/postgres/src/backend/postmaster/postmaster.c:4511
      frame #3: 0x000000010f08c6bc postgres`BackendStartup + 524 at /Users/jinghuihu/code/jeanhwea/postgres/src/backend/postmaster/postmaster.c:4239
      frame #4: 0x000000010f08b4ec postgres`ServerLoop + 716 at /Users/jinghuihu/code/jeanhwea/postgres/src/backend/postmaster/postmaster.c:1806
      frame #5: 0x000000010f088dc7 postgres`PostmasterMain + 6471 at /Users/jinghuihu/code/jeanhwea/postgres/src/backend/postmaster/postmaster.c:1478
      frame #6: 0x000000010ef6eda0 postgres`main + 816 at /Users/jinghuihu/code/jeanhwea/postgres/src/backend/main/main.c:202
      frame #7: 0x00007ff810b92310 dyld`start + 2432
  (lldb) c
  Process 82329 resuming
  (lldb) detach
  Process 82329 detached
  (lldb)
#+END_SRC

* 🐳 Docker & kubernetes
** minikube
1. [[https://minikube.sigs.k8s.io/docs/][文档中心]]
** 环境配置
   #+BEGIN_SRC sh
     # 安装
     brew install minikube

     # 启动
     minikube start
   #+END_SRC
** Pod
*** 查看 Pod
#+BEGIN_SRC sh :results output
  kubectl get pods -A
#+END_SRC

#+RESULTS:
: NAMESPACE     NAME                               READY   STATUS    RESTARTS      AGE
: kube-system   coredns-787d4945fb-g688w           1/1     Running   0             50s
: kube-system   etcd-minikube                      1/1     Running   0             65s
: kube-system   kube-apiserver-minikube            1/1     Running   0             57s
: kube-system   kube-controller-manager-minikube   1/1     Running   0             56s
: kube-system   kube-proxy-4ph9m                   1/1     Running   0             50s
: kube-system   kube-scheduler-minikube            1/1     Running   0             57s
: kube-system   storage-provisioner                1/1     Running   1 (18s ago)   54s

* 🐂 GNU
** ssh
*** forward
本地转发
#+BEGIN_SRC sh
  # -N 不执行命令, -L local 转发 <remote-port>:<local-host>:<local-port>
  ssh -N -L 9092:127.0.0.1:9092 user@host
#+END_SRC

远端转发
#+BEGIN_SRC sh
  # -N 不执行命令, -R remote 转发 <local-port>:<remote-host>:<remote-port>
  ssh -N -R 9092:127.0.0.1:9092 user@host
#+END_SRC

* 🐢 GDB & LLDB
** 📚 参考资料
1. [[https://lldb.llvm.org/use/map.html][LLDB <-> GDB]]
2. [[https://github.com/hellogcc/100-gdb-tips][GDB 小技巧]] | [[https://sourceware.org/gdb/onlinedocs/gdb/][GDB 在线手册]]
3. 视频 [[https://www.youtube.com/watch?v=svG6OPyKsrw][GDB Tutorial]]
** 📒 使用笔记
*** 进程启动: run & attach
方法一：使用 attach 模式调试。首先正常启动重新，然后使用 attach 命令附属到进程上
#+BEGIN_SRC sh
  (lldb) attach -p 18616
  (gdb) attach 18616
#+END_SRC

方法二：直接 run 启动进程
#+BEGIN_SRC sh
  # 指定启动文件
  (lldb/gdb) file <binary>

  # 直接 run 启动进程
  (lldb/gdb) r
  # 添加启动参数
  (lldb/gdb) r args1 args2 ...
  # 查看参数
  (gdb) show args
  (lldb) settings show target.run-args
#+END_SRC
[[file:../static/image/2023/0205/131917.png]]

*** 调试流程控制
**** 设置断点 breakpoint
#+BEGIN_SRC sh
  # 普通断点
  b main
  b main.cc:12
  b 12
  # 条件断点
  (gdb) b 34 if i = 10
  (gdb) break foo if strcmp(y,"hello") == 0
  (lldb) breakpoint set --name foo --condition '(int)strcmp(y,"hello") == 0'
  (lldb) br s -n foo -c '(int)strcmp(y,"hello") == 0'
  (lldb) br s -n read_page -c 'm_page_id.space()==56'
  # 临时断点: 临时断点执行一次后自动销毁
  tb main
#+END_SRC

**** 流程控制 step & next & continue
1. step 单步调试，不进入函数
2. next 单步调试，进入函数
3. continue 继续执行
   #+BEGIN_SRC sh
     s # step
     n # next
     c # continue

     # until 直接执行到行数
     (gdb) until 12
     (lldb) thread until 12
   #+END_SRC
4. 跳转到指定行
   - 条件断点 ~tb~ temp breakpoint
   - until ~until <line>~
5. 返回当前值
   #+BEGIN_SRC sh
     (gdb) return <return expression>
     (lldb) thread return <return expression>
   #+END_SRC

*** 保持断点 & 现场恢复
GDB 保存断点的方式比较方便，直接保持成一个文本文件后，再应用代码
#+BEGIN_SRC sh
  # 保持断点到文件中
  (gdb) save breakpoint mybreak.txt
  # 重新加载保存的断点
  (gdb) source mybreak.txt
#+END_SRC

LLDB 保存断点也有类似的命令，但是保存结果是一个 JSON
#+BEGIN_SRC sh
  # 保存断点到 json 格式文件
  (lldb) breakpoint write -f dbg001
  # 读取断点到 json 格式文件
  (lldb) breakpoint read -f dbg001
#+END_SRC

也可以参考这个答案优化流程 [[https://stackoverflow.com/questions/24638515/save-breakpoints-in-lldb][SO]]

[[file:../static/image/2023/0205/100837.png]]

*** 查看/修改变量和内存数据
1. 打印变量 print
   #+BEGIN_SRC sh
     (lldb) p thd->m_thread_id
     (my_thread_id) $1 = 10
     (lldb) x/w &$1
     0x7fbdc1240188: 0x0000000a
     (lldb)
   #+END_SRC
2. 查看内存地址中的数据
   #+BEGIN_SRC sh
     (lldb) x/8w $0 => 打印地址的数据, 打印 8 条数据, [w, b] 表示不同的打印方式
     0x7fbdc123dc00: 0x0916f4d8 0x00000001 0x0916f548 0x00000001
     0x7fbdc123dc10: 0x00000000 0x00000000 0xc1240440 0x00007fbd
     (lldb) x/8b $0
     0x7fbdc123dc00: 0xd8 0xf4 0x16 0x09 0x01 0x00 0x00 0x00
     (lldb) x/8x $0
     0x7fbdc123dc00: 0xd8 0xf4 0x16 0x09 0x01 0x00 0x00 0x00
   #+END_SRC
3. 查看 frame 中变量
   #+BEGIN_SRC sh
     # 查看局部变量
     (lldb) frame variable
     (lldb) fr v
     # 查看全局变量
     (lldb) target variable
     (lldb) ta v
     # 查看调用栈 thread backtrace
     (lldb/gdb) bt
   #+END_SRC

** 🐛 问题修复
*** MacOS: 证书错误问题 [[https://timnash.co.uk/getting-gdb-to-semi-reliably-work-on-mojave-macos/][(^-^)]]
#+BEGIN_QUOTE
  please check gdb is codesigned - see taskgated(8)
#+END_QUOTE
手工编写 gdb.xml
#+BEGIN_SRC xml
  <?xml version="1.0" encoding="UTF-8"?>
  <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN"
  "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
  <plist version="1.0">
  <dict>
      <key>com.apple.security.cs.allow-jit</key>
      <true/>
      <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
      <true/>
      <key>com.apple.security.cs.allow-dyld-environment-variables</key>
      <true/>
      <key>com.apple.security.cs.disable-library-validation</key>
      <true/>
      <key>com.apple.security.cs.disable-executable-page-protection</key>
      <true/>
      <key>com.apple.security.cs.debugger</key>
      <true/>
      <key>com.apple.security.get-task-allow</key>
      <true/>
  </dict>
  </plist>
#+END_SRC
使用命令给 gdb 添加证书
#+BEGIN_SRC sh
  codesign --entitlements gdb.xml -fs gdb-cert /usr/local/bin/gdb
#+END_SRC
* ☕️ Java
** JVM
1. [[https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/JVM%20%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%2032%20%E8%AE%B2%EF%BC%88%E5%AE%8C%EF%BC%89][JVM 系列]]
** 🍃 Spring Framework
1. 代码 [[https://github.com/spring-projects/spring-framework][Source]] | [[https://github.com/Jeanhwea/spring-framework/tree/jh/5.3.25][jh/5.3.25]]
2. 编译 [[https://github.com/spring-projects/spring-framework/wiki/Build-from-Source][BUILD]] => Java8 切到 5.3 分支
   #+BEGIN_SRC sh
     ./gradlew build
   #+END_SRC
3. 编译文档, 依赖 asciidoctor
   #+BEGIN_SRC sh
     ./gradlew asciidoctor
   #+END_SRC
4. 查看 tasks
   #+BEGIN_SRC sh :results output :dir ../../spring-framework
     ./gradlew tasks
   #+END_SRC
5. 生成代码流量跳转 TAGS
   #+BEGIN_SRC sh
     # 生成跳转的 TAG
     ctags -e -R --languages=c,c++ .
   #+END_SRC
** kafka
*** 资源链接
1. 说明文档 [[https://kafka.apache.org/documentation/][link]]
*** 环境配置
**** 官网快速使用手册
1. [[https://kafka.apache.org/quickstart][quickstart]]
#+BEGIN_SRC sh
  # 启动 zk
  ./bin/zookeeper-server-start.sh config/zookeeper.properties
  # 启动 kafka
  ./bin/kafka-server-start.sh config/server.properties

  # 创建 topic
  ./bin/kafka-topics.sh --bootstrap-server localhost:9092 --create --topic quickstart-events
  # 显示 topic 列表
  ./bin/kafka-topics.sh --bootstrap-server localhost:9092 --list
  # 查看指定 topic 状态
  ./bin/kafka-topics.sh --bootstrap-server localhost:9092 --describe --topic quickstart-events

  # 生产者 & 消费者
  ./bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --from-beginning --topic quickstart-events
  ./bin/kafka-console-producer.sh --bootstrap-server localhost:9092 --topic quickstart-events
#+END_SRC

配置相关
#+BEGIN_SRC sh
  ./bin/kafka-configs.sh --zookeeper localhost:2181 --all
#+END_SRC

**** docker 版本配置
1. [[https://hub.docker.com/r/bitnami/kafka/][docker hub]]
2. 配置文件 [[file:env-kafka/docker-compose.yaml][docker-compose.yaml]]
   #+BEGIN_SRC sh
     docker-compose up -d
   #+END_SRC

**** 源代码
跳过测试编译
#+BEGIN_SRC sh
  ./gradlew build -x test
#+END_SRC

编译发布包
#+BEGIN_SRC sh
  # 编译包
  ./gradlew clean releaseTarGz

  # 编译产物
  ls ./core/build/distributions/
#+END_SRC
** rocketmq
*** 资源链接
1. 官网文档 [[https://rocketmq.apache.org/docs/4.x/introduction/02quickstart][link]]
** hive
配置 [[https://hadoop.apache.org/docs/r2.6.2/hadoop-project-dist/hadoop-common/SingleCluster.html#Standalone_Operation][hadoop]]
#+BEGIN_SRC sh
  export HADOOP_HOME=/opt/local/hack/hadoop-2.6.0
  export PATH="$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$PATH"
  export HIVE_HOME=/opt/local/hack/apache-hive-1.2.2-bin
  export PATH="$HIVE_HOME/bin:$PATH"
#+END_SRC

配置 core-site.xml
#+BEGIN_SRC xml
  <configuration>
     <property>
        <name>fs.defaultFS</name>
        <value>hdfs://localhost:9000</value>
     </property>
  </configuration>
#+END_SRC

配置 hdfs-site.xml
#+BEGIN_SRC xml
  <configuration>
    <property>
      <name>dfs.replication</name>
      <value>1</value>
    </property>

    <property>
      <name>dfs.namenode.name.dir</name>
      <value>/opt/local/hdfs/namenode</value>
    </property>

    <property>
      <name>dfs.datanode.data.dir</name>
      <value>/opt/local/hdfs/datanode</value>
    </property>
  </configuration>
#+END_SRC

初始化命令
#+BEGIN_SRC sh
  # 格式化 namenode
  hdfs namenode -format
  # 启动/关闭 dfs
  start-dfs.sh
  stop-dfs.sh
#+END_SRC

[[https://cwiki.apache.org/confluence/display/Hive/GettingStarted#GettingStarted-InstallationandConfiguration][hive]] 需要有 /tmp, /user/hive/warehouse 目录, 并且配置 g+w 权限
- 配置元数据存放目录 hive.metastore.warehouse.dir
#+BEGIN_SRC sh
  hadoop fs -mkdir       /tmp
  hadoop fs -mkdir -p    /user/hive/warehouse
  hadoop fs -chmod g+w   /tmp
  hadoop fs -chmod g+w   /user/hive/warehouse
#+END_SRC

解决 [ERROR] Terminal initialization failed; falling back to unsupported 问题
#+BEGIN_SRC sh
  export HADOOP_USER_CLASSPATH_FIRST=true
#+END_SRC

* 🏄 脚本语言
** Perl
*** 环境配置
**** 包管理工具配置 CPAN
1. 官网 [[https://metacpan.org/][CPAN]]
2. 镜像 [[https://mirrors.tuna.tsinghua.edu.cn/help/CPAN/][TUNA]]
   #+BEGIN_SRC sh
     PERL_MM_USE_DEFAULT=1 perl -MCPAN -e 'CPAN::HandleConfig->edit("pushy_https", 0); CPAN::HandleConfig->edit("urllist", "unshift", "https://mirrors.tuna.tsinghua.edu.cn/CPAN/"); mkmyconfig'
   #+END_SRC
3. CPAN 的配置文件: =~/.cpan/CPAN/MyConfig.pm=
**** 包管理命令
#+BEGIN_SRC sh
  perl -MCPAN -e 'install Excel::Writer::XLSX'
#+END_SRC
*** 基本使用
**** Hello world
创建 =hello.pl= 文件写以下代码
#+BEGIN_SRC perl :results output
  print("hello world\n");
#+END_SRC

#+RESULTS:
: hello world

使用 perl 命令运行代码
#+BEGIN_SRC sh
  perl hello.pl
#+END_SRC
[[file:../static/image/2023/0129/192740.png]]

**** 过滤 MySQL trace 日志
#+BEGIN_SRC perl :results file
  use strict;
  use warnings;

  my $cid = 8;
  my $fout = "/tmp/mysqld-thd-$cid.txt";
  open(FIN, '<:encoding(UTF-8)', "/tmp/mysqld.trace") or die;
  open(FOUT, '>', $fout) or die;

  while (my $line = <FIN>) {
      if ($line =~ /^T\@$cid/) {
          print FOUT $line;
      }
  }

  close(FOUT);
  $fout;
#+END_SRC

#+RESULTS:
[[file:/tmp/mysqld-thd-8.txt]]

** Python

** Ruby
1. 配置国内 GEM 镜像 [[https://gems.ruby-china.com/][Ruby China]]
* 🤓 基础知识
** 数据结构
1. 红黑树 [[https://www.cs.usfca.edu/~galles/visualization/RedBlack.html][rbtree]]
** 操作系统
*** 课程 [[https://pdos.csail.mit.edu/6.828/2019/index.html][MIT 6.828]]
**** 环境准备
1. [[https://pdos.csail.mit.edu/6.828/2019/tools.html][工具链]] risc-v
2. 课程视频 [[https://www.bilibili.com/video/BV19k4y1C7kA][BILI]]
3. 中文课程整理 [[http://xv6.dgs.zone/][中文介绍]]
*** Minix
**** 配置环境
[[https://wiki.minix3.org/doku.php?id=developersguide:crosscompiling][交叉编译文档]]

下载代码
#+BEGIN_SRC sh
  mkdir minix
  cd minix
  git clone git://git.minix3.org/minix src
  cd src
#+END_SRC

安装依赖
#+BEGIN_SRC sql
  sudo apt-get install build-essential curl git zlibc zlib1g zlib1g-dev g++
#+END_SRC

编译内存镜像
#+BEGIN_SRC sh
  JOBS=8 ./releasetools/x86_hdimage.sh
#+END_SRC

启动镜像
#+BEGIN_SRC sh
  cd ../obj.i386/destdir.i386/boot/minix/.temp

  qemu-system-i386 -display none \
                   -serial stdio \
                   -kernel kernel \
                   -append "console=tty00 rootdevname=c0d0p1" \
                   -initrd "mod01_ds,mod02_rs,mod03_pm,mod04_sched,mod05_vfs,mod06_memory,mod07_tty,mod08_mfs,mod09_vm,mod10_pfs,mod11_init" \
                   -hda /opt/local/hack/minix/src/minix_x86.img --enable-kvm
#+END_SRC

[[file:../static/image/2023/0315/112736.png]]

** 极客时光
*** 专栏 [[https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/22%20%E8%AE%B2%E9%80%9A%E5%85%B3%20Go%20%E8%AF%AD%E8%A8%80-%E5%AE%8C][22 讲通关 Go 语言]]
*** 专栏 [[https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/24%E8%AE%B2%E5%90%83%E9%80%8F%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93-%E5%AE%8C][24 讲吃透分布式数据库]]
*** 专栏 [[https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E9%AB%98%E6%89%8B%E8%AF%BE][消息队列高手课]]
**** 分布式事务
1. 订单系统在消息队列上开启一个事务
2. 然后订单系统给消息服务器发送一个 *半消息*
3. 这个半消息不是说消息内容不完整，它包含的内容就是完整的消息内容，半消息和普通
   消息的唯一区别是，在事务提交之前，对于消费者来说，这个消息是不可见的
4. 半消息发送成功后，订单系统就可以执行本地事务

[[file:../static/image/2023/0308/224741.png]]

如果 *半消息* 提交失败，不同队列会有不同处理方式
1. Kafka 的解决方案比较简单粗暴，直接抛出异常，让用户自行处理。我们可以在业务代
   码中反复重试提交，直到提交成功，或者删除之前创建的订单进行补偿
2. RocketMQ 中的事务实现中，增加了事务反查的机制来解决事务消息提交失败的问题

   [[file:../static/image/2023/0308/225054.png]]

   为了支撑这个事务反查机制，我们的业务代码需要实现一个反查本地事务状态的接口，
   告知 RocketMQ 本地事务是成功还是失败
**** 重复消费
在 MQTT 协议中，给出了三种传递消息时能够提供的服务质量标准，这三种服务质量从低到
高依次是：

1. At most once: 至多一次。消息在传递时，最多会被送达一次。换一个说法就是，没什
   么消息可靠性保证，允许丢消息。一般都是一些对消息可靠性要求不太高的监控场景使
   用，比如每分钟上报一次机房温度数据，可以接受数据少量丢失。
2. At least once: 至少一次。消息在传递时，至少会被送达一次。也就是说，不允许丢消
   息，但是允许有少量重复消息出现。
3. Exactly once：恰好一次。消息在传递时，只会被送达一次，不允许丢失也不允许重复，
   这个是最高的等级。

用幂等性解决重复消息问题
1. 利用数据库的唯一约束实现幂等
2. 为更新的数据设置前置条件
3. 记录并检查操作

**** 消息积压
1. 优化消息收发性能，预防消息积压的方法有两种，
   - 增加批量或者是增加并发，在发送端这两种方法都可以使用
   - 在消费端需要注意的是，增加并发需要同步扩容分区数量，否则是起不到效果的
2. 对于系统发生消息积压的情况，需要先解决积压，再分析原因
   - 快速解决积压的方法就是通过水平扩容增加 Consumer 的实例数量
