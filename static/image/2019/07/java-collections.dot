digraph javaCollection {
  // rankdir=LR;
  size="16"
  // splines=ortho;
  // bgcolor="#f6f6f6"

  // notes
  node [
    fontname="Source Code Pro";
    fontsize=16;
  ];
  package [
    shape=plaintext;
    label="java.util";
  ];
  generic_types [
    shape=note;
    color="#8559a5";
    penwidth=2;
    label="Generic Types\n--------------\nE: element\lK: key\lV: value\l";
  ];


  // graph start
  node [
    shape=box;
    style="filled";
    color="#ffffff";
    fontcolor="#ffffff";
    height=0.8;
  ];

  edge [
    color="#484c7f"
  ];

  node [fillcolor="#e4007c"];
  object [label="java.lang.Object"];
  {rank=same; package; generic_types; object}
  package -> object [style=invis, minlen=40];
  object -> generic_types [style=invis, minlen=20];

  // interfaces
  node [fillcolor="#00b7a8"];
  collection [label="\<\<Interface\>\>\nCollection\<E\>"];
  set [label="\<\<Interface\>\>\nSet\<E\>"];
  list [label="\<\<Interface\>\>\nList\<E\>"];
  map [label="\<\<Interface\>\>\nMap\<K,V\>"];
  serializable [label="\<\<Interface\>\>\nSerializable\<K,V\>"];

  // classes
  node [fillcolor="#096386"];
  abstract_collection [label="AbstractCollection\<E\>"];

  node [fillcolor="#930077"];
  abstract_set [label="AbstractSet\<E\>"];
  enum_set [label="EnumSet\<E\>"];
  hash_set [label="HashSet\<E\>"];
  linked_hash_set [label="LinkedHashSet\<E\>"];
  tree_set [label="TreeSet\<E\>"];

  node [fillcolor="#6e9086"];
  abstract_list [label="AbstractList\<E\>"];
  abstract_sequential_list [label="AbstractSequentialList\<E\>"];
  array_list [label="ArrayList\<E\>"];
  linked_list [label="LinkedList\<E\>"];

  node [fillcolor="#fab95b"];
  abstract_map [label="AbstractMap\<K,V\>"];
  enum_map [label="EnumMap\<K,V\>"];
  hash_map [label="HashMap\<K,V\>"];
  tree_map [label="TreeMap\<K,V\>"];
  // concurrent_hash_map [label="ConcurrentHashMap\<K,V\>"];
  linked_hash_map [label="LinkedHashMap\<K,V\>"];

  edge [dir=back; arrowtail=empty;];
  object -> {abstract_collection, abstract_map};
  abstract_collection -> {abstract_list, abstract_set};
  abstract_set -> {enum_set, hash_set, tree_set};
  hash_set -> linked_hash_set;
  abstract_list -> {array_list, abstract_sequential_list};
  abstract_sequential_list -> linked_list;
  abstract_map -> {enum_map, hash_map, tree_map};
  hash_map -> linked_hash_map;

  edge [style=dashed; dir=forward; arrowhead=empty;];
  abstract_collection -> collection;
  abstract_set -> set;
  abstract_list -> list;
  abstract_map -> map;
  {
    linked_list,
    array_list,
    enum_set,
    hash_set,
    linked_hash_set,
    tree_set,
    enum_map,
    hash_map,
    tree_map
  } -> serializable;

  {
    rank=same;
    abstract_set; abstract_list; abstract_map;
  }
  edge [style=invis];
  {
    abstract_list -> abstract_set -> abstract_map;
    list -> set -> map;
  }
  {
    rank=same;
    list; set; map;
  }
}
