#+TITLE: 列表
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2018-10-23 Tue>
#+TAGS: python programming list


* 元素索引

常见的有直接下标索引，范围索引，倒序索引。

#+BEGIN_SRC python :preamble "# -*- coding: utf-8 -*-" :exports both :session default :results output pp
  nums = [1, 2, 3, 4, 5, 6, 7]
  print(nums[1:3], nums[-3:], nums[-2])
#+END_SRC

#+RESULTS:
: [2, 3] [5, 6, 7] 6

使用具有一定步长的索引

#+BEGIN_SRC python :preamble "# -*- coding: utf-8 -*-" :exports both :session default :results output pp
  start = 1; end = 7; step  = 2
  print(nums[start:end:step])
#+END_SRC

#+RESULTS:
: [2, 4, 6]


* 成员方法

~append~ 方法向列表最后添加元素，注意这样添加的方式是 *引用* ， 如果需要复制的方
式则需要 *深度复制* 。

#+BEGIN_SRC python :preamble "# -*- coding: utf-8 -*-" :exports both :session default :results output pp
  x = [1, 2, 3]
  y = x
  x.append(4)
  print(x, y)

  from copy import copy
  y = copy(x)
  x.append(5)
  print(x, y)
#+END_SRC

#+RESULTS:
: [1, 2, 3, 4] [1, 2, 3, 4]
: [1, 2, 3, 4, 5] [1, 2, 3, 4]

使用 ~in~ 可以判断当前元素是否在一个列表里。 ~len~ 是求列表的长度， ~min~ 求列表
中的最小值。

#+BEGIN_SRC python :preamble "# -*- coding: utf-8 -*-" :exports both :session default :results output pp
  greeting = 'Hello'
  print('x' in greeting)
  print('l' in greeting)
  print(len(greeting))
  print(min(greeting))
#+END_SRC

#+RESULTS:
: False
: True
: 5
: H

一些非常重要的技巧， *通过赋值的方式来增加和删除列表中的元素* 。

#+BEGIN_SRC python :preamble "# -*- coding: utf-8 -*-" :exports both :session default :results output pp
  # important skill
  numbers = [1, 5]
  numbers[1:1] = [2, 3, 4] # add elements by assign
  print(numbers)
  numbers[-3:] = [] # delete elements by assign empty list
  print(numbers)
#+END_SRC

#+RESULTS:
: [1, 2, 3, 4, 5]
: [1, 2]

~count~ 对列表中的元素计数， ~extend~ 是扩展列表

#+BEGIN_SRC python :preamble "# -*- coding: utf-8 -*-" :exports both :session default :results output pp
  clist = [1, 2, 1, 3, 4, 2, 1]
  print(clist.count(1))
  a = [1, 2, 3]; b = [5, 7]
  a.extend(b)
  print(a)
#+END_SRC

#+RESULTS:
: 3
: [1, 2, 3, 5, 7]

~index~ 查找元素，返回元素下标。 ~insert~ 插入元素。 ~pop~ 出栈元素。 ~remove~
查找并删除特定元素。

#+BEGIN_SRC python :preamble "# -*- coding: utf-8 -*-" :exports both :session default :results output pp
  friuts = ['apple', 'banana', 'orange']
  print(friuts.index('orange'))
  friuts.insert(1, 'pear')
  print(friuts)
  friuts.pop()
  print(friuts)
  friuts.remove('apple')
  print(friuts)
#+END_SRC

#+RESULTS:
: 2
: ['apple', 'pear', 'banana', 'orange']
: ['apple', 'pear', 'banana']
: ['pear', 'banana']

~reverse~ 翻转列表。 ~sort~ 成员方法在修改当前列表的元素，对其进行排序。
~sorted~ 返回排序后的副本。

#+BEGIN_SRC python :preamble "# -*- coding: utf-8 -*-" :exports both :session default :results output pp
  x = [4, 6, 2, 1, 0, 6]
  x.reverse()
  print(x)
  y = sorted(x) # return a sorted copy to y
  print(y)
  x.sort() # return None
  print(x)
  friuts = ['apple', 'pear', 'banana', 'orange']
  friuts.sort(key=len)
  print(friuts)
#+END_SRC

#+RESULTS:
: [6, 0, 1, 2, 6, 4]
: [0, 1, 2, 4, 6, 6]
: [0, 1, 2, 4, 6, 6]
: ['pear', 'apple', 'banana', 'orange']
