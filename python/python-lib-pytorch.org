#+TITLE: PyTorch
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2020-10-12 Mon 10:48:59>
#+HTML_LINK_UP: ../readme.html
#+HTML_LINK_HOME: ../index.html
#+SETUPFILE: ~/.emacs.d/site-lisp/org-html-themes/setup/theme-readtheorg-local.setup
#+TAGS: pytorch torch python cnn


* PyTorch
  PyTorch 和 Numpy 的数组和相似，PyTorch 的数据类型大多数是叫 Tensor，并且 Tensor
  可以在 GPU 上进行计算，用于提高计算效率

  #+BEGIN_SRC python :session cpython :exports both :results none
    import torch
    import numpy as np
  #+END_SRC

* 基础运算
** 初始化 tensor
   #+BEGIN_SRC python :session cpython :exports both :results output
     x0 = torch.zeros(2, 3)
     x1 = torch.ones(3, 2)
     x2 = torch.zeros(2, 3, dtype=torch.long) # dtype: int32 int64 float32 float64
     x3 = torch.Tensor([1.1, 3.0])
     print(x1)
     print(x2)
     print(x3)
   #+END_SRC

   #+RESULTS:
   : tensor([[1., 1.],
   :         [1., 1.],
   :         [1., 1.]])
   : tensor([[0, 0, 0],
   :         [0, 0, 0]])
   : tensor([1.1000, 3.0000])

   获取默认创建的数据类型
   #+BEGIN_SRC python :session cpython :exports both :results output pp
     print(torch.get_default_dtype())
   #+END_SRC

   #+RESULTS:
   : torch.float32

** tensor 的一些操作
   #+BEGIN_SRC python :session cpython :exports both :results output pp
     x1 = torch.Tensor([1.1, 3.0])
     print(x1.size())
   #+END_SRC

   #+RESULTS:
   : torch.Size([2])

   如果想要 resize 或 reshape 一个 tensor，可以使用 view 方法
   #+BEGIN_SRC python :session cpython :exports both :results output pp
     x1 = torch.randn(24)
     x2 = x1.view(2, 3, 4)
     x3 = x1.view(4, -1)
     print(x2)
     print(x3)
   #+END_SRC

   #+RESULTS:
   #+begin_example
   tensor([[[-0.1641, -0.2935,  1.0093,  0.5002],
            [-0.9807,  0.4791, -0.3171, -0.8985],
            [-1.0155, -0.6139, -0.4744,  1.0637]],

           [[ 2.1102, -0.5365,  0.7032, -0.1529],
            [-0.3487, -0.9573,  0.5081, -0.2366],
            [ 1.0415,  0.3548,  0.5515, -0.2949]]])
   tensor([[-0.1641, -0.2935,  1.0093,  0.5002, -0.9807,  0.4791],
           [-0.3171, -0.8985, -1.0155, -0.6139, -0.4744,  1.0637],
           [ 2.1102, -0.5365,  0.7032, -0.1529, -0.3487, -0.9573],
           [ 0.5081, -0.2366,  1.0415,  0.3548,  0.5515, -0.2949]])
   #+end_example

   如果 tensor 里只有一个数字，item 方法可以把里面的 value 变成 Python 数值
   #+BEGIN_SRC python :session cpython :exports both :results output pp
     x = torch.randn(1)
     print(x)
     print(x.item())
   #+END_SRC

   #+RESULTS:
   : tensor([0.1705])
   : 0.1705346405506134

** tensor 和 ndarray 数据类型互转
   #+BEGIN_SRC python :session cpython :exports both :results output pp
     t1 = torch.randn((2, 3)) # normal distribution with shape (2,3)
     a1 = t1.numpy()
     print(t1)
     print(a1)

     a2 = np.random.normal(0, 0.01, 10)
     t2 = torch.from_numpy(a2)
     print(a2)
     print(t2)
   #+END_SRC

   #+RESULTS:
   : tensor([[ 2.0561,  1.1593,  2.7883],
   :         [-0.7887,  0.3536,  1.7694]])
   : [[ 2.0561314   1.1592966   2.7883365 ]
   :  [-0.7886873   0.35360292  1.7694149 ]]
   : [-0.00119581 -0.0058083  -0.02654656  0.00712973 -0.01919779 -0.01425222
   :   0.0085908   0.00619372 -0.00130839 -0.0010277 ]
   : tensor([-0.0012, -0.0058, -0.0265,  0.0071, -0.0192, -0.0143,  0.0086,  0.0062,
   :         -0.0013, -0.0010], dtype=torch.float64)

   pytorch 和 numpy 数据关系包含两种关系：share vs. copy
   #+BEGIN_SRC python :session cpython :exports both :results output pp
     a = np.array([1, 2, 3])
     print(a)

     t1 = torch.Tensor(a)
     t2 = torch.tensor(a)
     t3 = torch.as_tensor(a)
     t4 = torch.from_numpy(a)

     a[0] = 0
     print(t1)
     print(t2)
     print(t3)
     print(t4)
   #+END_SRC

   #+RESULTS:
   : [1 2 3]
   : tensor([1., 2., 3.])
   : tensor([1, 2, 3])
   : tensor([0, 2, 3])
   : tensor([0, 2, 3])

* CUDA Tensor 技术
  Tensor 可以放在 CUDA 显卡上进行计算
  #+BEGIN_SRC python :session cpython :exports both :results output pp
    x = torch.randn(2, 3)
    if torch.cuda.is_available():
        device = torch.device("cuda:0")  # a CUDA device object
        y = torch.ones_like(x, device=device)  # directly create a tensor on GPU
        x = x.to(device)  # or just use strings ``.to("cuda")``
        z = x + y
        print(z)
        print(z.to("cpu", torch.double))  # ``.to`` can also change dtype together!
    else:
        print("gpu is not available")
  #+END_SRC

  #+RESULTS:
  : gpu is not available

* 张量形状变换
  修改矩阵的形状，转置，交换维度等操作
  #+BEGIN_SRC python :session cpython :exports both :results output pp
    x = torch.arange(12).view(2, 3, 2)
    print(x)
    print(x.transpose(1, 0))
    print(x.permute(1, 0, 2))
  #+END_SRC

  #+RESULTS:
  #+begin_example
  tensor([[[ 0,  1],
           [ 2,  3],
           [ 4,  5]],

          [[ 6,  7],
           [ 8,  9],
           [10, 11]]])
  tensor([[[ 0,  1],
           [ 6,  7]],

          [[ 2,  3],
           [ 8,  9]],

          [[ 4,  5],
           [10, 11]]])
  tensor([[[ 0,  1],
           [ 6,  7]],

          [[ 2,  3],
           [ 8,  9]],

          [[ 4,  5],
           [10, 11]]])
  #+end_example

  # \begin{matrix}
  #   0 & 1 \\
  #   2 & 3
  # \end{matrix}

  压扁给定的维度为 1  的维度值
  #+BEGIN_SRC python :session cpython :exports both :results output pp
    x = torch.arange(6).view(1, -1)
    print(x.shape)
    print(x)
    a1 = x.squeeze(0)
    print(a1.shape)
    print(a1)
    a2 = a1.unsqueeze(0)
    print(a2)
  #+END_SRC

  #+RESULTS:
  : torch.Size([1, 6])
  : tensor([[0, 1, 2, 3, 4, 5]])
  : torch.Size([6])
  : tensor([0, 1, 2, 3, 4, 5])
  : tensor([[0, 1, 2, 3, 4, 5]])

* 附录
  安装 PyTorch 之前最好是配合 Anaconda3 发行版一起安装，安装好 Anaconda 过后直接
  使用下面命令安装
  #+BEGIN_SRC sh
    conda install pytorch torchvision -c pytorch
  #+END_SRC

  也可以使用 pip 安装对应的 wheel 包
  #+BEGIN_SRC sh
    pip3 install torch torchvision
  #+END_SRC

* 参考链接
  1. [[https://pytorch.org/][PyTorch]]
  2. [[https://pytorch.org/docs/stable/index.html][PyTorch Doc]]
  3. [[https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/][Anaconda Download]]
  4. [[https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-python.html][org-mode python]]
