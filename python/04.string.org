#+TITLE: 字符串
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2018-10-23 Tue>
#+TAGS: python programming string


* 基本操作

字符串有类似于列表的索引操作，也可以使用 ~%~ 和元组的组合方式来输出格式化字符串。

#+BEGIN_SRC python :preamble "# -*- coding: utf-8 -*-" :exports both :session default :results output pp
  url = 'http://jeanhwea.github.io'
  print(url[-2:])
  fmt = 'first: %s, second: %s'
  val = ('hello', 'Jeanhwea')
  print(fmt % val)
#+END_SRC

#+RESULTS:
: io
: first: hello, second: Jeanhwea


* 模板字符串

Python 支持字符串模板的操作，但是并没有 Ruby 那么好用，一般的操作方式如下：

#+BEGIN_SRC python :preamble "# -*- coding: utf-8 -*-" :exports both :session default :results output pp
  from string import Template
  s = Template('$friut is $color') # using $$ to diplay $
  data = {'friut': 'apple', 'color': 'red'}
  print(s.substitute(friut='banana', color='yellow'))
  print(s.substitute(data))
#+END_SRC

#+RESULTS:
: banana is yellow
: apple is red

另外一直比较常用的模板字符串形式如下，操作清晰易懂，建议使用这种方式来操作字符串。

#+BEGIN_SRC python :preamble "# -*- coding: utf-8 -*-" :exports both :session default :results output pp
foo = 'foo'
bar = 'bar'

foobar = '%s%s' % (foo, bar)
foobar = '{0}{1}'.format(foo, bar)
foobar = '{foo}{bar}'.format(foo=foo, bar=bar)

print(foobar)
#+END_SRC

#+RESULTS:
: foobar


* 成员函数

字符串索引方式。

#+BEGIN_SRC python :preamble "# -*- coding: utf-8 -*-" :exports both :session default :results output pp
  #  +---+---+---+---+---+---+
  #  | P | y | t | h | o | n |
  #  +---+---+---+---+---+---+
  #  0   1   2   3   4   5   6
  # -6  -5  -4  -3  -2  -1
  python = 'Python'
  print(python[0], python[1], python[2])
  print(python[-1], python[-2])
#+END_SRC

#+RESULTS:
: P y t
: n o

~find~ 查找字符串的内容

#+BEGIN_SRC python :preamble "# -*- coding: utf-8 -*-" :exports both :session default :results output pp
  url = 'http://jeanhwea.github.io'
  print(url.find('jeanhwea'))
  print(url.find('nothing'))
  start = 10
  print(url.find('e', start))
#+END_SRC

#+RESULTS:
: 7
: -1
: 13

~join~ 连接字符串

#+BEGIN_SRC python :preamble "# -*- coding: utf-8 -*-" :exports both :session default :results output pp
  dirs = 'home' , 'hujh', 'Projects' # tuple
  print('/'.join(dirs))
  seq = [1, 3, 4] # list
  print('+'.join([str(n) for n in seq]))
#+END_SRC

#+RESULTS:
: home/hujh/Projects
: 1+3+4

~split~ 分割字符串

#+BEGIN_SRC python :preamble "# -*- coding: utf-8 -*-" :exports both :session default :results output pp
  nums = '1+3+2+3+2'.split('+')
  print(nums)
#+END_SRC

#+RESULTS:
: ['1', '3', '2', '3', '2']

~strip~ 可以移除字符串前后的空白字符，另外有 ~lstrip~ 和 ~rstrip~ 。其它一些转化
大小写的函数见代码演示。

#+BEGIN_SRC python :preamble "# -*- coding: utf-8 -*-" :exports both :session default :results output pp
  foo = '   internal whitespace is kept    '
  print(foo.strip())
  print(foo.lstrip())
  print(foo.rstrip())

  sentence = 'My name is Jack'
  print(sentence.lower())

  title = sentence.replace('name', 'first name')
  print(title.capitalize())

  from string import capwords
  print(capwords(title))
#+END_SRC

#+RESULTS:
: internal whitespace is kept
: internal whitespace is kept    
:    internal whitespace is kept
: my name is jack
: My first name is jack
: My First Name Is Jack
