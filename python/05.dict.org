#+TITLE: 字典
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2018-10-23 Tue>
#+TAGS: python programming dictionary


* 基本操作

字典的添加、删除、修改

#+BEGIN_SRC python :preamble "# -*- coding: utf-8 -*-" :exports both :session default :results output pp
  items = [('name', 'Jeanhwea'), ('age', '24')]
  d = dict(items)
  print(d['name'])
  d['gender'] = 'man'
  print(d)
  len(d) #>>> 3
  del d['age']
  print(d)
  print('name' in d)
#+END_SRC

#+RESULTS:
: Jeanhwea
: {'name': 'Jeanhwea', 'age': '24', 'gender': 'man'}
: {'name': 'Jeanhwea', 'gender': 'man'}
: True

关于字典引用的相关操作

#+BEGIN_SRC python :preamble "# -*- coding: utf-8 -*-" :exports both :session default :results output pp
  xdic = {}
  xdic['key'] = 'value'
  ydic = xdic
  print(ydic)
  xdic.clear() # clear xdic
  print(ydic)

  xdic['key'] = 'value'
  print(ydic)
  xdic = {} # bind a empty dict to x
  print(ydic)
#+END_SRC

#+RESULTS:
: {'key': 'value'}
: {}
: {'key': 'value'}
: {'key': 'value'}


* 浅拷贝和深拷贝

字典也有浅拷贝和深拷贝的区别，具体见下面代码。

#+BEGIN_SRC python :preamble "# -*- coding: utf-8 -*-" :exports both :session default :results output pp
  # shallow copy
  x = { 'name': 'Jeanhwea', 'friends': ['Jack', 'Alice'] }
  y = x.copy()
  y['name'] = 'Wang'
  y['friends'].remove('Jack')
  print(x, y)

  # deep copy
  x = { 'name': 'Jeanhwea', 'friends': ['Jack', 'Alice'] }
  from copy import deepcopy
  y = deepcopy(x)
  y['name'] = 'Wang'
  y['friends'].remove('Jack')
  print(x, y)
#+END_SRC

#+RESULTS:
: {'name': 'Jeanhwea', 'friends': ['Alice']} {'name': 'Wang', 'friends': ['Alice']}
: {'name': 'Jeanhwea', 'friends': ['Jack', 'Alice']} {'name': 'Wang', 'friends': ['Alice']}


* 常见操作

~fromkeys~ 通过列表生成字典。查字典时， ~get~ 方法不会引起异常，直接索引会引起异
常。

#+BEGIN_SRC python :preamble "# -*- coding: utf-8 -*-" :exports both :session default :results output pp
  keys = ['a', 'b', 'c']
  {}.fromkeys(keys) #>>> {'a': None, 'c': None, 'b': None}
  {}.fromkeys(keys, '(none)') #>>> {'a': '(none)', 'c': '(none)', 'b': '(none)'}


  xdic = {'a': 'aa', 'b': 'bb'}
  # xdic['c'] will cause a error
  '''
  Traceback (most recent call last):
    File "05-dict.py", line 51, in <module>
      xdic['c']
  KeyError: 'c'
  '''
  xdic.get('c') #>>> None
  xdic = {'a': 'aa', 'b': 'bb'}
#+END_SRC

~has_key~ 在 Python3.x 中已经弃用，建议用 ~in~ 关键字判断是否在字典中。字典还有
一些迭代器，具体见下面代码。

#+BEGIN_SRC python :preamble "# -*- coding: utf-8 -*-" :exports both :session default :results output pp
  xdic.has_key('a') #>>> True
  xdic.has_key('c') #>>> False

  xdic['c'] = 'cc'
  xdic.items() #>>> [('a', 'aa'), ('c', 'cc'), ('b', 'bb')]
  for k, v in xdic.iteritems():
      pass
  for v in xdic.itervalues():
      pass
  for k in xdic.iterkeys():
      pass
#+END_SRC

~update~ 方法通过一个字典的内容来替换另外一个字典。

#+BEGIN_SRC python :preamble "# -*- coding: utf-8 -*-" :exports both :session default :results output pp
  dic = {'title': 'aaaa', 'url': 'http://jeanhwea.github.io', 'content': 'nothing'}
  x = {'title': 'bbbb', 'url': 'http://www.github.com/jeanhwea'}
  print(dic)
  dic.update(x)
  print(dic)
#+END_SRC

#+RESULTS:
: {'title': 'aaaa', 'url': 'http://jeanhwea.github.io', 'content': 'nothing'}
: {'title': 'bbbb', 'url': 'http://www.github.com/jeanhwea', 'content': 'nothing'}


* 获取字典的值

~setdefault~ 用于设置字典的默认值，如果元素存在则返回元素的值，并将值写入字典。
~get~ 方法有同样的取值效果，但是不会将字典中不存在的值写入字典中。

#+BEGIN_SRC python :preamble "# -*- coding: utf-8 -*-" :exports both :session default :results output pp
  da = {'a': 'apple'}
  a = da.setdefault('a', 'none')
  b = da.setdefault('b', 'none')
  print(da)
  print(a, b)

  db = {'a': 'apple'}
  a = db.get('a', 'none')
  b = db.get('b', 'none')
  print(db)
  print(a, b)

  db['b'] # raise KeyError
#+END_SRC

#+RESULTS:
: {'a': 'apple', 'b': 'none'}
: apple none
: {'a': 'apple'}
: apple none
: Traceback (most recent call last):
:   File "<stdin>", line 1, in <module>
:   File "/var/folders/zv/mx8xm0m92_b1fwtchhz7dn6c0000gn/T/babel-zrDlJg/python-SRNjD3", line 13, in <module>
:     db['b']
: KeyError: 'b'
