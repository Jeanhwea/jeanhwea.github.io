#+TITLE: Excel 或者 csv 文件
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2018-10-24 Wed>
#+TAGS: python programming excel csv


* Excel

Python 不是自带操作 Excel 的包，需要安装第三方包来完成相应的操作。常见的可以操作
Excel 文件的包有：pandas, openpyxl, xlrd, xlutils 和 pyexcel。

** pandas

读取 Excel 中的数据

#+BEGIN_SRC python :preamble "# -*- coding: utf-8 -*-" :exports both :session default :results output pp
  import pandas as pd
  xl = pd.ExcelFile('example.xlsx')
  print(xl.sheet_names)
  df1 = xl.parse(xl.sheet_names[0])
  print(df1)
#+END_SRC

#+RESULTS:
: ['Sheet1']
: 0  1
: 1  3
: 2  5
: 3  6
: 4  8

将数据写入 Excel 文件

#+BEGIN_SRC python :preamble "# -*- coding: utf-8 -*-" :exports both :session default :results output pp
  import numpy as np
  import pandas as pd
  data =   pd.Series([1,3,5,6,8])
  writer = pd.ExcelWriter('example.xlsx', engine='xlsxwriter')
  data.to_excel(writer, 'Sheet1')
  print(data)
  writer.save()
#+END_SRC

#+RESULTS:
: 0    1
: 1    3
: 2    5
: 3    6
: 4    8
: dtype: int64

** xlrd

xlrd 可以操作 Excel，如果想要轻量级操作可以使用这个包，并且 pandas 读取 Excel 底
层也是调用 xlrd 的。 xlrd 的缺点是 *只能读取，不能写入* 。

#+BEGIN_SRC python :preamble "# -*- coding: utf-8 -*-" :exports both :session default :results output pp
import xlrd
workbook = xlrd.open_workbook('example.xlsx')
workbook = xlrd.open_workbook('example.xlsx', on_demand = True)
print(workbook.sheet_names())
print(workbook.sheets())
sheet = workbook.sheet_by_name('Sheet1')
sheet = workbook.sheet_by_index(0)

row, col = 3, 0
# ctype : 0 empty,1 string, 2 number, 3 date, 4 boolean, 5 error
print(sheet.cell(row, col).ctype)
print(sheet.cell(row, col).value)
print(sheet.nrows, sheet.ncols)
print(sheet.col_values(0))
print(sheet.row_values(4))
#+END_SRC

#+RESULTS:
: ['Sheet1']
: [<xlrd.sheet.Sheet object at 0x000000001407E208>]
: 2
: 2.0
: 6 2
: ['', 0.0, 1.0, 2.0, 3.0, 4.0]
: [3.0, 6.0]

** xlwt

xlwt 可以写入 Excel 文件，具体使用方式见代码

#+BEGIN_SRC python :preamble "# -*- coding: utf-8 -*-" :exports both :session default :results output pp
  import xlwt

  book = xlwt.Workbook(encoding="utf-8")
  sheet1 = book.add_sheet("Sheet1")
  sheet1.write(0, 0, "Hello world")
  book.save("sheet1.xls")

  book = xlwt.Workbook()
  sheet1 = book.add_sheet("Sheet1")
  cols = ["A", "B", "C", "D", "E"]
  txt = [0,1,2,3,4]
  for num in range(5):
    row = sheet1.row(num)
    for index, col in enumerate(cols):
      value = txt[index] + num
      row.write(index, value)
  book.save("test.xls")
#+END_SRC


* csv

Python 自带读写 csv 文件的模块，可以直接导入 csv 模块。

#+BEGIN_SRC python :preamble "# -*- coding: utf-8 -*-" :exports both :session default :results output pp
  import csv
#+END_SRC

** 读取 csv 文件

使用函数方式读取 csv 文件

#+BEGIN_SRC python :preamble "# -*- coding: utf-8 -*-" :exports both :session default :results output pp
  with open('eggs.csv', 'rb') as csvfile:
    spamreader = csv.reader(csvfile, delimiter=' ', quotechar='|')
    for row in spamreader:
      print ', '.join(row)
#+END_SRC

使用类方式读取 csv 文件

#+BEGIN_SRC python :preamble "# -*- coding: utf-8 -*-" :exports both :session default :results output pp
  with open('names.csv') as csvfile:
    reader = csv.DictReader(csvfile)
    for row in reader:
      print(row['first_name'], row['last_name'])
#+END_SRC

** 写入 csv 文件

使用函数方式写入 csv 文件

#+BEGIN_SRC python :preamble "# -*- coding: utf-8 -*-" :exports both :session default :results output pp
  with open('eggs.csv', 'wb') as csvfile:
    spamwriter = csv.writer(csvfile, delimiter=' ', quotechar='|', quoting=csv.QUOTE_MINIMAL)
    spamwriter.writerow(['Spam'] * 5 + ['Baked Beans'])
    spamwriter.writerow(['Spam', 'Lovely Spam', 'Wonderful Spam'])
#+END_SRC

使用类方式写入 csv 文件

#+BEGIN_SRC python :preamble "# -*- coding: utf-8 -*-" :exports both :session default :results output pp
  with open('names.csv', 'w') as csvfile:
    fieldnames = ['first_name', 'last_name']
    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
    writer.writeheader()
    writer.writerow({'first_name': 'Baked', 'last_name': 'Beans'})
    writer.writerow({'first_name': 'Lovely', 'last_name': 'Spam'})
    writer.writerow({'first_name': 'Wonderful', 'last_name': 'Spam'})
#+END_SRC

** 使用 csv 读写文件的例子

#+BEGIN_SRC python :preamble "# -*- coding: utf-8 -*-" :exports both :session default :results output pp
  import csv, codecs, cStringIO

  class UTF8Recoder:
    """
    Iterator that reads an encoded stream and reencodes the input to UTF-8
    """
    def __init__(self, f, encoding):
      self.reader = codecs.getreader(encoding)(f)

    def __iter__(self):
      return self

    def next(self):
      return self.reader.next().encode("utf-8")

  class UnicodeReader:
    """
    A CSV reader which will iterate over lines in the CSV file "f",
    which is encoded in the given encoding.
    """

    def __init__(self, f, dialect=csv.excel, encoding="utf-8", **kwds):
      f = UTF8Recoder(f, encoding)
      self.reader = csv.reader(f, dialect=dialect, **kwds)

    def next(self):
      row = self.reader.next()
      return [unicode(s, "utf-8") for s in row]

    def __iter__(self):
      return self

  class UnicodeWriter:
    """
    A CSV writer which will write rows to CSV file "f",
    which is encoded in the given encoding.
    """

    def __init__(self, f, dialect=csv.excel, encoding="utf-8", **kwds):
      # Redirect output to a queue
      self.queue = cStringIO.StringIO()
      self.writer = csv.writer(self.queue, dialect=dialect, **kwds)
      self.stream = f
      self.encoder = codecs.getincrementalencoder(encoding)()

    def writerow(self, row):
      self.writer.writerow([s.encode("utf-8") for s in row])
      # Fetch UTF-8 output from the queue ...
      data = self.queue.getvalue()
      data = data.decode("utf-8")
      # ... and reencode it into the target encoding
      data = self.encoder.encode(data)
      # write to the target stream
      self.stream.write(data)
      # empty queue
      self.queue.truncate(0)

    def writerows(self, rows):
      for row in rows:
        self.writerow(row)
#+END_SRC


* 参考链接

1. [[https://xlrd.readthedocs.io/en/latest/][xlrd]]
2. [[https://xlwt.readthedocs.io/en/latest/][xlwt]]
3. [[https://pyexcel.readthedocs.io/en/latest/][pyexcel]]
4. [[https://docs.python.org/3/library/csv.html][csv]]
