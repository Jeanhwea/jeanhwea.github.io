#+TITLE: 构建 Linux 内核运行项目
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2023-10-12 Thu 19:20:27>
#+STARTUP: overview num indent
#+HTML_LINK_UP: ../readme.html
#+HTML_LINK_HOME: ../index.html
#+SETUPFILE: ~/.emacs.d/site-lisp/org-html-themes/setup/theme-readtheorg-local.setup


* 下载内核源代码
配置编译环境
#+BEGIN_SRC sh
  export ARCH=x86
  make x86_64_defconfig
#+END_SRC

通过如下路径开启 ramdisk 选项
#+BEGIN_SRC sh
  make menuconfig
#+END_SRC
#+BEGIN_EXAMPLE
General setup  --->
       ----> [*] Initial RAM filesystem and RAM disk (initramfs/initrd) support
    Device Drivers  --->
       [*] Block devices  --->
               <*>   RAM block device support
               (65536) Default RAM disk size (kbytes)
#+END_EXAMPLE

编译内核
#+BEGIN_SRC sh
make
#+END_SRC

编译成功结果位于 arch/x86_64/boot/bzImage

* 编译 busybox 工具
下载 busybox 源码

开启静态链接编译选项
#+BEGIN_SRC sh
  make menuconfig
#+END_SRC
#+BEGIN_EXAMPLE
Busybox Settings  --->
      Build Options  --->
            [*] Build BusyBox as a static binary (no shared libs)
#+END_EXAMPLE

编译并安装
#+BEGIN_SRC sh
  make && make install
#+END_SRC

busybox 编译后的一下配置
#+BEGIN_EXAMPLE
  # mkdir etc dev mnt
  # mkdir -p proc sys tmp mnt
  # mkdir -p etc/init.d/
  # vim etc/fstab
  proc  /proc     proc    defaults        0       0
  tmpfs /tmp      tmpfs   defaults        0       0
  sysfs /sys      sysfs   defaults        0       0
  # vim etc/init.d/rcS
  echo -e "Welcome to tinyLinux"
  /bin/mount -a
  echo -e "Remounting the root filesystem"
  mount -o remount,rw /
  mkdir -p /dev/pts
  mount -t devpts devpts /dev/pts
  echo /sbin/mdev > /proc/sys/kernel/hotplug
  mdev -s
  # chmod 755 etc/init.d/rcS
  # vim etc/inittab
  ::sysinit:/etc/init.d/rcS
  ::respawn:-/bin/sh
  ::askfirst:-/bin/sh
  ::ctrlaltdel:/bin/umount -a -r
  # chmod 755 etc/inittab
  # cd dev
  # mknod console c 5 1
  # mknod null c 1 3
  # mknod tty1 c 4 1
#+END_EXAMPLE

* 构建根文件系统
构建思路
1. 先制作一个空的镜像文件；
2. 然后把此镜像文件格式化为 ext3 格式；
3. 然后把此镜像文件挂载，并把根文件系统复制到挂载目录；
4. 卸载该镜像文件。
5. 打成 gzip 包

#+BEGIN_SRC sh
  #!/bin/bash
  rm -rf rootfs.ext3
  rm -rf fs
  dd if=/dev/zero of=./rootfs.ext3 bs=1M count=32
  mkfs.ext3 rootfs.ext3
  mkdir fs
  mount -o loop rootfs.ext3 ./fs
  cp -rf ./_install/* ./fs
  umount ./fs
  gzip --best -c rootfs.ext3 > rootfs.img.gz
#+END_SRC

* qemu 启动
通过 qemu 启动
#+BEGIN_SRC sh
  qemu-system-x86_64 \
    -kernel ./linux-4.9.229/arch/x86_64/boot/bzImage  \
    -initrd ./busybox-1.30.0/rootfs.img.gz   \
    -append "root=/dev/ram init=/linuxrc"  \
    -serial file:output.txt
#+END_SRC
