#+TITLE: RESTful API 设计实践
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2018-10-10 Wed>
#+TAGS: API RESTful web


RESTful (REpresentational State Transfer) 是目前最流行的 API 设计规范，用于 Web
数据接口的设计。

* URL 设计

** 1.1 核心思想

RESTful 的核心思想就是，客户端发出的数据操作指令都是 *动词+宾语* 的结构。比如，
GET /articles 这个命令，GET 是动词， /articles 是宾语。动词通常就是五种 HTTP方法，
对应 CRUD 操作。

- GET：读取（Read）
- POST：新建（Create）
- PUT：更新（Update）
- PATCH：更新（Update），通常是部分更新
- DELETE：删除（Delete）

** 1.2 动词覆盖

有些客户端只能使用 GET 和 POST 这两种 HTTP 方法。这些必要的时候可以使用 POST动词
来覆盖其它三种方法。例如，X-HTTP-Method-Override 指定本次请求的方法是 PUT，而不
是 POST。

#+BEGIN_EXAMPLE
  POST /api/article/4 HTTP/1.1
  X-HTTP-Method-Override: PUT
#+END_EXAMPLE

** 1.3 宾语词性

宾语就是 API 的 URL，是 HTTP 动词作用的对象， *宾语必须名词* 。比如，/articles
这个 URL 就是正确的，而下面的 URL 不是名词，所以都是错误的。
   
#+BEGIN_EXAMPLE
  /getAllArticles
  /createNewArticle
  /deleteAllYesterdayArticles
#+END_EXAMPLE

** 1.4 复数 URL

URL 作为宾语的单复数形式没有统一的规定。常见的操作是读取一个集合用的是复数。

#+BEGIN_EXAMPLE
  GET /articles
#+END_EXAMPLE

操作单个元素使用单数形式。

#+BEGIN_EXAMPLE
  GET /articles/2
#+END_EXAMPLE

** 1.5 避免多级嵌套

常见的情况是，资源需要多级分类，因此很容易写出多级的 URL，比如获取某个作者的某一
类文章。

#+BEGIN_EXAMPLE
  GET /authors/12/categories/2
#+END_EXAMPLE

这种 URL 不利于扩展，语义也不明确，往往要想一会，才能明白含义。更好的做法是，除
了第一级，其他级别都用查询字符串表达。

#+BEGIN_EXAMPLE
  GET /authors/12?categories=2
#+END_EXAMPLE

下面是另一个例子，查询已发布的文章。你可能会设计成下面的 URL。

#+BEGIN_EXAMPLE
  GET /articles/published
#+END_EXAMPLE

查询字符串的写法明显更好。

#+BEGIN_EXAMPLE
  GET /articles?published=true
#+END_EXAMPLE

总结出来一句话， *使用分类查询最好是用参数的方式来修饰* 。


* 状态码

** 2.1 状态码必须精确

客户端的每一次请求，服务器都必须给出回应。回应包括 HTTP 状态码和数据两部分。HTTP
状态码就是一个三位数，分成五个类别。

| 状态码 | 含义       |
|--------+------------|
|    1xx | 相关信息   |
|    2xx | 操作成功   |
|    3xx | 重定向     |
|    4xx | 客户端错误 |
|    5xx | 服务器错误 |

** 2.2 2xx 状态码

200 状态码表示操作成功，但是不同的方法可以返回更精确的状态码。

- GET: 200 OK
- POST: 201 Created
- PUT: 200 OK
- PATCH: 200 OK
- DELETE: 204 No Content

上面代码中，POST返回201状态码，表示生成了新的资源；DELETE返回204状态码，表示资源
已经不存在。此外，202 Accepted状态码表示服务器已经收到请求，但还未进行处理，会在
未来再处理，通常用于异步操作。下面是一个例子。

#+BEGIN_EXAMPLE
  HTTP/1.1 202 Accepted
  {
      "task": {
          "href": "/api/company/job-management/jobs/2130040",
          "id": "2130040"
      }
  }
#+END_EXAMPLE

** 2.3 3xx 状态码

API 用不到301状态码（永久重定向）和302状态码（暂时重定向，307也是这个含义），因
为它们可以由应用级别返回，浏览器会直接跳转，API 级别可以不考虑这两种情况。API 用
到的3xx状态码，主要是 303 See Other，表示参考另一个 URL。它与302和307的含义一样，
也是"暂时重定向"，区别在于302和307用于GET请求，而303用于POST、PUT和DELETE请求。
收到303以后，浏览器不会自动跳转，而会让用户自己决定下一步怎么办。下面是一个例子。

#+BEGIN_EXAMPLE
  HTTP/1.1 303 See Other
  Location: /api/articles/12345
#+END_EXAMPLE

** 2.4 4xx 状态码

4xx状态码表示客户端错误，主要有下面几种。

| 状态码 | 含义                   | 解释                                                                                    |
|--------+------------------------+-----------------------------------------------------------------------------------------|
|    400 | Bad Request            | 服务器不理解客户端的请求，未做任何处理。                                                |
|    401 | Unauthorized           | 用户未提供身份验证凭据，或者没有通过身份验证。                                          |
|    403 | Forbidden              | 用户通过了身份验证，但是不具有访问资源所需的权限。                                      |
|    404 | Not Found              | 所请求的资源不存在，或不可用。                                                          |
|    405 | Method Not Allowed     | 用户已经通过身份验证，但是所用的 HTTP 方法不在他的权限之内。                            |
|    410 | Gone                   | 所请求的资源已从这个地址转移，不再可用。                                                |
|    415 | Unsupported Media Type | 客户端要求的返回格式不支持。比如，API 只能返回 JSON 格式，但是客户端要求返回 XML 格式。 |
|    422 | Unprocessable Entity   | 客户端上传的附件无法处理，导致请求失败。                                                |
|    429 | Too Many Requests      | 客户端的请求次数超过限额。                                                              |

** 2.5 5xx 状态码

5xx状态码表示服务端错误。一般来说，API 不会向用户透露服务器的详细信息，所以只要
两个状态码就够了。

| 状态码 | 含义                  | 解释                                       |
|--------+-----------------------+--------------------------------------------|
|    500 | Internal Server Error | 客户端请求有效，服务器处理时发生了意外。   |
|    503 | Service Unavailable   | 服务器无法处理请求，一般用于网站维护状态。 |


* 服务器回应

** 3.1 不要返回纯本文

API 返回的数据格式，不应该是纯文本，而应该是一个 JSON 对象，因为这样才能返回标准
的结构化数据。所以，服务器回应的 HTTP 头的 Content-Type 属性要设为
application/json 。客户端请求时，也要明确告诉服务器，可以接受 JSON 格式，即请求
的 HTTP 头的 ACCEPT 属性也要设成 application/json 。下面是一个例子。

#+BEGIN_EXAMPLE
  GET /article/2 HTTP/1.1
  Accept: application/json
#+END_EXAMPLE

** 3.2 发生错误时，不要返回 200 状态码

有一种不恰当的做法是，即使发生错误，也返回200状态码，把错误信息放在数据体里面，
就像下面这样。

#+BEGIN_EXAMPLE
  HTTP/1.1 200 OK
  Content-Type: application/json
  {
      "status": "failure",
      "data": {
          "error": "Expected at least two items in list."
      }
  }
#+END_EXAMPLE

上面代码中，解析数据体以后，才能得知操作失败。这张做法实际上取消了状态码，这是完
全不可取的。正确的做法是，状态码反映发生的错误，具体的错误信息放在数据体里面返回。
下面是一个例子。

#+BEGIN_EXAMPLE
  HTTP/1.1 400 Bad Request
  Content-Type: application/json
  {
      "error": "Invalid payoad.",
      "detail": {
          "surname": "This field is required."
      }
  }
#+END_EXAMPLE

** 3.3 提供链接

API 的使用者未必知道，URL 是怎么设计的。一个解决方法就是，在回应中，给出相关链接，
便于下一步操作。这样的话，用户只要记住一个 URL，就可以发现其他的 URL。这种方法叫
做 HATEOAS。举例来说，GitHub 的 API 都在 *https://api.github.com/* 这个域名。访
问它，就可以得到其他 URL。

#+BEGIN_SRC text
  {
      "current_user_url": "https://api.github.com/user",
      "current_user_authorizations_html_url": "https://github.com/settings/connections/applications{/client_id}",
      "authorizations_url": "https://api.github.com/authorizations",
      "code_search_url": "https://api.github.com/search/code?q={query}{&page,per_page,sort,order}",
      "commit_search_url": "https://api.github.com/search/commits?q={query}{&page,per_page,sort,order}",
      "emails_url": "https://api.github.com/user/emails",
      "emojis_url": "https://api.github.com/emojis",
      "events_url": "https://api.github.com/events",
      "feeds_url": "https://api.github.com/feeds",
      "followers_url": "https://api.github.com/user/followers",
      "following_url": "https://api.github.com/user/following{/target}",
      "gists_url": "https://api.github.com/gists{/gist_id}",
      "hub_url": "https://api.github.com/hub",
      "issue_search_url": "https://api.github.com/search/issues?q={query}{&page,per_page,sort,order}",
      "issues_url": "https://api.github.com/issues",
      "keys_url": "https://api.github.com/user/keys",
      "notifications_url": "https://api.github.com/notifications",
      "organization_repositories_url": "https://api.github.com/orgs/{org}/repos{?type,page,per_page,sort}",
      "organization_url": "https://api.github.com/orgs/{org}",
      "public_gists_url": "https://api.github.com/gists/public",
      "rate_limit_url": "https://api.github.com/rate_limit",
      "repository_url": "https://api.github.com/repos/{owner}/{repo}",
      "repository_search_url": "https://api.github.com/search/repositories?q={query}{&page,per_page,sort,order}",
      "current_user_repositories_url": "https://api.github.com/user/repos{?type,page,per_page,sort}",
      "starred_url": "https://api.github.com/user/starred{/owner}{/repo}",
      "starred_gists_url": "https://api.github.com/gists/starred",
      "team_url": "https://api.github.com/teams",
      "user_url": "https://api.github.com/users/{user}",
      "user_organizations_url": "https://api.github.com/user/orgs",
      "user_repositories_url": "https://api.github.com/users/{user}/repos{?type,page,per_page,sort}",
      "user_search_url": "https://api.github.com/search/users?q={query}{&page,per_page,sort,order}"
  }
#+END_SRC

上面的回应中，挑一个 URL 访问，又可以得到别的 URL。对于用户来说，不需要记住 URL
设计，只要从 api.github.com 一步步查找就可以了。HATEOAS 的格式没有统一规定，上面
例子中，GitHub 将它们与其他属性放在一起。更好的做法应该是，将相关链接与其他属性
分开。

#+BEGIN_EXAMPLE
  HTTP/1.1 200 OK
  Content-Type: application/json
  {
      "status": "In progress",
      "links": {[
      { "rel":"cancel", "method": "delete", "href":"/api/status/12345" } ,
      { "rel":"edit", "method": "put", "href":"/api/status/12345" }
      ]}
  }
#+END_EXAMPLE


* 参考链接

1. [[https://blog.florimondmanca.com/restful-api-design-13-best-practices-to-make-your-users-happy][RESTful API Design: 13 Best Practices to Make Your Users Happy]], by Florimond Manca
2. [[https://docs.microsoft.com/en-us/azure/architecture/best-practices/api-design][API design]], by MicroSoft Azure
3. [[http://www.ruanyifeng.com/blog/2018/10/restful-api-best-practices.html][RESTful API 最佳实践]]，by 阮一峰
