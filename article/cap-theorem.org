#+TITLE: CAP 定理
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2021-07-25 Sun 17:10:45>
#+HTML_LINK_UP: ../readme.html
#+HTML_LINK_HOME: ../index.html
#+SETUPFILE: ~/.emacs.d/site-lisp/org-html-themes/setup/theme-readtheorg-local.setup
#+TAGS: CAP Scalability


* CAP 定理
  CAP 定理说明在分布式场景中经常遇到的问题，其中 CAP 指分布式系统的三个特性
  1. C (Consistency) 一致性, 指在任何时候，集群中的节点获取到的状态都是一样的
  2. A (Availability) 可用性, 指集群中没有宕机的的节点都能正常服务
  3. P (Partition Tolerance) 分区容错性, 指集群因网络故障或节点故障问题，别切割
     成两个（或以上）的不完整的子集群，系统整体能正常运作
  针对于上面说的三个特性， CAP 定理的内涵就是说在分布式集群中只能保证两个特性的
  存在

* Partition Tolerance
  假如两台节点在不同机器上，如果存入资料的方式是 2PC (Two-Phase Commit), 即所有
  节点统一才能提交数据，那么只要 Partition 发生，即任何一个节点宕机，整个系统就
  不能运作，可以想象这样的系统实在是太脆弱了，所以一般分布式系统需要保证 P

* Availability & Consistency
  如果保证 P, 那么系统可以容忍 Partition, 根据 CAP 定理需要牺牲 A 或者 C
  1. 保证 A 的情形: 两个节点虽然彼此不能沟通，但是既然或者就让他们正常服务，这样
     其中一半的变化不能传递到另一边，因此可能两边的数据会出现不一致。更糟糕的状
     况是会发生 =脑裂=, 就是 master 中写入数据，slave 允许写数据出现时序不一致问
     题
  2. 保证 P 的情形: 为了避免之前的不一致问题，因此必须停掉其中任一个节点

* 数据产品的分类
  1. CA: 关系型数据库 RDBMS
     - Oracle
     - MySQL
     - Postgresql
  2. CP: 非关系型数据库和一些中间件
     - MongoDB
     - HBase
     - Redis
     - ZooKeeper (偏向于 CP 的设计)
  3. AP: Cassandra, CouchDB, DynamoDB, Riak
     - Cassandra 不保证一致性，高度容错

* CAP 定理延伸: ZK
** ZK 的 Metadata
   ZK 是维持 cluster 中共同状态的分布式系统，
   1. ZK 主要维护了一些 Metadata, 用于降低大量更新时同步数据的开销
   2. ZK 有自己的 HA 和 Consistency 机制，在 production 环境下只需要维护 ~2n+1~
      的 node 的数据即可保证数据的一致性

** ZK 的几个常见用法
   1. 共享 Metadata
   2. 监控成员节点的状况 & 维护集群的成员名单
   3. 协助集群选集 leader (master)
