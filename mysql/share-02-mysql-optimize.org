#+TITLE: MySQL优化器实现原理探索
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2023-02-22 Wed 11:36:43>
#+HTML_LINK_UP: ../readme.html
#+HTML_LINK_HOME: ../index.html
#+SETUPFILE: ~/.emacs.d/site-lisp/org-html-themes/setup/theme-readtheorg-local.setup
#+PROPERTY: header-args:sql :dbhost 127.0.0.1 :database world :engine mysql :dbuser root :exports both
#+STARTUP: indent cache num inlineimages


* 引言 MySQL Architecture
参考 [[https://dev.mysql.com/doc/dev/mysql-server/8.0.30/PAGE_SQL_EXECUTION.html][执行流程]]

[[file:../static/image/2023/0222/193853.png]]

#+BEGIN_EXAMPLE
  T@8: | | | >lex_start => 词法解析
  T@8: | | | | >LEX::new_top_level_query
  T@8: | | | | | >*LEX::new_query
  T@8: | | | | | | outer_field: creating ctx 0x11e0139e0
  T@8: | | | | | | outer_field: ctx 0x11e0139e0 <-> SL# 1
  T@8: | | | | | <*LEX::new_query
  T@8: | | | | <LEX::new_top_level_query
  T@8: | | | <lex_start

  T@8: | | | >parse_sql => 语法解析
  T@8: | | | | >*Query_block::add_table_to_list
  T@8: | | | | | >*MEM_ROOT::AllocSlow
  T@8: | | | | | | enter: root: 0x11d80ca40
  T@8: | | | | | | >*MEM_ROOT::AllocBlock
  T@8: | | | | | | | >char *PFS_instr_name::str
  T@8: | | | | | | | <char *PFS_instr_name::str
  T@8: | | | | | | <*MEM_ROOT::AllocBlock
  T@8: | | | | | <*MEM_ROOT::AllocSlow
  T@8: | | | | <*Query_block::add_table_to_list
  T@8: | | | | >Query_block::add_joined_table
  T@8: | | | | <Query_block::add_joined_table
  T@8: | | | <parse_sql

  T@8: | | | >mysql_execute_command
  T@8: | | | | >Diagnostics_area::reset_diagnostics_area

  T@8: | | | | >open_temporary_tables
  T@8: | | | | | >open_temporary_table
  T@8: | | | | | | enter: table: 'employees'.'dept_manager'
  T@8: | | | | | <open_temporary_table
  T@8: | | | | <open_temporary_tables
  T@8: | | | | >bool Sql_cmd_dml::execute => DML 执行方法
  T@8: | | | | | >bool Sql_cmd_dml::prepare
  T@8: | | | | | | >check_table_access
  T@8: | | | | | | | info: table: dept_manager derived: 0  view: 0
  T@8: | | | | | | | >check_access
  T@8: | | | | | | | | enter: db: employees  want_access: 1  master_access: 2147483647
  T@8: | | | | | | | | THD::enter_stage: 'checking permissions' /Users/bytedance/code/jeanhwea/mysql-server/sql/auth/sql_authorization.cc:2147

  T@8: | | | | | >Query_expression::optimize => 优化器
  T@8: | | | | | | >Query_block::optimize
  T@8: | | | | | | | >JOIN::optimize
  T@8: | | | | | | | | THD::enter_stage: 'optimizing' /Users/bytedance/code/jeanhwea/mysql-server/sql/sql_optimizer.cc:296

  T@8: | | | | | | | | | opt: (null): ending struct
  T@8: | | | | | | | | | opt: rows_estimation: ending struct
  T@8: | | | | | | | | | opt: (null): ending struct
  T@8: | | | | | | | | | >Optimize_table_order::choose_table_order
  T@8: | | | | | | | | | | >Query_block::reset_nj_counters
  T@8: | | | | | | | | | | <Query_block::reset_nj_counters
  T@8: | | | | | | | | | | opt: (null): starting struct
  T@8: | | | | | | | | | | opt: considered_execution_plans: starting struct
  T@8: | | | | | | | | | | >Optimize_table_order::greedy_search
  T@8: | | | | | | | | | | | >Optimize_table_order::best_extension_by_limited_search

  T@8: | | | | | | | | | | | | <Optimize_table_order::best_access_path
  T@8: | | | | | | | | | | | | opt: condition_filtering_pct: 100
  T@8: | | | | | | | | | | | | opt: rows_for_plan: 24
  T@8: | | | | | | | | | | | | opt: cost_for_plan: 3.4
  T@8: | | | | | | | | | | | | opt: sort_cost: 24
  T@8: | | | | | | | | | | | | opt: new_cost_for_plan: 27.4
  T@8: | | | | | | | | | | | | opt: chosen: 1
  T@8: | | | | | | | | | | | | opt: (null): ending struct
  T@8: | | | | | | | | | | | <Optimize_table_order::best_extension_by_limited_search
  T@8: | | | | | | | | | | <Optimize_table_order::greedy_search

  T@8: | | | | | | | <JOIN::optimize
  T@8: | | | | | | <Query_block::optimize
  T@8: | | | | | <Query_expression::optimize
  T@8: | | | | | >Query_expression::execute => 执行 SQL
  T@8: | | | | | | THD::enter_stage: 'executing' /Users/bytedance/code/jeanhwea/mysql-server/sql/sql_union.cc:1186
  T@8: | | | | | | >PROFILING::status_change
  T@8: | | | | | | <PROFILING::status_change
  T@8: | | | | | | opt: (null): starting struct
  T@8: | | | | | | opt: join_execution: starting struct
  T@8: | | | | | | opt: select#: 1
  T@8: | | | | | | opt: steps: starting struct
  T@8: | | | | | | >THD::send_result_metadata
  T@8: | | | | | | | >bool Protocol_classic::start_result_metadata
  T@8: | | | | | | | | info: num_cols 2, flags 5
  T@8: | | | | | | | | net write: Memory: 0x17131d03f  Bytes: (1)

  T@8: | | <dispatch_sql_command
  T@8: | | info: query ready
  T@8: | | >THD::send_statement_status
  T@8: | | | >bool Protocol_classic::send_eof
  T@8: | | | | >net_send_ok
  T@8: | | | | | info: affected_rows: 0  id: 0  status: 2  warning_count: 0
  T@8: | | | | | net write: Memory: 0x17132032e  Bytes: (7)
  T@8: | | | | | >vio_is_blocking
  T@8: | | | | | <vio_is_blocking
#+END_EXAMPLE

* 工具 Explain vs Optimize Trace
** Explain
Explain 可以看出简要的执行计划

#+BEGIN_SRC sql :results output :exports both
  explain format=json select emp_no from employees where emp_no < 11111\G
#+END_SRC

#+begin_example
,*************************** 1. row ***************************
EXPLAIN: {
  "query_block": {
    "select_id": 1,
    "cost_info": {
      "query_cost": "224.08" // => cost值
    },
    "table": {
      "table_name": "employees",
      "access_type": "range", // 范围扫描
      "possible_keys": [
        "PRIMARY"
      ],
      "key": "PRIMARY", // 命中主键
      "used_key_parts": [
        "emp_no"
      ],
      "key_length": "4",
      "rows_examined_per_scan": 1110, // 需要扫描 1110 行数据
      "rows_produced_per_join": 1110,
      "filtered": "100.00",
      "using_index": true,
      "cost_info": {
        "read_cost": "113.08",
        "eval_cost": "111.00",
        "prefix_cost": "224.08",
        "data_read_per_join": "147K"
      },
      "used_columns": [
        "emp_no"
      ],
      "attached_condition": "(`employees`.`employees`.`emp_no` < 11111)"
    }
  }
}
#+end_example

** Optimize Trace
Optimize Trace 工具使用步骤
#+BEGIN_SRC sql :results output
  # 开启 trace
  set optimizer_trace="enabled=on";

  # 执行 Query
  select emp_no from employees where emp_no < 11111;

  # Trace 日志表结构
  mysql> desc information_schema.optimizer_trace;
  +-----------------------------------+----------------+------+-----+---------+-------+
  | Field                             | Type           | Null | Key | Default | Extra |
  +-----------------------------------+----------------+------+-----+---------+-------+
  | QUERY                             | varchar(65535) | NO   |     |         |       |
  | TRACE                             | varchar(65535) | NO   |     |         |       |
  | MISSING_BYTES_BEYOND_MAX_MEM_SIZE | int            | NO   |     |         |       |
  | INSUFFICIENT_PRIVILEGES           | tinyint(1)     | NO   |     |         |       |
  +-----------------------------------+----------------+------+-----+---------+-------+
  4 rows in set (0.03 sec)

  # 查看结果
  select * from information_schema.optimizer_trace\G
  select trace from information_schema.optimizer_trace\G
#+END_SRC

#+BEGIN_EXAMPLE
  QUERY: select emp_no from employees where emp_no < 11111
  TRACE: {
    "steps": [
      {
        "join_preparation": {
          "select#": 1,
          "steps": [
            {
              "expanded_query": "/* select#1 */ select `employees`.`emp_no` AS `emp_no` from `employees` where (`employees`.`emp_no` < 11111)"
            }
          ]
        }
      },
      {
        "join_optimization": {
          "select#": 1,
          "steps": [
            {
              "condition_processing": {
                "condition": "WHERE",
                "original_condition": "(`employees`.`emp_no` < 11111)",
                "steps": [
                  {
                    "transformation": "equality_propagation",
                    "resulting_condition": "(`employees`.`emp_no` < 11111)"
                  },
                  {
                    "transformation": "constant_propagation",
                    "resulting_condition": "(`employees`.`emp_no` < 11111)"
                  },
                  {
                    "transformation": "trivial_condition_removal",
                    "resulting_condition": "(`employees`.`emp_no` < 11111)"
                  }
                ]
              }
            },
            {
              "substitute_generated_columns": {
              }
            },
            {
              "table_dependencies": [
                {
                  "table": "`employees`",
                  "row_may_be_null": false,
                  "map_bit": 0,
                  "depends_on_map_bits": [
                  ]
                }
              ]
            },
            {
              "ref_optimizer_key_uses": [
              ]
            },
            {
              "rows_estimation": [
                {
                  "table": "`employees`",
                  "range_analysis": {
                    "table_scan": {
                      "rows": 299556,
                      "cost": 30874.9
                    },
                    "potential_range_indexes": [
                      {
                        "index": "PRIMARY",
                        "usable": true,
                        "key_parts": [
                          "emp_no"
                        ]
                      }
                    ],
                    "best_covering_index_scan": {
                      "index": "PRIMARY",
                      "cost": 30245.1,
                      "chosen": true
                    },
                    "setup_range_conditions": [
                    ],
                    "group_index_range": {
                      "chosen": false,
                      "cause": "not_group_by_or_distinct"
                    },
                    "skip_scan_range": {
                      "potential_skip_scan_indexes": [
                        {
                          "index": "PRIMARY",
                          "usable": false,
                          "cause": "prefix_not_const_equality"
                        }
                      ]
                    },
                    "analyzing_range_alternatives": { => 范围扫描分析参数
                      "range_scan_alternatives": [
                        {
                          "index": "PRIMARY",
                          "ranges": [
                            "emp_no < 11111"
                          ],
                          "index_dives_for_eq_ranges": true,
                          "rowid_ordered": true,
                          "using_mrr": false,
                          "index_only": true,
                          "in_memory": 0.01693,
                          "rows": 1110,
                          "cost": 113.084,
                          "chosen": true
                        }
                      ],
                      "analyzing_roworder_intersect": {
                        "usable": false,
                        "cause": "too_few_roworder_scans"
                      }
                    },
                    "chosen_range_access_summary": {
                      "range_access_plan": {
                        "type": "range_scan",
                        "index": "PRIMARY",
                        "rows": 1110,
                        "ranges": [
                          "emp_no < 11111"
                        ]
                      },
                      "rows_for_plan": 1110,
                      "cost_for_plan": 113.084,
                      "chosen": true
                    }
                  }
                }
              ]
            },
            {
              "considered_execution_plans": [
                {
                  "plan_prefix": [
                  ],
                  "table": "`employees`",
                  "best_access_path": {
                    "considered_access_paths": [
                      {
                        "rows_to_scan": 1110,
                        "access_type": "range",
                        "range_details": {
                          "used_index": "PRIMARY"
                        },
                        "resulting_rows": 1110,
                        "cost": 224.084,
                        "chosen": true
                      }
                    ]
                  },
                  "condition_filtering_pct": 100,
                  "rows_for_plan": 1110,
                  "cost_for_plan": 224.084,
                  "chosen": true
                }
              ]
            },
            {
              "attaching_conditions_to_tables": {
                "original_condition": "(`employees`.`emp_no` < 11111)",
                "attached_conditions_computation": [
                ],
                "attached_conditions_summary": [
                  {
                    "table": "`employees`",
                    "attached": "(`employees`.`emp_no` < 11111)"
                  }
                ]
              }
            },
            {
              "finalizing_table_conditions": [
                {
                  "table": "`employees`",
                  "original_table_condition": "(`employees`.`emp_no` < 11111)",
                  "final_table_condition   ": "(`employees`.`emp_no` < 11111)"
                }
              ]
            },
            {
              "refine_plan": [
                {
                  "table": "`employees`"
                }
              ]
            }
          ]
        }
      },
      {
        "join_execution": {
          "select#": 1,
          "steps": [
          ]
        }
      }
    ]
  }
  MISSING_BYTES_BEYOND_MAX_MEM_SIZE: 0
            INSUFFICIENT_PRIVILEGES: 0
  1 row in set (0.01 sec)
#+END_EXAMPLE

* 主题 Topics
** Logical Transformations
*** 前置说明
Transformation 可以理解对输入的 Query 字符串进行转化，我们以例子进行分析
#+BEGIN_SRC sql
  select * from country where population > 5000000 and continent = 'Asia' and 1 = 1;
#+END_SRC

Trace 的日志的结果
#+BEGIN_SRC json
  {
    "steps": [
      {
        "join_preparation": {
          "select#": 1,
          "steps": [
            {
              "expanded_query": "/* select#1 */ select `country`.`Code` AS `Code`,`country`.`Name` AS `Name`,`country`.`Continent` AS `Continent`,`country`.`Region` AS `Region`,`country`.`SurfaceArea` AS `SurfaceArea`,`country`.`IndepYear` AS `IndepYear`,`country`.`Population` AS `Population`,`country`.`LifeExpectancy` AS `LifeExpectancy`,`country`.`GNP` AS `GNP`,`country`.`GNPOld` AS `GNPOld`,`country`.`LocalName` AS `LocalName`,`country`.`GovernmentForm` AS `GovernmentForm`,`country`.`HeadOfState` AS `HeadOfState`,`country`.`Capital` AS `Capital`,`country`.`Code2` AS `Code2` from `country` where ((`country`.`Population` > 5000000) and (`country`.`Continent` = 'Asia'))"
            }
          ]
        }
      },
      {
        "join_optimization": {
          "select#": 1,
          "steps": [
            {
              "condition_processing": {
                "condition": "WHERE",
                "original_condition": "((`country`.`Population` > 5000000) and (`country`.`Continent` = 'Asia'))",
                "steps": [
                  {
                    "transformation": "equality_propagation",
                    "resulting_condition": "((`country`.`Population` > 5000000) and multiple equal('Asia', `country`.`Continent`))"
                  },
                  {
                    "transformation": "constant_propagation",
                    "resulting_condition": "((`country`.`Population` > 5000000) and multiple equal('Asia', `country`.`Continent`))"
                  },
                  {
                    "transformation": "trivial_condition_removal",
                    "resulting_condition": "((`country`.`Population` > 5000000) and multiple equal('Asia', `country`.`Continent`))"
                  }
                ]
              }
            },
            {
              "substitute_generated_columns": {
              }
            },
            {
              "table_dependencies": [
                {
                  "table": "`country`",
                  "row_may_be_null": false,
                  "map_bit": 0,
                  "depends_on_map_bits": [
                  ]
                }
              ]
            },
            {
              "ref_optimizer_key_uses": [
              ]
            },
            {
              "rows_estimation": [
                {
                  "table": "`country`",
                  "table_scan": {
                    "rows": 239,
                    "cost": 1.75
                  }
                }
              ]
            },
            {
              "considered_execution_plans": [
                {
                  "plan_prefix": [
                  ],
                  "table": "`country`",
                  "best_access_path": {
                    "considered_access_paths": [
                      {
                        "rows_to_scan": 239,
                        "access_type": "scan",
                        "resulting_rows": 239,
                        "cost": 25.65,
                        "chosen": true
                      }
                    ]
                  },
                  "condition_filtering_pct": 100,
                  "rows_for_plan": 239,
                  "cost_for_plan": 25.65,
                  "chosen": true
                }
              ]
            },
            {
              "attaching_conditions_to_tables": {
                "original_condition": "((`country`.`Continent` = 'Asia') and (`country`.`Population` > 5000000))",
                "attached_conditions_computation": [
                ],
                "attached_conditions_summary": [
                  {
                    "table": "`country`",
                    "attached": "((`country`.`Continent` = 'Asia') and (`country`.`Population` > 5000000))"
                  }
                ]
              }
            },
            {
              "finalizing_table_conditions": [
                {
                  "table": "`country`",
                  "original_table_condition": "((`country`.`Continent` = 'Asia') and (`country`.`Population` > 5000000))",
                  "final_table_condition   ": "((`country`.`Continent` = 'Asia') and (`country`.`Population` > 5000000))"
                }
              ]
            },
            {
              "refine_plan": [
                {
                  "table": "`country`"
                }
              ]
            }
          ]
        }
      },
      {
        "join_execution": {
          "select#": 1,
          "steps": [
          ]
        }
      }
    ]
  }
#+END_SRC

这三次的转换分别是
  - equality_propagation 等值条件句转换
  - constant_propagation 常量条件句转换
  - trivial_condition_removal 无效条件移除的转换，该例子将 ~1 = 1~ 永真表达式剔除了
#+BEGIN_SRC json
  "steps": [
    {
      "transformation": "equality_propagation",
      "resulting_condition": "((`country`.`Population` > 5000000) and multiple equal('Asia', `country`.`Continent`))"
    },
    {
      "transformation": "constant_propagation",
      "resulting_condition": "((`country`.`Population` > 5000000) and multiple equal('Asia', `country`.`Continent`))"
    },
    {
      "transformation": "trivial_condition_removal",
      "resulting_condition": "((`country`.`Population` > 5000000) and multiple equal('Asia', `country`.`Continent`))"
    }
  ]
#+END_SRC

Transformation 过后生成的结果 expanded_query 如下
#+BEGIN_SRC sql
  /* select#1 */
  select
    `country`.`Code` as `Code`,
    `country`.`Name` as `Name`,
    `country`.`Continent` as `Continent`,
    `country`.`Region` as `Region`,
    `country`.`SurfaceArea` as `SurfaceArea`,
    `country`.`IndepYear` as `IndepYear`,
    `country`.`Population` as `Population`,
    `country`.`LifeExpectancy` as `LifeExpectancy`,
    `country`.`GNP` as `GNP`,
    `country`.`GNPOld` as `GNPOld`,
    `country`.`LocalName` as `LocalName`,
    `country`.`GovernmentForm` as `GovernmentForm`,
    `country`.`HeadOfState` as `HeadOfState`,
    `country`.`Capital` as `Capital`,
    `country`.`Code2` as `Code2`
  from
    `country`
  where ((`country`.`Population` > 5000000)
    and (`country`.`Continent` = 'Asia'))
#+END_SRC

*** 主键相关
#+BEGIN_SRC sql
  -- 命中主键
  select * from country where code = 'CAN';
  -- 未命中主键
  select * from country where code = 'XYZ';
#+END_SRC
[[file:../static/image/2023/0223/111928.png]]

*** 其它类型
永假式优化
#+BEGIN_SRC sql
  select * from country where code = 'CAN' and 1 = 0;
#+END_SRC

#+BEGIN_SRC sql
  /* select#1 */
  select
    `country`.`Code` as `Code`,
    `country`.`Name` as `Name`,
    `country`.`Continent` as `Continent`,
    `country`.`Region` as `Region`,
    `country`.`SurfaceArea` as `SurfaceArea`,
    `country`.`IndepYear` as `IndepYear`,
    `country`.`Population` as `Population`,
    `country`.`LifeExpectancy` as `LifeExpectancy`,
    `country`.`GNP` as `GNP`,
    `country`.`GNPOld` as `GNPOld`,
    `country`.`LocalName` as `LocalName`,
    `country`.`GovernmentForm` as `GovernmentForm`,
    `country`.`HeadOfState` as `HeadOfState`,
    `country`.`Capital` as `Capital`,
    `country`.`Code2` as `Code2`
  from
    `country`
  where
    false
#+END_SRC

嵌入式 join 的转化
#+BEGIN_SRC sql
  select
    city.*
  from
    city,
    (
      select
        ,*
      from
        country
      where
        continent = 'Asia') as country
  where
    country.code = City.countryCode
    and country.population > 5000000;
#+END_SRC

#+BEGIN_SRC json
  {
    "join_preparation": {
      "select#": 1,
      "steps": [
        {
          "join_preparation": {
            "select#": 2,
            "steps": [
              {
                "expanded_query": "/* select#2 */ select `country`.`Code` AS `Code`,`country`.`Name` AS `Name`,`country`.`Continent` AS `Continent`,`country`.`Region` AS `Region`,`country`.`SurfaceArea` AS `SurfaceArea`,`country`.`IndepYear` AS `IndepYear`,`country`.`Population` AS `Population`,`country`.`LifeExpectancy` AS `LifeExpectancy`,`country`.`GNP` AS `GNP`,`country`.`GNPOld` AS `GNPOld`,`country`.`LocalName` AS `LocalName`,`country`.`GovernmentForm` AS `GovernmentForm`,`country`.`HeadOfState` AS `HeadOfState`,`country`.`Capital` AS `Capital`,`country`.`Code2` AS `Code2` from `country` where (`country`.`Continent` = 'Asia')"
                // select
                //   `country`.`Code` as `Code`,
                //   `country`.`Name` as `Name`,
                //   `country`.`Continent` as `Continent`,
                //   `country`.`Region` as `Region`,
                //   `country`.`SurfaceArea` as `SurfaceArea`,
                //   `country`.`IndepYear` as `IndepYear`,
                //   `country`.`Population` as `Population`,
                //   `country`.`LifeExpectancy` as `LifeExpectancy`,
                //   `country`.`GNP` as `GNP`,
                //   `country`.`GNPOld` as `GNPOld`,
                //   `country`.`LocalName` as `LocalName`,
                //   `country`.`GovernmentForm` as `GovernmentForm`,
                //   `country`.`HeadOfState` as `HeadOfState`,
                //   `country`.`Capital` as `Capital`,
                //   `country`.`Code2` as `Code2`
                // from
                //   `country`
                // where (`country`.`Continent` = 'Asia')
              }
            ]
          }
        },
        {
          "derived": {
            "table": "`` `country`",
            "select#": 2,
            "merged": true
          }
        },
        {
          "expanded_query": "/* select#1 */ select `city`.`ID` AS `ID`,`city`.`Name` AS `Name`,`city`.`CountryCode` AS `CountryCode`,`city`.`District` AS `District`,`city`.`Population` AS `Population` from `city` join (`country`) on((`country`.`Continent` = 'Asia')) where ((`country`.`Code` = `city`.`CountryCode`) and (`country`.`Population` > 5000000))"
          // select
          //   `city`.`ID` as `ID`,
          //   `city`.`Name` as `Name`,
          //   `city`.`CountryCode` as `CountryCode`,
          //   `city`.`District` as `District`,
          //   `city`.`Population` as `Population`
          // from
          //   `city`
          //   join (`country`) on (`country`.`Continent` = 'Asia')
          // where ((`country`.`Code` = `city`.`CountryCode`)
          //   and (`country`.`Population` > 5000000))
        },
        {
          "transformations_to_nested_joins": {
            "transformations": [
              "JOIN_condition_to_WHERE",
              "parenthesis_removal"
            ],
            "expanded_query": "/* select#1 */ select `city`.`ID` AS `ID`,`city`.`Name` AS `Name`,`city`.`CountryCode` AS `CountryCode`,`city`.`District` AS `District`,`city`.`Population` AS `Population` from `city` join `country` where ((`country`.`Code` = `city`.`CountryCode`) and (`country`.`Population` > 5000000) and (`country`.`Continent` = 'Asia'))"
            // select
            //   `city`.`ID` as `ID`,
            //   `city`.`Name` as `Name`,
            //   `city`.`CountryCode` as `CountryCode`,
            //   `city`.`District` as `District`,
            //   `city`.`Population` as `Population`
            // from
            //   `city`
            //   join `country`
            // where ((`country`.`Code` = `city`.`CountryCode`)
            //   and (`country`.`Population` > 5000000)
            //   and (`country`.`Continent` = 'Asia'))
          }
        }
      ]
    }
  }
#+END_SRC

基于视图优化
#+BEGIN_SRC sql
  create view countries_in_asia as select * from country where continent = 'Asia';

  select * from countries_in_asia where population > 5000000;
#+END_SRC

#+BEGIN_SRC json
  {
    "join_preparation": {
      "select#": 1,
      "steps": [
        {
          "join_preparation": {
            "select#": 2,
            "steps": [
              {
                "expanded_query": "/* select#2 */ select `country`.`Code` AS `Code`,`country`.`Name` AS `Name`,`country`.`Continent` AS `Continent`,`country`.`Region` AS `Region`,`country`.`SurfaceArea` AS `SurfaceArea`,`country`.`IndepYear` AS `IndepYear`,`country`.`Population` AS `Population`,`country`.`LifeExpectancy` AS `LifeExpectancy`,`country`.`GNP` AS `GNP`,`country`.`GNPOld` AS `GNPOld`,`country`.`LocalName` AS `LocalName`,`country`.`GovernmentForm` AS `GovernmentForm`,`country`.`HeadOfState` AS `HeadOfState`,`country`.`Capital` AS `Capital`,`country`.`Code2` AS `Code2` from `country` where (`country`.`Continent` = 'Asia')"
                // select
                //   `country`.`Code` as `Code`,
                //   `country`.`Name` as `Name`,
                //   `country`.`Continent` as `Continent`,
                //   `country`.`Region` as `Region`,
                //   `country`.`SurfaceArea` as `SurfaceArea`,
                //   `country`.`IndepYear` as `IndepYear`,
                //   `country`.`Population` as `Population`,
                //   `country`.`LifeExpectancy` as `LifeExpectancy`,
                //   `country`.`GNP` as `GNP`,
                //   `country`.`GNPOld` as `GNPOld`,
                //   `country`.`LocalName` as `LocalName`,
                //   `country`.`GovernmentForm` as `GovernmentForm`,
                //   `country`.`HeadOfState` as `HeadOfState`,
                //   `country`.`Capital` as `Capital`,
                //   `country`.`Code2` as `Code2`
                // from
                //   `country`
                // where (`country`.`Continent` = 'Asia')
              }
            ]
          }
        },
        {
          "view": {
            "table": "`countries_in_asia`",
            "select#": 2,
            "merged": true
          }
        },
        {
          "expanded_query": "/* select#1 */ select `country`.`Code` AS `Code`,`country`.`Name` AS `Name`,`country`.`Continent` AS `Continent`,`country`.`Region` AS `Region`,`country`.`SurfaceArea` AS `SurfaceArea`,`country`.`IndepYear` AS `IndepYear`,`country`.`Population` AS `Population`,`country`.`LifeExpectancy` AS `LifeExpectancy`,`country`.`GNP` AS `GNP`,`country`.`GNPOld` AS `GNPOld`,`country`.`LocalName` AS `LocalName`,`country`.`GovernmentForm` AS `GovernmentForm`,`country`.`HeadOfState` AS `HeadOfState`,`country`.`Capital` AS `Capital`,`country`.`Code2` AS `Code2` from <constant table> join (`country`) on((`country`.`Continent` = 'Asia')) where (`country`.`Population` > 5000000)"
          // select
          //   `country`.`Code` as `Code`,
          //   `country`.`Name` as `Name`,
          //   `country`.`Continent` as `Continent`,
          //   `country`.`Region` as `Region`,
          //   `country`.`SurfaceArea` as `SurfaceArea`,
          //   `country`.`IndepYear` as `IndepYear`,
          //   `country`.`Population` as `Population`,
          //   `country`.`LifeExpectancy` as `LifeExpectancy`,
          //   `country`.`GNP` as `GNP`,
          //   `country`.`GNPOld` as `GNPOld`,
          //   `country`.`LocalName` as `LocalName`,
          //   `country`.`GovernmentForm` as `GovernmentForm`,
          //   `country`.`HeadOfState` as `HeadOfState`,
          //   `country`.`Capital` as `Capital`,
          //   `country`.`Code2` as `Code2`
          // from
          //   < constant table >
          //   join (`country`) on (`country`.`Continent` = 'Asia')
          // where (`country`.`Population` > 5000000)
        },
        {
          "transformations_to_nested_joins": {
            "transformations": [
              "JOIN_condition_to_WHERE",
              "parenthesis_removal"
            ],
            "expanded_query": "/* select#1 */ select `country`.`Code` AS `Code`,`country`.`Name` AS `Name`,`country`.`Continent` AS `Continent`,`country`.`Region` AS `Region`,`country`.`SurfaceArea` AS `SurfaceArea`,`country`.`IndepYear` AS `IndepYear`,`country`.`Population` AS `Population`,`country`.`LifeExpectancy` AS `LifeExpectancy`,`country`.`GNP` AS `GNP`,`country`.`GNPOld` AS `GNPOld`,`country`.`LocalName` AS `LocalName`,`country`.`GovernmentForm` AS `GovernmentForm`,`country`.`HeadOfState` AS `HeadOfState`,`country`.`Capital` AS `Capital`,`country`.`Code2` AS `Code2` from `country` where ((`country`.`Population` > 5000000) and (`country`.`Continent` = 'Asia'))"
            // select
            //   `country`.`Code` as `Code`,
            //   `country`.`Name` as `Name`,
            //   `country`.`Continent` as `Continent`,
            //   `country`.`Region` as `Region`,
            //   `country`.`SurfaceArea` as `SurfaceArea`,
            //   `country`.`IndepYear` as `IndepYear`,
            //   `country`.`Population` as `Population`,
            //   `country`.`LifeExpectancy` as `LifeExpectancy`,
            //   `country`.`GNP` as `GNP`,
            //   `country`.`GNPOld` as `GNPOld`,
            //   `country`.`LocalName` as `LocalName`,
            //   `country`.`GovernmentForm` as `GovernmentForm`,
            //   `country`.`HeadOfState` as `HeadOfState`,
            //   `country`.`Capital` as `Capital`,
            //   `country`.`Code2` as `Code2`
            // from
            //   `country`
            // where ((`country`.`Population` > 5000000)
            //   and (`country`.`Continent` = 'Asia'))
          }
        }
      ]
    }
  }
#+END_SRC
** Cost-based Optimization
*** 计算流程
CBO 是 MySQL 优化器的计算模型，其简要的流程如下：
1. 为每个操作分配一个成本 (cost)
2. 评估每个可能的计划需要多少次操作
3. 将各个操作成本相加
4. 选择总成本最低的计划
[[file:../static/image/2023/0223/165913.png]]

为什么是简化的？因为优化器不会分析每种可能的执行计划的成本，只会从中选出那些很有
可能成为最优的计划，想象一下，假如有 5 张表关联查询，每张表有 5 个索引，那么共有
$5! * 5! = 14400$ 种可能的执行计划，如果优化器都逐个分析，很有可能分析所耗费的时
间都比 sql 语句执行的时间长，这样的分析就失去了它的价值。

MySQL 的 optimizer_search_depth 参数可以控制优化器搜索的深度

正因为如此，优化器选择的计划不是每次都是最优的，如果你能明确知道某种计划是最优的，
那么你可以强制执行那个计划，比如：明确知道用索引 index_a 是最快的，那么你可以使
用 ~force index('index_a')~ 强制优化器执行

*** cost 常量
MySQL 8.0 的 cose 配置常量如下所示, 详见 [[https://dev.mysql.com/doc/refman/8.0/en/cost-model.html][Cost Model]]
服务端的 cost
#+BEGIN_SRC sql :exports both
  select * from mysql.server_cost;
#+END_SRC

#+RESULTS:
| cost_name                    | cost_value | last_update         | comment | default_value |
|------------------------------+------------+---------------------+---------+---------------|
| disk_temptable_create_cost   | NULL       | 2023-02-20 14:39:39 | NULL    |            20 |
| disk_temptable_row_cost      | NULL       | 2023-02-20 14:39:39 | NULL    |           0.5 |
| key_compare_cost             | NULL       | 2023-02-20 14:39:39 | NULL    |          0.05 |
| memory_temptable_create_cost | NULL       | 2023-02-20 14:39:39 | NULL    |             1 |
| memory_temptable_row_cost    | NULL       | 2023-02-20 14:39:39 | NULL    |           0.1 |
| row_evaluate_cost            | NULL       | 2023-02-20 14:39:39 | NULL    |           0.1 |

引擎 cost 列表
#+BEGIN_SRC sql :exports both
  select * from mysql.engine_cost;
#+END_SRC

#+RESULTS:
| engine_name | device_type | cost_name              | cost_value | last_update         | comment | default_value |
|-------------+-------------+------------------------+------------+---------------------+---------+---------------|
| default     |           0 | io_block_read_cost     | NULL       | 2023-02-20 14:39:39 | NULL    |             1 |
| default     |           0 | memory_block_read_cost | NULL       | 2023-02-20 14:39:39 | NULL    |          0.25 |

*** 元数据 & 统计数据
MySQL 优化器的计算模型依赖系统的元数据和统计信息，见 [[https://dev.mysql.com/doc/refman/8.0/en/optimizer-statistics.html][Optimizer Statistics]]
常见使用的元数据如下：

[[file:../static/image/2023/0223/201652.png]]

相关统计信息如下：

[[file:../static/image/2023/0223/201742.png]]

*** cost 常量配置实验
默认执行 SQL 的花费
#+BEGIN_SRC sql :results output
  explain format=json select * from country where continent='asia' and population > 5000000\G
#+END_SRC

#+RESULTS:
#+begin_example
,*************************** 1. row ***************************
EXPLAIN: {
  "query_block": {
    "select_id": 1,
    "cost_info": {
      "query_cost": "25.65" // 总体 cost 值
    },
    "table": {
      "table_name": "country",
      "access_type": "ALL",
      "rows_examined_per_scan": 239,
      "rows_produced_per_join": 11,
      "filtered": "4.76",
      "cost_info": {
        "read_cost": "24.51",
        "eval_cost": "1.14",
        "prefix_cost": "25.65",
        "data_read_per_join": "10K"
      },
      "used_columns": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "attached_condition": "((`world`.`country`.`Continent` = 'asia') and (`world`.`country`.`Population` > 5000000))"
    }
  }
}
#+end_example

将 row_evaluate_cost 从默认值 0.1 修改成 1
#+BEGIN_SRC sql :results none
  update mysql.server_cost set cost_value=1 where cost_name='row_evaluate_cost';
  flush optimizer_costs;
#+END_SRC

#+BEGIN_SRC sql :results output
  explain format=json select * from country where continent='asia' and population > 5000000\G
#+END_SRC

#+RESULTS:
#+begin_example
,*************************** 1. row ***************************
EXPLAIN: {
  "query_block": {
    "select_id": 1,
    "cost_info": {
      "query_cost": "240.75" // 总体 cost 提升了 10 倍
    },
    "table": {
      "table_name": "country",
      "access_type": "ALL",
      "rows_examined_per_scan": 239,
      "rows_produced_per_join": 11,
      "filtered": "4.76",
      "cost_info": {
        "read_cost": "229.37",
        "eval_cost": "11.38",
        "prefix_cost": "240.75",
        "data_read_per_join": "10K"
      },
      "used_columns": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "attached_condition": "((`world`.`country`.`Continent` = 'asia') and (`world`.`country`.`Population` > 5000000))"
    }
  }
}
#+end_example

恢复默认值, 防止影响后续实验
#+BEGIN_SRC sql
  update mysql.server_cost set cost_value=null where cost_name='row_evaluate_cost';
  flush optimizer_costs;
#+END_SRC
** Hints
*** Old Style Hints
老版本的 Hints 是直接写在 SQL 语句中的，目前 Hints 的写法在 MySQL 8.0 依然支持，
下面有一些示例
#+BEGIN_SRC sql
  -- Join tables in the order specified
  select straight_join country.name as countryname, city.name as city
  from country inner join city on city.countrycode=country.code;

  -- Force usage of an index
  select * from country force index (p)
  where continent='Asia' and population > 5000000;

  -- Ignore an index
  select * from country ignore index (p)
  where continent='Asia' and population > 5000000;

  -- Suggest an index over other indexes
  select * from country use index (p)
  where continent='Asia' and population > 5000000;
#+END_SRC

如果直接写 SQL, 全表扫描的 query_cost = 25.65
#+BEGIN_SRC sql :results output
  explain format=json
  select * from country where continent='Asia' and population > 5000000\G
#+END_SRC

#+RESULTS:
#+begin_example
,*************************** 1. row ***************************
EXPLAIN: {
  "query_block": {
    "select_id": 1,
    "cost_info": {
      "query_cost": "25.65"
    },
    "table": {
      "table_name": "country",
      "access_type": "ALL",
      "possible_keys": [
        "p"
      ],
      "rows_examined_per_scan": 239,
      "rows_produced_per_join": 15,
      "filtered": "6.46",
      "cost_info": {
        "read_cost": "24.11",
        "eval_cost": "1.54",
        "prefix_cost": "25.65",
        "data_read_per_join": "14K"
      },
      "used_columns": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "attached_condition": "((`world`.`country`.`Continent` = 'Asia') and (`world`.`country`.`Population` > 5000000))"
    }
  }
}
#+end_example

强制走索引 p, query_cost = 48.86
#+BEGIN_SRC sql :results output
  explain format=json
  select * from country force index (p) where continent='Asia' and population > 5000000\G
#+END_SRC

#+RESULTS:
#+begin_example
,*************************** 1. row ***************************
EXPLAIN: {
  "query_block": {
    "select_id": 1,
    "cost_info": {
      "query_cost": "48.86"
    },
    "table": {
      "table_name": "country",
      "access_type": "range",
      "possible_keys": [
        "p"
      ],
      "key": "p",
      "used_key_parts": [
        "Population"
      ],
      "key_length": "4",
      "rows_examined_per_scan": 108,
      "rows_produced_per_join": 15,
      "filtered": "14.29",
      "index_condition": "(`world`.`country`.`Population` > 5000000)",
      "cost_info": {
        "read_cost": "47.32",
        "eval_cost": "1.54",
        "prefix_cost": "48.86",
        "data_read_per_join": "14K"
      },
      "used_columns": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "attached_condition": "(`world`.`country`.`Continent` = 'Asia')"
    }
  }
}
#+end_example

*** New Comment-Style Hints
常见的注释类型的 Hints 如下： [[https://dev.mysql.com/doc/refman/8.0/en/optimizer-hints.html][Hints]]

[[file:../static/image/2023/0223/205348.png]]

#+BEGIN_SRC sql :results output
  explain format=json
  select * from country where population > 1000000000 and continent='Asia'\G
#+END_SRC

#+RESULTS:
#+begin_example
,*************************** 1. row ***************************
EXPLAIN: {
  "query_block": {
    "select_id": 1,
    "cost_info": {
      "query_cost": "1.16"
    },
    "table": {
      "table_name": "country",
      "access_type": "range",
      "possible_keys": [
        "p"
      ],
      "key": "p",
      "used_key_parts": [
        "Population"
      ],
      "key_length": "4",
      "rows_examined_per_scan": 2,
      "rows_produced_per_join": 0,
      "filtered": "14.29",
      "index_condition": "(`world`.`country`.`Population` > 1000000000)",
      "cost_info": {
        "read_cost": "1.13",
        "eval_cost": "0.03",
        "prefix_cost": "1.16",
        "data_read_per_join": "276"
      },
      "used_columns": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "attached_condition": "(`world`.`country`.`Continent` = 'Asia')"
    }
  }
}
#+end_example

#+BEGIN_SRC sql :results output
  explain format=json
    select /*+NO_RANGE_OPTIMIZATION(Country) */  * from country
    where population > 1000000000 and continent='Asia'\G
#+END_SRC

#+RESULTS:
#+begin_example
,*************************** 1. row ***************************
EXPLAIN: {
  "query_block": {
    "select_id": 1,
    "cost_info": {
      "query_cost": "25.65"
    },
    "table": {
      "table_name": "country",
      "access_type": "ALL",
      "possible_keys": [
        "p"
      ],
      "rows_examined_per_scan": 239,
      "rows_produced_per_join": 11,
      "filtered": "4.76",
      "cost_info": {
        "read_cost": "24.51",
        "eval_cost": "1.14",
        "prefix_cost": "25.65",
        "data_read_per_join": "10K"
      },
      "used_columns": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "attached_condition": "((`world`.`country`.`Continent` = 'Asia') and (`world`.`country`.`Population` > 1000000000))"
    }
  }
}
#+end_example
** Index Optimization
*** Comparing Plans
添加两个索引: c 洲, p 人口数
#+BEGIN_SRC sql
  alter table country add index c(continent);
  alter table country add index p(population);
#+END_SRC

亚洲 500 万人口的国家
#+BEGIN_SRC sql :results output
  explain format=json
  select * from country where population > 5000000 and continent='Asia'\G
#+END_SRC

#+RESULTS:
#+begin_example
,*************************** 1. row ***************************
EXPLAIN: {
  "query_block": {
    "select_id": 1,
    "cost_info": {
      "query_cost": "10.35"
    },
    "table": {
      "table_name": "country",
      "access_type": "ref",
      "possible_keys": [
        "p",
        "c"
      ],
      "key": "c",
      "used_key_parts": [
        "Continent"
      ],
      "key_length": "1",
      "ref": [
        "const"
      ],
      "rows_examined_per_scan": 51,
      "rows_produced_per_join": 23,
      "filtered": "45.19",
      "index_condition": "(`world`.`country`.`Continent` = 'Asia')",
      "cost_info": {
        "read_cost": "5.25",
        "eval_cost": "2.30",
        "prefix_cost": "10.35",
        "data_read_per_join": "21K"
      },
      "used_columns": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "attached_condition": "(`world`.`country`.`Population` > 5000000)"
    }
  }
}
#+end_example

亚洲 5 亿人口的国家
#+BEGIN_SRC sql :results output
  explain format=json
  select * from country where population > 500000000 and continent='Asia'\G
#+END_SRC

#+RESULTS:
#+begin_example
,*************************** 1. row ***************************
EXPLAIN: {
  "query_block": {
    "select_id": 1,
    "cost_info": {
      "query_cost": "1.16"
    },
    "table": {
      "table_name": "country",
      "access_type": "range",
      "possible_keys": [
        "p",
        "c"
      ],
      "key": "p",
      "used_key_parts": [
        "Population"
      ],
      "key_length": "4",
      "rows_examined_per_scan": 2,
      "rows_produced_per_join": 0,
      "filtered": "21.34",
      "index_condition": "(`world`.`country`.`Population` > 500000000)",
      "cost_info": {
        "read_cost": "1.12",
        "eval_cost": "0.04",
        "prefix_cost": "1.16",
        "data_read_per_join": "413"
      },
      "used_columns": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "attached_condition": "(`world`.`country`.`Continent` = 'Asia')"
    }
  }
}
#+end_example

查看 Optimization Trace, 可以探测出走什么执行计划
#+BEGIN_SRC json
  {
    "steps": [
      {
        "join_preparation": {
          "select#": 1,
          "steps": [
            {
              "expanded_query": "/* select#1 */ select `country`.`Code` AS `Code`,`country`.`Name` AS `Name`,`country`.`Continent` AS `Continent`,`country`.`Region` AS `Region`,`country`.`SurfaceArea` AS `SurfaceArea`,`country`.`IndepYear` AS `IndepYear`,`country`.`Population` AS `Population`,`country`.`LifeExpectancy` AS `LifeExpectancy`,`country`.`GNP` AS `GNP`,`country`.`GNPOld` AS `GNPOld`,`country`.`LocalName` AS `LocalName`,`country`.`GovernmentForm` AS `GovernmentForm`,`country`.`HeadOfState` AS `HeadOfState`,`country`.`Capital` AS `Capital`,`country`.`Code2` AS `Code2` from `country` where ((`country`.`Population` > 500000000) and (`country`.`Continent` = 'Asia'))"
            }
          ]
        }
      },
      {
        "join_optimization": {
          "select#": 1,
          "steps": [
            {
              "condition_processing": {
                "condition": "WHERE",
                "original_condition": "((`country`.`Population` > 500000000) and (`country`.`Continent` = 'Asia'))",
                "steps": [
                  {
                    "transformation": "equality_propagation",
                    "resulting_condition": "((`country`.`Population` > 500000000) and multiple equal('Asia', `country`.`Continent`))"
                  },
                  {
                    "transformation": "constant_propagation",
                    "resulting_condition": "((`country`.`Population` > 500000000) and multiple equal('Asia', `country`.`Continent`))"
                  },
                  {
                    "transformation": "trivial_condition_removal",
                    "resulting_condition": "((`country`.`Population` > 500000000) and multiple equal('Asia', `country`.`Continent`))"
                  }
                ]
              }
            },
            {
              "substitute_generated_columns": {}
            },
            {
              "table_dependencies": [
                {
                  "table": "`country`",
                  "row_may_be_null": false,
                  "map_bit": 0,
                  "depends_on_map_bits": []
                }
              ]
            },
            {
              "ref_optimizer_key_uses": [
                {
                  "table": "`country`",
                  "field": "Continent",
                  "equals": "'Asia'",
                  "null_rejecting": true
                }
              ]
            },
            {
              "rows_estimation": [
                {
                  "table": "`country`",
                  "range_analysis": {
                    "table_scan": {
                      "rows": 239,
                      "cost": 27.75
                    },
                    "potential_range_indexes": [ // => 可能使用的索引
                      {
                        "index": "PRIMARY",
                        "usable": false,
                        "cause": "not_applicable"
                      },
                      {
                        "index": "p",
                        "usable": true,
                        "key_parts": [
                          "Population",
                          "Code"
                        ]
                      },
                      {
                        "index": "c",
                        "usable": true,
                        "key_parts": [
                          "Continent",
                          "Code"
                        ]
                      }
                    ],
                    "setup_range_conditions": [],
                    "group_index_range": {
                      "chosen": false,
                      "cause": "not_group_by_or_distinct"
                    },
                    "skip_scan_range": {
                      "potential_skip_scan_indexes": [
                        {
                          "index": "p",
                          "usable": false,
                          "cause": "query_references_nonkey_column"
                        },
                        {
                          "index": "c",
                          "usable": false,
                          "cause": "query_references_nonkey_column"
                        }
                      ]
                    },
                    "analyzing_range_alternatives": {
                      "range_scan_alternatives": [
                        {
                          "index": "p", // => 使用索引 p 的代价 0.96
                          "ranges": [
                            "500000000 < Population"
                          ],
                          "index_dives_for_eq_ranges": true,
                          "rowid_ordered": false,
                          "using_mrr": false,
                          "index_only": false,
                          "in_memory": 1,
                          "rows": 2,
                          "cost": 0.96,
                          "chosen": true
                        },
                        {
                          "index": "c", // => 使用索引 c 的代价 18.11
                          "ranges": [
                            "Continent = 'Asia'"
                          ],
                          "index_dives_for_eq_ranges": true,
                          "rowid_ordered": true,
                          "using_mrr": false,
                          "index_only": false,
                          "in_memory": 1,
                          "rows": 51,
                          "cost": 18.11,
                          "chosen": false,
                          "cause": "cost"
                        }
                      ],
                      "analyzing_roworder_intersect": {
                        "usable": false,
                        "cause": "too_few_roworder_scans"
                      }
                    },
                    "chosen_range_access_summary": {
                      "range_access_plan": {
                        "type": "range_scan",
                        "index": "p",
                        "rows": 2,
                        "ranges": [
                          "500000000 < Population"
                        ]
                      },
                      "rows_for_plan": 2,
                      "cost_for_plan": 0.96,
                      "chosen": true
                    }
                  }
                }
              ]
            },
            {
              "considered_execution_plans": [
                {
                  "plan_prefix": [],
                  "table": "`country`",
                  "best_access_path": {
                    "considered_access_paths": [
                      {
                        "access_type": "ref",
                        "index": "c",
                        "rows": 51,
                        "cost": 10.35,
                        "chosen": true
                      },
                      {
                        "rows_to_scan": 2,
                        "access_type": "range",
                        "range_details": {
                          "used_index": "p"
                        },
                        "resulting_rows": 2,
                        "cost": 1.16,
                        "chosen": true
                      }
                    ]
                  },
                  "condition_filtering_pct": 100,
                  "rows_for_plan": 2,
                  "cost_for_plan": 1.16,
                  "chosen": true
                }
              ]
            },
            {
              "attaching_conditions_to_tables": {
                "original_condition": "((`country`.`Continent` = 'Asia') and (`country`.`Population` > 500000000))",
                "attached_conditions_computation": [],
                "attached_conditions_summary": [
                  {
                    "table": "`country`",
                    "attached": "((`country`.`Continent` = 'Asia') and (`country`.`Population` > 500000000))"
                  }
                ]
              }
            },
            {
              "finalizing_table_conditions": [
                {
                  "table": "`country`",
                  "original_table_condition": "((`country`.`Continent` = 'Asia') and (`country`.`Population` > 500000000))",
                  "final_table_condition   ": "((`country`.`Continent` = 'Asia') and (`country`.`Population` > 500000000))"
                }
              ]
            },
            {
              "refine_plan": [
                {
                  "table": "`country`",
                  "pushed_index_condition": "(`country`.`Population` > 500000000)",
                  "table_condition_attached": "(`country`.`Continent` = 'Asia')"
                }
              ]
            }
          ]
        }
      },
      {
        "join_execution": {
          "select#": 1,
          "steps": []
        }
      }
    ]
  }
#+END_SRC

*** Composite Indexes
添加两个联合索引
#+BEGIN_SRC sql
  alter table country add index c_p(continent, population);
  alter table country add index p_c(population, continent);
#+END_SRC

#+BEGIN_SRC sql
  alter table country drop index c;
  alter table country drop index p;
#+END_SRC

Cost 值对比
| Index |  Cost |
|-------+-------|
| p_c   | 48.86 |
| c_p   | 14.66 |

#+BEGIN_SRC sql :results output
  explain format=json
  select * from country force index(p_c) where population > 5000000 and continent='Asia'\G
#+END_SRC

#+RESULTS:
#+begin_example
,*************************** 1. row ***************************
EXPLAIN: {
  "query_block": {
    "select_id": 1,
    "cost_info": {
      "query_cost": "48.86"
    },
    "table": {
      "table_name": "country",
      "access_type": "range",
      "possible_keys": [
        "p_c"
      ],
      "key": "p_c",
      "used_key_parts": [
        "Population"
      ],
      "key_length": "4",
      "rows_examined_per_scan": 108,
      "rows_produced_per_join": 15,
      "filtered": "14.29",
      "index_condition": "((`world`.`country`.`Continent` = 'Asia') and (`world`.`country`.`Population` > 5000000))",
      "cost_info": {
        "read_cost": "47.32",
        "eval_cost": "1.54",
        "prefix_cost": "48.86",
        "data_read_per_join": "14K"
      },
      "used_columns": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ]
    }
  }
}
#+end_example

#+BEGIN_SRC sql :results output
  explain format=json
  select * from country where population > 5000000 and continent='Asia'\G
#+END_SRC

#+RESULTS:
#+begin_example
,*************************** 1. row ***************************
EXPLAIN: {
  "query_block": {
    "select_id": 1,
    "cost_info": {
      "query_cost": "14.66"
    },
    "table": {
      "table_name": "country",
      "access_type": "range",
      "possible_keys": [
        "c_p",
        "p_c"
      ],
      "key": "c_p",
      "used_key_parts": [
        "Continent",
        "Population"
      ],
      "key_length": "5",
      "rows_examined_per_scan": 32,
      "rows_produced_per_join": 32,
      "filtered": "100.00",
      "index_condition": "((`world`.`country`.`Continent` = 'Asia') and (`world`.`country`.`Population` > 5000000))",
      "cost_info": {
        "read_cost": "11.46",
        "eval_cost": "3.20",
        "prefix_cost": "14.66",
        "data_read_per_join": "30K"
      },
      "used_columns": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ]
    }
  }
}
#+end_example

下面总结了一些常见的索引优化原则
1. Left most rule. An index on (First Name, Last Name) can be used to also
   satisfy queries that need an index on (First Name), but not on queries that
   require an index on (Last Name). Try and design composite indexes in such a
   way that they can be reused by the greatest number of queries possible.
2. Ranges to the right. An index on (Age, First Name) can not be used to satisfy
   a query in the form of WHERE age BETWEEN x and y AND first_name = 'John'. Or
   to state more specifically: the rest of the composite index will not be used
   after the first range condition.
3. Most selective columns to the left. Think about how you can eliminate work in
   the index as fast as possible. This usually has the effect of improving
   memory fit because fewer index pages need to be accessed.
4. Be careful changing index order. Mixing ASC or DESC may affect how much of a
   composite index can be used.

*** Covering Indexes
添加 (洲, 人口数, 名称) 联合索引
#+BEGIN_SRC sql
  alter table country add index c_p_n(continent, population, name);
#+END_SRC

添加索引前
#+BEGIN_SRC sql :results output
  explain format=json
  select name from country where population > 5000000 and continent='Asia'\G
#+END_SRC

#+RESULTS:
#+begin_example
,*************************** 1. row ***************************
EXPLAIN: {
  "query_block": {
    "select_id": 1,
    "cost_info": {
      "query_cost": "14.66"
    },
    "table": {
      "table_name": "country",
      "access_type": "range",
      "possible_keys": [
        "c_p",
        "p_c"
      ],
      "key": "c_p",
      "used_key_parts": [
        "Continent",
        "Population"
      ],
      "key_length": "5",
      "rows_examined_per_scan": 32,
      "rows_produced_per_join": 32,
      "filtered": "100.00",
      "index_condition": "((`world`.`country`.`Continent` = 'Asia') and (`world`.`country`.`Population` > 5000000))",
      "cost_info": {
        "read_cost": "11.46",
        "eval_cost": "3.20",
        "prefix_cost": "14.66",
        "data_read_per_join": "30K"
      },
      "used_columns": [
        "Name",
        "Continent",
        "Population"
      ]
    }
  }
}
#+end_example

添加 c_p_n 索引后
#+BEGIN_SRC sql :results output
  explain format=json
  select name from country where population > 5000000 and continent='Asia'\G
#+END_SRC

#+RESULTS:
#+begin_example
,*************************** 1. row ***************************
EXPLAIN: {
  "query_block": {
    "select_id": 1,
    "cost_info": {
      "query_cost": "6.87"
    },
    "table": {
      "table_name": "country",
      "access_type": "range",
      "possible_keys": [
        "c_p",
        "p_c",
        "c_p_n"
      ],
      "key": "c_p_n",
      "used_key_parts": [
        "Continent",
        "Population"
      ],
      "key_length": "5",
      "rows_examined_per_scan": 32,
      "rows_produced_per_join": 32,
      "filtered": "100.00",
      "using_index": true, // => 表示使用覆盖索引
      "cost_info": {
        "read_cost": "3.67",
        "eval_cost": "3.20",
        "prefix_cost": "6.87",
        "data_read_per_join": "30K"
      },
      "used_columns": [
        "Name",
        "Continent",
        "Population"
      ],
      "attached_condition": "((`world`.`country`.`Continent` = 'Asia') and (`world`.`country`.`Population` > 5000000))"
    }
  }
}
#+end_example

*** Transient Plans
通常执行计划会收到数据不同而变化，所以我们对于执行计划需要往往需要根据实际情形进行分析

下面举一个例子，更加不同条件产生的 cost 值统计表如下：
[[file:../static/image/2023/0223/235710.png]]

同时即使固定一个值，不同索引执行的 Cost 也可能是不一样的
[[file:../static/image/2023/0224/000023.png]]

** Subqueries
*** Scalar Subquery
Scalar Subquery 指只返回一条数据的子查询，这种查询通常可以被优化成缓存
#+BEGIN_SRC sql :results output
  explain format=json
  select * from country where code = (select countrycode from city where name='Toronto')\G
#+END_SRC

#+RESULTS:
#+begin_example
,*************************** 1. row ***************************
EXPLAIN: {
  "query_block": {
    "select_id": 1,
    "cost_info": {
      "query_cost": "1.00"
    },
    "table": {
      "table_name": "country",
      "access_type": "const",
      "possible_keys": [
        "PRIMARY"
      ],
      "key": "PRIMARY",
      "used_key_parts": [
        "Code"
      ],
      "key_length": "12",
      "ref": [
        "const"
      ],
      "rows_examined_per_scan": 1,
      "rows_produced_per_join": 1,
      "filtered": "100.00",
      "cost_info": {
        "read_cost": "0.00",
        "eval_cost": "0.10",
        "prefix_cost": "0.00",
        "data_read_per_join": "968"
      },
      "used_columns": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ]
    },
    "optimized_away_subqueries": [
      {
        "dependent": false,
        "cacheable": true,
        "query_block": {
          "select_id": 2,
          "cost_info": {
            "query_cost": "410.85"
          },
          "table": {
            "table_name": "city",
            "access_type": "ALL", // => city 全表扫描
            "rows_examined_per_scan": 4046,
            "rows_produced_per_join": 404,
            "filtered": "10.00",
            "cost_info": {
              "read_cost": "370.39",
              "eval_cost": "40.46",
              "prefix_cost": "410.85",
              "data_read_per_join": "97K"
            },
            "used_columns": [
              "Name",
              "CountryCode"
            ],
            "attached_condition": "(`world`.`city`.`Name` = 'Toronto')"
          }
        }
      }
    ]
  }
}
#+end_example

添加一个索引来改善标量查询
#+BEGIN_SRC sql
  alter table city add index n(name);
#+END_SRC

#+BEGIN_SRC sql :results output
  explain format=json
  select * from country where code = (select countrycode from city where name='Toronto')\G
#+END_SRC

#+RESULTS:
#+begin_example
,*************************** 1. row ***************************
EXPLAIN: {
  "query_block": {
    "select_id": 1,
    "cost_info": {
      "query_cost": "1.00"
    },
    "table": {
      "table_name": "country",
      "access_type": "const",
      "possible_keys": [
        "PRIMARY"
      ],
      "key": "PRIMARY",
      "used_key_parts": [
        "Code"
      ],
      "key_length": "12",
      "ref": [
        "const"
      ],
      "rows_examined_per_scan": 1,
      "rows_produced_per_join": 1,
      "filtered": "100.00",
      "cost_info": {
        "read_cost": "0.00",
        "eval_cost": "0.10",
        "prefix_cost": "0.00",
        "data_read_per_join": "968"
      },
      "used_columns": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ]
    },
    "optimized_away_subqueries": [
      {
        "dependent": false,
        "cacheable": true,
        "query_block": {
          "select_id": 2,
          "cost_info": {
            "query_cost": "0.35"
          },
          "table": {
            "table_name": "city",
            "access_type": "ref", // 添加索引后，全表扫描优化成了走索引
            "possible_keys": [
              "n"
            ],
            "key": "n",
            "used_key_parts": [
              "Name"
            ],
            "key_length": "140",
            "ref": [
              "const"
            ],
            "rows_examined_per_scan": 1,
            "rows_produced_per_join": 1,
            "filtered": "100.00",
            "index_condition": "(`world`.`city`.`Name` = 'Toronto')",
            "cost_info": {
              "read_cost": "0.25",
              "eval_cost": "0.10",
              "prefix_cost": "0.35",
              "data_read_per_join": "248"
            },
            "used_columns": [
              "Name",
              "CountryCode"
            ]
          }
        }
      }
    ]
  }
}
#+end_example
*** IN Subquery (Unique)
code 是 country 表的唯一索引
#+BEGIN_SRC sql :results output
  explain format=json
  select * from city where countrycode in (select code from country where continent = 'Asia')\G
#+END_SRC

#+RESULTS:
#+begin_example
,*************************** 1. row ***************************
EXPLAIN: {
  "query_block": {
    "select_id": 1,
    "cost_info": {
      "query_cost": "316.67"
    },
    "nested_loop": [
      {
        "table": {
          "table_name": "country",
          "access_type": "ref",
          "possible_keys": [
            "PRIMARY",
            "c"
          ],
          "key": "c", // => 走 c 索引
          "used_key_parts": [
            "Continent"
          ],
          "key_length": "1",
          "ref": [
            "const"
          ],
          "rows_examined_per_scan": 51,
          "rows_produced_per_join": 51,
          "filtered": "100.00",
          "using_index": true, // => 索引覆盖
          "cost_info": {
            "read_cost": "0.27",
            "eval_cost": "5.10",
            "prefix_cost": "5.37",
            "data_read_per_join": "48K"
          },
          "used_columns": [
            "Code",
            "Continent"
          ],
          "attached_condition": "(`world`.`country`.`Continent` = 'Asia')"
        }
      },
      {
        "table": {
          "table_name": "city",
          "access_type": "ref",
          "possible_keys": [
            "CountryCode"
          ],
          "key": "CountryCode",
          "used_key_parts": [
            "CountryCode"
          ],
          "key_length": "12",
          "ref": [
            "world.country.Code"
          ],
          "rows_examined_per_scan": 17,
          "rows_produced_per_join": 889,
          "filtered": "100.00",
          "cost_info": {
            "read_cost": "222.36",
            "eval_cost": "88.94",
            "prefix_cost": "316.67",
            "data_read_per_join": "215K"
          },
          "used_columns": [
            "ID",
            "Name",
            "CountryCode",
            "District",
            "Population"
          ]
        }
      }
    ]
  }
}
#+end_example

上述的子查询会有如下几步的转化
#+BEGIN_SRC json
  "join_preparation": {
    "select#": 1,
    "steps": [
      {
        "join_preparation": {
          "select#": 2,
          "steps": [
            {
              "expanded_query": "/* select#2 */ select `country`.`Code` from `country` where (`country`.`Continent` = 'Asia')"
            }
          ]
        }
      },
      {
        "expanded_query": "/* select#1 */ select `city`.`ID` AS `ID`,`city`.`Name` AS `Name`,`city`.`CountryCode` AS `CountryCode`,`city`.`District` AS `District`,`city`.`Population` AS `Population` from `city` where `city`.`CountryCode` in (/* select#2 */ select `country`.`Code` from `country` where (`country`.`Continent` = 'Asia'))"
      },
      {
        "transformation": {
          "select#": 2,
          "from": "IN (SELECT)",
          "to": "semijoin",
          "chosen": true,
          "transformation_to_semi_join": {
            "subquery_predicate": "`city`.`CountryCode` in (/* select#2 */ select `country`.`Code` from `country` where (`country`.`Continent` = 'Asia'))",
            "embedded in": "WHERE",
            "evaluating_constant_semijoin_conditions": [
            ],
            "semi-join condition": "((`country`.`Continent` = 'Asia') and (`city`.`CountryCode` = `country`.`Code`))",
            "decorrelated_predicates": [
              {
                "outer": "`city`.`CountryCode`",
                "inner": "`country`.`Code`"
              }
            ]
          }
        }
      },
      {
        "transformations_to_nested_joins": {
          "transformations": [
            "semijoin"
          ],
          "expanded_query": "/* select#1 */ select `city`.`ID` AS `ID`,`city`.`Name` AS `Name`,`city`.`CountryCode` AS `CountryCode`,`city`.`District` AS `District`,`city`.`Population` AS `Population` from `city` semi join (`country`) where ((`country`.`Continent` = 'Asia') and (`city`.`CountryCode` = `country`.`Code`))"
        }
      }
    ]
  }
#+END_SRC

最终转化成 ~semi-join~
#+BEGIN_SRC sql
  /* select#1 */
  select
    `city`.`ID` as `ID`,
    `city`.`Name` as `Name`,
    `city`.`CountryCode` as `CountryCode`,
    `city`.`District` as `District`,
    `city`.`Population` as `Population`
  from
    `city` semi join (`country`)
  where ((`country`.`Continent` = 'Asia')
    and (`city`.`CountryCode` = `country`.`Code`));
#+END_SRC

*** IN Subquery (Non-Unique)
国家的官方语言可能不止一种
#+BEGIN_SRC sql :results output
  explain format=json
  select * from country where code in (select countrycode from countrylanguage where isofficial=1)\G
#+END_SRC

#+RESULTS:
#+begin_example
,*************************** 1. row ***************************
EXPLAIN: {
  "query_block": {
    "select_id": 1,
    "cost_info": {
      "query_cost": "186.54"
    },
    "nested_loop": [
      {
        "table": {
          "table_name": "country",
          "access_type": "ALL",
          "possible_keys": [
            "PRIMARY"
          ],
          "rows_examined_per_scan": 239,
          "rows_produced_per_join": 239,
          "filtered": "100.00",
          "cost_info": {
            "read_cost": "1.75",
            "eval_cost": "23.90",
            "prefix_cost": "25.65",
            "data_read_per_join": "225K"
          },
          "used_columns": [
            "Code",
            "Name",
            "Continent",
            "Region",
            "SurfaceArea",
            "IndepYear",
            "Population",
            "LifeExpectancy",
            "GNP",
            "GNPOld",
            "LocalName",
            "GovernmentForm",
            "HeadOfState",
            "Capital",
            "Code2"
          ]
        }
      },
      {
        "table": {
          "table_name": "countrylanguage",
          "access_type": "ref",
          "possible_keys": [
            "PRIMARY",
            "CountryCode"
          ],
          "key": "PRIMARY",
          "used_key_parts": [
            "CountryCode"
          ],
          "key_length": "12",
          "ref": [
            "world.country.Code"
          ],
          "rows_examined_per_scan": 4,
          "rows_produced_per_join": 239,
          "filtered": "50.00",
          "first_match": "country",
          "cost_info": {
            "read_cost": "59.96",
            "eval_cost": "23.90",
            "prefix_cost": "186.54",
            "data_read_per_join": "33K"
          },
          "used_columns": [
            "CountryCode",
            "IsOfficial"
          ],
          "attached_condition": "(`world`.`countrylanguage`.`IsOfficial` = 1)"
        }
      }
    ]
  }
}
#+end_example

查看一下 Trace 日志
#+BEGIN_SRC json
  {
    "steps": [
      {
        "join_preparation": {
          "select#": 1,
          "steps": [
            {
              "join_preparation": {
                "select#": 2,
                "steps": [
                  {
                    "expanded_query": "/* select#2 */ select `countrylanguage`.`CountryCode` from `countrylanguage` where (`countrylanguage`.`IsOfficial` = 1)"
                  }
                ]
              }
            },
            {
              "expanded_query": "/* select#1 */ select `country`.`Code` AS `Code`,`country`.`Name` AS `Name`,`country`.`Continent` AS `Continent`,`country`.`Region` AS `Region`,`country`.`SurfaceArea` AS `SurfaceArea`,`country`.`IndepYear` AS `IndepYear`,`country`.`Population` AS `Population`,`country`.`LifeExpectancy` AS `LifeExpectancy`,`country`.`GNP` AS `GNP`,`country`.`GNPOld` AS `GNPOld`,`country`.`LocalName` AS `LocalName`,`country`.`GovernmentForm` AS `GovernmentForm`,`country`.`HeadOfState` AS `HeadOfState`,`country`.`Capital` AS `Capital`,`country`.`Code2` AS `Code2` from `country` where `country`.`Code` in (/* select#2 */ select `countrylanguage`.`CountryCode` from `countrylanguage` where (`countrylanguage`.`IsOfficial` = 1))"
            },
            {
              "transformation": {
                "select#": 2,
                "from": "IN (SELECT)",
                "to": "semijoin",
                "chosen": true,
                "transformation_to_semi_join": {
                  "subquery_predicate": "`country`.`Code` in (/* select#2 */ select `countrylanguage`.`CountryCode` from `countrylanguage` where (`countrylanguage`.`IsOfficial` = 1))",
                  "embedded in": "WHERE",
                  "evaluating_constant_semijoin_conditions": [],
                  "semi-join condition": "((`countrylanguage`.`IsOfficial` = 1) and (`country`.`Code` = `countrylanguage`.`CountryCode`))",
                  "decorrelated_predicates": [
                    {
                      "outer": "`country`.`Code`",
                      "inner": "`countrylanguage`.`CountryCode`"
                    }
                  ]
                }
              }
            },
            {
              "transformations_to_nested_joins": {
                "transformations": [
                  "semijoin"
                ],
                "expanded_query": "/* select#1 */ select `country`.`Code` AS `Code`,`country`.`Name` AS `Name`,`country`.`Continent` AS `Continent`,`country`.`Region` AS `Region`,`country`.`SurfaceArea` AS `SurfaceArea`,`country`.`IndepYear` AS `IndepYear`,`country`.`Population` AS `Population`,`country`.`LifeExpectancy` AS `LifeExpectancy`,`country`.`GNP` AS `GNP`,`country`.`GNPOld` AS `GNPOld`,`country`.`LocalName` AS `LocalName`,`country`.`GovernmentForm` AS `GovernmentForm`,`country`.`HeadOfState` AS `HeadOfState`,`country`.`Capital` AS `Capital`,`country`.`Code2` AS `Code2` from `country` semi join (`countrylanguage`) where ((`countrylanguage`.`IsOfficial` = 1) and (`country`.`Code` = `countrylanguage`.`CountryCode`))"
              }
            }
          ]
        }
      },
      {
        "join_optimization": {
          "select#": 1,
          "steps": [
            {
              "condition_processing": {
                "condition": "WHERE",
                "original_condition": "((`countrylanguage`.`IsOfficial` = 1) and (`country`.`Code` = `countrylanguage`.`CountryCode`))",
                "steps": [
                  {
                    "transformation": "equality_propagation",
                    "resulting_condition": "((`countrylanguage`.`IsOfficial` = 1) and multiple equal(`country`.`Code`, `countrylanguage`.`CountryCode`))"
                  },
                  {
                    "transformation": "constant_propagation",
                    "resulting_condition": "((`countrylanguage`.`IsOfficial` = 1) and multiple equal(`country`.`Code`, `countrylanguage`.`CountryCode`))"
                  },
                  {
                    "transformation": "trivial_condition_removal",
                    "resulting_condition": "((`countrylanguage`.`IsOfficial` = 1) and multiple equal(`country`.`Code`, `countrylanguage`.`CountryCode`))"
                  }
                ]
              }
            },
            {
              "substitute_generated_columns": {}
            },
            {
              "table_dependencies": [
                {
                  "table": "`country`",
                  "row_may_be_null": false,
                  "map_bit": 0,
                  "depends_on_map_bits": []
                },
                {
                  "table": "`countrylanguage`",
                  "row_may_be_null": false,
                  "map_bit": 1,
                  "depends_on_map_bits": []
                }
              ]
            },
            {
              "ref_optimizer_key_uses": [
                {
                  "table": "`country`",
                  "field": "Code",
                  "equals": "`countrylanguage`.`CountryCode`",
                  "null_rejecting": true
                },
                {
                  "table": "`countrylanguage`",
                  "field": "CountryCode",
                  "equals": "`country`.`Code`",
                  "null_rejecting": true
                },
                {
                  "table": "`countrylanguage`",
                  "field": "CountryCode",
                  "equals": "`country`.`Code`",
                  "null_rejecting": true
                }
              ]
            },
            {
              "pulled_out_semijoin_tables": []
            },
            {
              "rows_estimation": [
                {
                  "table": "`country`",
                  "table_scan": {
                    "rows": 239,
                    "cost": 1.75
                  }
                },
                {
                  "table": "`countrylanguage`",
                  "table_scan": {
                    "rows": 984,
                    "cost": 1.5
                  }
                }
              ]
            },
            {
              "execution_plan_for_potential_materialization": {
                "steps": [
                  {
                    "considered_execution_plans": [
                      {
                        "plan_prefix": [],
                        "table": "`countrylanguage`",
                        "best_access_path": {
                          "considered_access_paths": [
                            {
                              "access_type": "ref",
                              "index": "PRIMARY",
                              "usable": false,
                              "chosen": false
                            },
                            {
                              "access_type": "ref",
                              "index": "CountryCode",
                              "usable": false,
                              "chosen": false
                            },
                            {
                              "rows_to_scan": 984,
                              "filtering_effect": [],
                              "final_filtering_effect": 0.5,
                              "access_type": "scan",
                              "resulting_rows": 492,
                              "cost": 99.9,
                              "chosen": true
                            }
                          ]
                        },
                        "condition_filtering_pct": 100,
                        "rows_for_plan": 492,
                        "cost_for_plan": 99.9,
                        "chosen": true
                      }
                    ]
                  }
                ]
              }
            },
            {
              "considered_execution_plans": [
                {
                  "plan_prefix": [],
                  "table": "`country`",
                  "best_access_path": {
                    "considered_access_paths": [
                      {
                        "access_type": "ref",
                        "index": "PRIMARY",
                        "usable": false,
                        "chosen": false
                      },
                      {
                        "rows_to_scan": 239,
                        "filtering_effect": [],
                        "final_filtering_effect": 1,
                        "access_type": "scan",
                        "resulting_rows": 239,
                        "cost": 25.65,
                        "chosen": true
                      }
                    ]
                  },
                  "condition_filtering_pct": 100,
                  "rows_for_plan": 239,
                  "cost_for_plan": 25.65,
                  "semijoin_strategy_choice": [],
                  "rest_of_plan": [
                    {
                      "plan_prefix": [
                        "`country`"
                      ],
                      "table": "`countrylanguage`",
                      "best_access_path": {
                        "considered_access_paths": [
                          {
                            "access_type": "ref",
                            "index": "PRIMARY",
                            "rows": 4.22318,
                            "cost": 160.894,
                            "chosen": true
                          },
                          {
                            "access_type": "ref",
                            "index": "CountryCode",
                            "rows": 4.22318,
                            "cost": 353.269,
                            "chosen": false
                          },
                          {
                            "rows_to_scan": 984,
                            "filtering_effect": [],
                            "final_filtering_effect": 0.5,
                            "access_type": "scan",
                            "using_join_cache": true,
                            "buffers_needed": 1,
                            "resulting_rows": 492,
                            "cost": 11853.9,
                            "chosen": false
                          }
                        ]
                      },
                      "condition_filtering_pct": 50,
                      "rows_for_plan": 504.67,
                      "cost_for_plan": 186.544,
                      "semijoin_strategy_choice": [
                        {
                          "strategy": "FirstMatch",
                          "recalculate_access_paths_and_cost": {
                            "tables": []
                          },
                          "cost": 186.544,
                          "rows": 239,
                          "chosen": true
                        },
                        {
                          "strategy": "MaterializeLookup",
                          "cost": 199.65,
                          "rows": 239,
                          "duplicate_tables_left": false,
                          "chosen": false
                        },
                        {
                          "strategy": "DuplicatesWeedout",
                          "cost": 261.911,
                          "rows": 239,
                          "duplicate_tables_left": false,
                          "chosen": false
                        }
                      ],
                      "chosen": true
                    }
                  ]
                },
                {
                  "plan_prefix": [],
                  "table": "`countrylanguage`",
                  "best_access_path": {
                    "considered_access_paths": [
                      {
                        "access_type": "ref",
                        "index": "PRIMARY",
                        "usable": false,
                        "chosen": false
                      },
                      {
                        "access_type": "ref",
                        "index": "CountryCode",
                        "usable": false,
                        "chosen": false
                      },
                      {
                        "rows_to_scan": 984,
                        "filtering_effect": [],
                        "final_filtering_effect": 0.5,
                        "access_type": "scan",
                        "resulting_rows": 492,
                        "cost": 99.9,
                        "chosen": true
                      }
                    ]
                  },
                  "condition_filtering_pct": 100,
                  "rows_for_plan": 492,
                  "cost_for_plan": 99.9,
                  "semijoin_strategy_choice": [
                    {
                      "strategy": "MaterializeScan",
                      "choice": "deferred"
                    }
                  ],
                  "rest_of_plan": [
                    {
                      "plan_prefix": [
                        "`countrylanguage`"
                      ],
                      "table": "`country`",
                      "best_access_path": {
                        "considered_access_paths": [
                          {
                            "access_type": "eq_ref",
                            "index": "PRIMARY",
                            "rows": 1,
                            "cost": 172.2,
                            "chosen": true,
                            "cause": "clustered_pk_chosen_by_heuristics"
                          },
                          {
                            "rows_to_scan": 239,
                            "filtering_effect": [],
                            "final_filtering_effect": 1,
                            "access_type": "scan",
                            "using_join_cache": true,
                            "buffers_needed": 1,
                            "resulting_rows": 239,
                            "cost": 11760.6,
                            "chosen": false
                          }
                        ]
                      },
                      "condition_filtering_pct": 100,
                      "rows_for_plan": 492,
                      "cost_for_plan": 272.1,
                      "semijoin_strategy_choice": [
                        {
                          "strategy": "LooseScan",
                          "recalculate_access_paths_and_cost": {
                            "tables": [
                              {
                                "table": "`countrylanguage`",
                                "best_access_path": {
                                  "considered_access_paths": [
                                    {
                                      "access_type": "ref",
                                      "index": "PRIMARY",
                                      "usable": false,
                                      "chosen": false
                                    },
                                    {
                                      "access_type": "ref",
                                      "index": "CountryCode",
                                      "usable": false,
                                      "chosen": false
                                    },
                                    {
                                      "rows_to_scan": 984,
                                      "filtering_effect": [],
                                      "final_filtering_effect": 0.5,
                                      "access_type": "scan",
                                      "resulting_rows": 492,
                                      "cost": 99.9,
                                      "chosen": true
                                    }
                                  ]
                                },
                                "unknown_key_1": {
                                  "searching_loose_scan_index": {
                                    "indexes": [
                                      {
                                        "index": "PRIMARY",
                                        "ref_possible": false,
                                        "covering_scan_possible": false
                                      },
                                      {
                                        "index": "CountryCode",
                                        "ref_possible": false,
                                        "covering_scan_possible": false
                                      }
                                    ]
                                  }
                                }
                              }
                            ]
                          },
                          "chosen": false
                        },
                        {
                          "strategy": "MaterializeScan",
                          "recalculate_access_paths_and_cost": {
                            "tables": [
                              {
                                "table": "`country`",
                                "best_access_path": {
                                  "considered_access_paths": [
                                    {
                                      "access_type": "eq_ref",
                                      "index": "PRIMARY",
                                      "rows": 1,
                                      "cost": 172.2,
                                      "chosen": true,
                                      "cause": "clustered_pk_chosen_by_heuristics"
                                    },
                                    {
                                      "rows_to_scan": 239,
                                      "filtering_effect": [],
                                      "final_filtering_effect": 1,
                                      "access_type": "scan",
                                      "using_join_cache": true,
                                      "buffers_needed": 1,
                                      "resulting_rows": 239,
                                      "cost": 11760.6,
                                      "chosen": false
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "cost": 371.5,
                          "rows": 1,
                          "duplicate_tables_left": true,
                          "chosen": true
                        },
                        {
                          "strategy": "DuplicatesWeedout",
                          "cost": 346.2,
                          "rows": 239,
                          "duplicate_tables_left": false,
                          "chosen": true
                        }
                      ],
                      "pruned_by_cost": true
                    }
                  ]
                },
                {
                  "final_semijoin_strategy": "FirstMatch", // => 最终 semi-join 策略
                  "recalculate_access_paths_and_cost": {
                    "tables": []
                  }
                }
              ]
            },
            {
              "attaching_conditions_to_tables": {
                "original_condition": "((`countrylanguage`.`CountryCode` = `country`.`Code`) and (`countrylanguage`.`IsOfficial` = 1))",
                "attached_conditions_computation": [],
                "attached_conditions_summary": [
                  {
                    "table": "`country`",
                    "attached": null
                  },
                  {
                    "table": "`countrylanguage`",
                    "attached": "((`countrylanguage`.`CountryCode` = `country`.`Code`) and (`countrylanguage`.`IsOfficial` = 1))"
                  }
                ]
              }
            },
            {
              "finalizing_table_conditions": [
                {
                  "table": "`countrylanguage`",
                  "original_table_condition": "((`countrylanguage`.`CountryCode` = `country`.`Code`) and (`countrylanguage`.`IsOfficial` = 1))",
                  "final_table_condition   ": "(`countrylanguage`.`IsOfficial` = 1)"
                }
              ]
            },
            {
              "refine_plan": [
                {
                  "table": "`country`"
                },
                {
                  "table": "`countrylanguage`"
                }
              ]
            }
          ]
        }
      },
      {
        "join_execution": {
          "select#": 1,
          "steps": []
        }
      }
    ]
  }
#+END_SRC

Semi-join 的执行概括来看就是想办法把内层的查询进行去重。在写我们自己的 Semi-join
执行前，我们先学习一下 MySQL 中执行的方式，主要有 4 种，分别是：

1. DuplicateWeedout，使用临时表针对 join 序列中，join 内表产生的重复部分，做消除
   处理；内层子查询的表通过在外层表的 rowid 上建立唯一索引来对重复生成的 country
   行数据做去重。
2. FirstMatch，比较好理解，在选中内部表的第 1 条与外表匹配的记录后，就跳过后续的
   匹配过程，从外层表的下一条记录重新开始，从而也达到了去重的目的。
3. LooseScan，把 inner-tables 中的第一个表，其数据基于索引进行分组，取每组第一条
   数据向后做匹配。
4. Materialize，这个是想法上最直观的，通过将 inner-table 去重，并固化成临时表，
   遍历 outer-table，然后在固化表上去寻找匹配。

*** NOT IN Subquery
NOT IN 子查询通常有两种优化策略：
1. materialization
2. exits

这里 code 是 country 的主键
#+BEGIN_SRC sql :results output :exports both
  explain format=json
  select * from city where countrycode not in (select code from country)\G
#+END_SRC

#+RESULTS:
#+begin_example
,*************************** 1. row ***************************
EXPLAIN: {
  "query_block": {
    "select_id": 1,
    "cost_info": {
      "query_cost": "887.80"
    },
    "nested_loop": [
      {
        "table": {
          "table_name": "city",
          "access_type": "ALL",
          "rows_examined_per_scan": 4035,
          "rows_produced_per_join": 4035,
          "filtered": "100.00",
          "cost_info": {
            "read_cost": "25.00",
            "eval_cost": "403.50",
            "prefix_cost": "428.50",
            "data_read_per_join": "977K"
          },
          "used_columns": [
            "ID",
            "Name",
            "CountryCode",
            "District",
            "Population"
          ]
        }
      },
      {
        "table": {
          "table_name": "<subquery2>",
          "access_type": "eq_ref",
          "key": "<auto_distinct_key>",
          "key_length": "13",
          "ref": [
            "world.city.CountryCode"
          ],
          "rows_examined_per_scan": 1,
          "not_exists": true,
          "attached_condition": "<if>(is_not_null_compl(<subquery2>), <if>(found_match(<subquery2>), false, true), true)",
          "materialized_from_subquery": { // => 采用 materialized 策略
            "using_temporary_table": true,
            "query_block": {
              "table": {
                "table_name": "country",
                "access_type": "index",
                "possible_keys": [
                  "PRIMARY"
                ],
                "key": "c_p",
                "used_key_parts": [
                  "Continent",
                  "Population"
                ],
                "key_length": "5",
                "rows_examined_per_scan": 239,
                "rows_produced_per_join": 239,
                "filtered": "100.00",
                "using_index": true,
                "cost_info": {
                  "read_cost": "7.00",
                  "eval_cost": "23.90",
                  "prefix_cost": "30.90",
                  "data_read_per_join": "225K"
                },
                "used_columns": [
                  "Code"
                ]
              }
            }
          }
        }
      }
    ]
  }
}
#+end_example

我们可以通过 hints 来强制使用 Exits 策略, 通过查看执行计划
  - exists_cost[428.50] < materialize_cost[887.80]
  - 这里是执行的优化器选取策略有问题的场景
#+BEGIN_SRC sql :results output :exports both
  explain format=json
  select * from city where countrycode not in (select /*+ SUBQUERY(INTOEXISTS) */ code from country)\G
#+END_SRC

#+RESULTS:
#+begin_example
,*************************** 1. row ***************************
EXPLAIN: {
  "query_block": {
    "select_id": 1,
    "cost_info": {
      "query_cost": "428.50"
    },
    "table": {
      "table_name": "city",
      "access_type": "ALL",
      "rows_examined_per_scan": 4035,
      "rows_produced_per_join": 4035,
      "filtered": "100.00",
      "cost_info": {
        "read_cost": "25.00",
        "eval_cost": "403.50",
        "prefix_cost": "428.50",
        "data_read_per_join": "977K"
      },
      "used_columns": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "attached_condition": "<in_optimizer>(`world`.`city`.`CountryCode`,<exists>(<primary_index_lookup>(<cache>(`world`.`city`.`CountryCode`) in country on PRIMARY)) is false)",
      "attached_subqueries": [
        {
          "dependent": true,
          "cacheable": false,
          "query_block": {
            "select_id": 2,
            "cost_info": {
              "query_cost": "1.10"
            },
            "table": {
              "table_name": "country",
              "access_type": "unique_subquery",
              "possible_keys": [
                "PRIMARY"
              ],
              "key": "PRIMARY",
              "used_key_parts": [
                "Code"
              ],
              "key_length": "12",
              "ref": [
                "func"
              ],
              "rows_examined_per_scan": 1,
              "rows_produced_per_join": 1,
              "filtered": "100.00",
              "using_index": true,
              "cost_info": {
                "read_cost": "1.00",
                "eval_cost": "0.10",
                "prefix_cost": "1.10",
                "data_read_per_join": "968"
              },
              "used_columns": [
                "Code"
              ]
            }
          }
        }
      ]
    }
  }
}
#+end_example

如果添加 continent 限制条件, 这种子查询会使用二级索引，通常的策略就是
materialize
#+BEGIN_SRC sql :results output :exports both
  explain format=json
  select * from city where countrycode not in (select code from country where continent in ('Asia', 'Europe', 'North America'))\G
#+END_SRC

#+RESULTS:
#+begin_example
,*************************** 1. row ***************************
EXPLAIN: {
  "query_block": {
    "select_id": 1,
    "cost_info": {
      "query_cost": "887.80"
    },
    "nested_loop": [
      {
        "table": {
          "table_name": "city",
          "access_type": "ALL",
          "rows_examined_per_scan": 4035,
          "rows_produced_per_join": 4035,
          "filtered": "100.00",
          "cost_info": {
            "read_cost": "25.00",
            "eval_cost": "403.50",
            "prefix_cost": "428.50",
            "data_read_per_join": "977K"
          },
          "used_columns": [
            "ID",
            "Name",
            "CountryCode",
            "District",
            "Population"
          ]
        }
      },
      {
        "table": {
          "table_name": "<subquery2>",
          "access_type": "eq_ref",
          "key": "<auto_distinct_key>",
          "key_length": "13",
          "ref": [
            "world.city.CountryCode"
          ],
          "rows_examined_per_scan": 1,
          "not_exists": true,
          "attached_condition": "<if>(is_not_null_compl(<subquery2>), <if>(found_match(<subquery2>), false, true), true)",
          "materialized_from_subquery": {
            "using_temporary_table": true,
            "query_block": {
              "table": {
                "table_name": "country",
                "access_type": "index",
                "possible_keys": [
                  "PRIMARY",
                  "c_p"
                ],
                "key": "c_p",
                "used_key_parts": [
                  "Continent",
                  "Population"
                ],
                "key_length": "5",
                "rows_examined_per_scan": 239,
                "rows_produced_per_join": 239,
                "filtered": "100.00",
                "using_index": true,
                "cost_info": {
                  "read_cost": "7.00",
                  "eval_cost": "23.90",
                  "prefix_cost": "30.90",
                  "data_read_per_join": "225K"
                },
                "used_columns": [
                  "Code",
                  "Continent"
                ],
                "attached_condition": "(`world`.`country`.`Continent` in ('Asia','Europe','North America'))"
              }
            }
          }
        }
      }
    ]
  }
}
#+end_example

*** Derived Table
子查询一般不需要 materialization, MySQL 通常是采用 merge 的策略，和视图合并的策
略有点类似

#+BEGIN_SRC sql :exports both :results output
  explain format=json
    select * from
    country, (select * from city where countrycode ='CAN' ) as citytmp
    where country.code=citytmp.countrycode and citytmp.name ='Toronto'\G
#+END_SRC

#+RESULTS:
#+begin_example
,*************************** 1. row ***************************
EXPLAIN: {
  "query_block": {
    "select_id": 1,
    "cost_info": {
      "query_cost": "0.35"
    },
    "nested_loop": [
      {
        "table": {
          "table_name": "country",
          "access_type": "const",
          "possible_keys": [
            "PRIMARY"
          ],
          "key": "PRIMARY",
          "used_key_parts": [
            "Code"
          ],
          "key_length": "12",
          "ref": [
            "const"
          ],
          "rows_examined_per_scan": 1,
          "rows_produced_per_join": 1,
          "filtered": "100.00",
          "cost_info": {
            "read_cost": "0.00",
            "eval_cost": "0.10",
            "prefix_cost": "0.00",
            "data_read_per_join": "968"
          },
          "used_columns": [
            "Code",
            "Name",
            "Continent",
            "Region",
            "SurfaceArea",
            "IndepYear",
            "Population",
            "LifeExpectancy",
            "GNP",
            "GNPOld",
            "LocalName",
            "GovernmentForm",
            "HeadOfState",
            "Capital",
            "Code2"
          ]
        }
      },
      {
        "table": {
          "table_name": "city", //
          "access_type": "ref", // => 从这里可以看出使用了 merge 策略
          "possible_keys": [
            "CountryCode",
            "n"
          ],
          "key": "n",
          "used_key_parts": [
            "Name"
          ],
          "key_length": "140",
          "ref": [
            "const"
          ],
          "rows_examined_per_scan": 1,
          "rows_produced_per_join": 0,
          "filtered": "5.00",
          "index_condition": "(`world`.`city`.`Name` = 'Toronto')",
          "cost_info": {
            "read_cost": "0.25",
            "eval_cost": "0.01",
            "prefix_cost": "0.35",
            "data_read_per_join": "12"
          },
          "used_columns": [
            "ID",
            "Name",
            "CountryCode",
            "District",
            "Population"
          ],
          "attached_condition": "(`world`.`city`.`CountryCode` = 'CAN')"
        }
      }
    ]
  }
}
#+end_example

通过下面的配置可以关闭 merge 策略
#+BEGIN_SRC sql
  set optimizer_switch='derived_merge=off';
#+END_SRC

#+BEGIN_SRC sql :exports both :results output
  set optimizer_switch='derived_merge=off';
  explain format=json
    select * from
    country, (select * from city where countrycode ='CAN' ) as citytmp
    where country.code=citytmp.countrycode and citytmp.name ='Toronto'\G
#+END_SRC

#+RESULTS:
#+begin_example
,*************************** 1. row ***************************
EXPLAIN: {
  "query_block": {
    "select_id": 1,
    "cost_info": {
      "query_cost": "4.67"
    },
    "nested_loop": [
      {
        "table": {
          "table_name": "citytmp",
          "access_type": "ALL",
          "rows_examined_per_scan": 2,
          "rows_produced_per_join": 2,
          "filtered": "100.00",
          "cost_info": {
            "read_cost": "2.52",
            "eval_cost": "0.20",
            "prefix_cost": "2.73",
            "data_read_per_join": "496"
          },
          "used_columns": [
            "ID",
            "Name",
            "CountryCode",
            "District",
            "Population"
          ],
          "materialized_from_subquery": { // => 这里没有使用 merge 策略，而是使用了 materialized
            "using_temporary_table": true,
            "dependent": false,
            "cacheable": true,
            "query_block": {
              "select_id": 2,
              "cost_info": {
                "query_cost": "0.35"
              },
              "table": {
                "table_name": "city",
                "access_type": "ref",
                "possible_keys": [
                  "CountryCode",
                  "n"
                ],
                "key": "n",
                "used_key_parts": [
                  "Name"
                ],
                "key_length": "140",
                "ref": [
                  "const"
                ],
                "rows_examined_per_scan": 1,
                "rows_produced_per_join": 0,
                "filtered": "5.00",
                "index_condition": "(`world`.`city`.`Name` = 'Toronto')",
                "cost_info": {
                  "read_cost": "0.25",
                  "eval_cost": "0.01",
                  "prefix_cost": "0.35",
                  "data_read_per_join": "12"
                },
                "used_columns": [
                  "ID",
                  "Name",
                  "CountryCode",
                  "District",
                  "Population"
                ],
                "attached_condition": "(`world`.`city`.`CountryCode` = 'CAN')"
              }
            }
          }
        }
      },
      {
        "table": {
          "table_name": "country",
          "access_type": "eq_ref",
          "possible_keys": [
            "PRIMARY"
          ],
          "key": "PRIMARY",
          "used_key_parts": [
            "Code"
          ],
          "key_length": "12",
          "ref": [
            "citytmp.CountryCode"
          ],
          "rows_examined_per_scan": 1,
          "rows_produced_per_join": 2,
          "filtered": "100.00",
          "cost_info": {
            "read_cost": "1.75",
            "eval_cost": "0.20",
            "prefix_cost": "4.67",
            "data_read_per_join": "1K"
          },
          "used_columns": [
            "Code",
            "Name",
            "Continent",
            "Region",
            "SurfaceArea",
            "IndepYear",
            "Population",
            "LifeExpectancy",
            "GNP",
            "GNPOld",
            "LocalName",
            "GovernmentForm",
            "HeadOfState",
            "Capital",
            "Code2"
          ]
        }
      }
    ]
  }
}
#+end_example

** CTEs and Views
1. [[https://dev.mysql.com/doc/refman/8.0/en/create-view.html][View]] 使用一种把 SQL 保存下来，以便后续使用
2. [[https://dev.mysql.com/doc/refman/8.0/en/with.html][CTE]] 和 View 类似，只是其生命周期短一些
3. CTE 和 View 的优化策略类似
   - merge, 将定义视图的表转化到其它查询中，这里有一个技巧，可以在 ~explain~ 过后
     通过 ~show warnings~ 查看转化的 SQL
   - materialize, 将查询的结果集存入一个临时表，以供后续的查询使用

#+BEGIN_SRC sql :results output :exports both
  create view v_country_asia as select * from country where continent='Asia';

  explain format=json
  select * from v_country_asia where name='China';
#+END_SRC

#+BEGIN_SRC json
  {
    "query_block": {
      "select_id": 1,
      "cost_info": {
        "query_cost": "23.47"
      },
      "table": {
        "table_name": "country",
        "access_type": "ref",
        "possible_keys": [
          "c_p"
        ],
        "key": "c_p",
        "used_key_parts": [
          "Continent"
        ],
        "key_length": "1",
        "ref": [
          "const"
        ],
        "rows_examined_per_scan": 51,
        "rows_produced_per_join": 5,
        "filtered": "10.00",
        "index_condition": "(`world`.`country`.`Continent` = 'Asia')",
        "cost_info": {
          "read_cost": "18.38",
          "eval_cost": "0.51",
          "prefix_cost": "23.48",
          "data_read_per_join": "4K"
        },
        "used_columns": [
          "Code",
          "Name",
          "Continent",
          "Region",
          "SurfaceArea",
          "IndepYear",
          "Population",
          "LifeExpectancy",
          "GNP",
          "GNPOld",
          "LocalName",
          "GovernmentForm",
          "HeadOfState",
          "Capital",
          "Code2"
        ],
        "attached_condition": "(`world`.`country`.`Name` = 'China')"
      }
    }
  }
#+END_SRC

通过 ~show warnings~ 查询转化后的 SQL 可以看出 View 在查询中被 merge 了
#+BEGIN_SRC sql
  select
    `world`.`country`.`Code` as `Code`,
    `world`.`country`.`Name` as `Name`,
    `world`.`country`.`Continent` as `Continent`,
    `world`.`country`.`Region` as `Region`,
    `world`.`country`.`SurfaceArea` as `SurfaceArea`,
    `world`.`country`.`IndepYear` as `IndepYear`,
    `world`.`country`.`Population` as `Population`,
    `world`.`country`.`LifeExpectancy` as `LifeExpectancy`,
    `world`.`country`.`GNP` as `GNP`,
    `world`.`country`.`GNPOld` as `GNPOld`,
    `world`.`country`.`LocalName` as `LocalName`,
    `world`.`country`.`GovernmentForm` as `GovernmentForm`,
    `world`.`country`.`HeadOfState` as `HeadOfState`,
    `world`.`country`.`Capital` as `Capital`,
    `world`.`country`.`Code2` as `Code2`
  from
    `world`.`country`
  where ((`world`.`country`.`Continent` = 'Asia')
    and (`world`.`country`.`Name` = 'China'))
#+END_SRC

这里也举例说明一种不能被 merge 的场景
#+BEGIN_SRC sql
  create view v_countrys_per_continent as select continent, count(*) as count from country group by continent;

  explain format=json
  select * from v_countrys_per_continent where continent='Asia';
#+END_SRC

explain 结果
#+BEGIN_SRC json
  {
    "query_block": {
      "select_id": 1,
      "cost_info": {
        "query_cost": "1.00"
      },
      "table": {
        "table_name": "v_countrys_per_continent",
        "access_type": "system",
        "rows_examined_per_scan": 1,
        "rows_produced_per_join": 1,
        "filtered": "100.00",
        "cost_info": {
          "read_cost": "0.00",
          "eval_cost": "0.10",
          "prefix_cost": "0.00",
          "data_read_per_join": "16"
        },
        "used_columns": [
          "continent",
          "count"
        ],
        "materialized_from_subquery": {
          "using_temporary_table": true,
          "dependent": false,
          "cacheable": true,
          "query_block": {
            "select_id": 2,
            "cost_info": {
              "query_cost": "5.37"
            },
            "grouping_operation": {
              "using_filesort": false,
              "table": {
                "table_name": "country",
                "access_type": "ref",
                "possible_keys": [
                  "c_p",
                  "p_c"
                ],
                "key": "c_p",
                "used_key_parts": [
                  "Continent"
                ],
                "key_length": "1",
                "ref": [
                  "const"
                ],
                "rows_examined_per_scan": 51,
                "rows_produced_per_join": 51,
                "filtered": "100.00",
                "using_index": true,
                "cost_info": {
                  "read_cost": "0.28",
                  "eval_cost": "5.10",
                  "prefix_cost": "5.38",
                  "data_read_per_join": "48K"
                },
                "used_columns": [
                  "Continent"
                ],
                "attached_condition": "(`world`.`country`.`Continent` = 'Asia')"
              }
            }
          }
        }
      }
    }
  }
#+END_SRC

可以看出这里使用了 materialize 策略, 直接固化结果
#+BEGIN_SRC text
  mysql> show warnings\G
  ,*************************** 1. row ***************************
    Level: Note
     Code: 1003
  Message: /* select#1 */ select 'Asia' AS `continent`,'51' AS `count` from dual
  1 row in set (0.00 sec)
#+END_SRC

** Join
MySQL 的 Join 使用 [[https://dev.mysql.com/doc/refman/8.0/en/nested-loop-joins.html][nested-loop]] 策略, 以下面 3 个表 Join 的例子
1. 先选定驱动表, 这里是 country
2. 通过过滤条件 ~`world`.`country`.`Continent` = 'Asia'~ 选出待查询的数据，接着
   再处理被驱动表 city
3. city 中匹配出的结果集再处理 countrylanguage 表, 最后还会应用过滤条件
   ~`world`.`countrylanguage`.`IsOfficial` = 'T'~
#+BEGIN_SRC sql :results output :exports both
  explain format=json
  select
    country.name as country,
    city.name as capital,
    language
  from
    city
    inner join country on country.capital = city.id
    inner join countrylanguage on countrylanguage.countrycode = country.code
  where
    country.continent = 'Asia'
    and countrylanguage.isofficial = 'T'\G
#+END_SRC

#+RESULTS:
#+begin_example
,*************************** 1. row ***************************
EXPLAIN: {
  "query_block": {
    "select_id": 1,
    "cost_info": {
      "query_cost": "75.66"
    },
    "nested_loop": [
      {
        "table": {
          "table_name": "country",
          "access_type": "ref",
          "possible_keys": [
            "PRIMARY",
            "c_p"
          ],
          "key": "c_p",
          "used_key_parts": [
            "Continent"
          ],
          "key_length": "1",
          "ref": [
            "const"
          ],
          "rows_examined_per_scan": 51,
          "rows_produced_per_join": 51,
          "filtered": "100.00",
          "index_condition": "(`world`.`country`.`Continent` = 'Asia')",
          "cost_info": {
            "read_cost": "18.38",
            "eval_cost": "5.10",
            "prefix_cost": "23.48",
            "data_read_per_join": "48K"
          },
          "used_columns": [
            "Code",
            "Name",
            "Continent",
            "Capital"
          ],
          "attached_condition": "(`world`.`country`.`Capital` is not null)"
        }
      },
      {
        "table": {
          "table_name": "city",
          "access_type": "eq_ref",
          "possible_keys": [
            "PRIMARY"
          ],
          "key": "PRIMARY",
          "used_key_parts": [
            "ID"
          ],
          "key_length": "4",
          "ref": [
            "world.country.Capital"
          ],
          "rows_examined_per_scan": 1,
          "rows_produced_per_join": 51,
          "filtered": "100.00",
          "cost_info": {
            "read_cost": "12.75",
            "eval_cost": "5.10",
            "prefix_cost": "41.33",
            "data_read_per_join": "12K"
          },
          "used_columns": [
            "ID",
            "Name"
          ]
        }
      },
      {
        "table": {
          "table_name": "countrylanguage",
          "access_type": "ref",
          "possible_keys": [
            "PRIMARY",
            "CountryCode"
          ],
          "key": "PRIMARY",
          "used_key_parts": [
            "CountryCode"
          ],
          "key_length": "12",
          "ref": [
            "world.country.Code"
          ],
          "rows_examined_per_scan": 4,
          "rows_produced_per_join": 107,
          "filtered": "50.00",
          "cost_info": {
            "read_cost": "12.79",
            "eval_cost": "10.77",
            "prefix_cost": "75.66",
            "data_read_per_join": "15K"
          },
          "used_columns": [
            "CountryCode",
            "Language",
            "IsOfficial"
          ],
          "attached_condition": "(`world`.`countrylanguage`.`IsOfficial` = 'T')"
        }
      }
    ]
  }
}
#+end_example

附录 nested-loop 实现算法

[[file:../static/image/2023/0225/214200.png]]

MySQL 支持以下三种 [[https://dev.mysql.com/doc/refman/8.0/en/join.html][Join]] 类型
- INNER JOIN
- LEFT JOIN
- RIGHT JOIN

** Aggregation
*** GROUP BY
**** Loose index scan
松散索引扫描 [[https://dev.mysql.com/doc/refman/8.0/en/group-by-optimization.html#loose-index-scan][loose-index-scan]]
[[file:../static/image/2023/0227/103516.png]]

#+BEGIN_SRC sql :results output :exports both
  explain format=json
    select count(*) as c, continent from country group by continent\G
#+END_SRC

#+RESULTS:
#+begin_example
,*************************** 1. row ***************************
EXPLAIN: {
  "query_block": {
    "select_id": 1,
    "cost_info": {
      "query_cost": "25.65"
    },
    "grouping_operation": {
      "using_filesort": false,
      "table": {
        "table_name": "country",
        "access_type": "index",
        "possible_keys": [
          "c_p",
          "p_c",
          "c"
        ],
        "key": "c",
        "used_key_parts": [
          "Continent"
        ],
        "key_length": "1",
        "rows_examined_per_scan": 239,
        "rows_produced_per_join": 239,
        "filtered": "100.00",
        "using_index": true,
        "cost_info": {
          "read_cost": "1.75",
          "eval_cost": "23.90",
          "prefix_cost": "25.65",
          "data_read_per_join": "225K"
        },
        "used_columns": [
          "Code",
          "Continent"
        ]
      }
    }
  }
}
#+end_example

**** Filtering rows
[[file:../static/image/2023/0227/103523.png]]
#+BEGIN_SRC sql :results output :exports both
  explain format=json
    select count(*) as c, continent from country where population > 500000000 group by continent\G
#+END_SRC

#+RESULTS:
#+begin_example
,*************************** 1. row ***************************
EXPLAIN: {
  "query_block": {
    "select_id": 1,
    "cost_info": {
      "query_cost": "25.65"
    },
    "grouping_operation": {
      "using_filesort": false,
      "table": {
        "table_name": "country",
        "access_type": "index",
        "possible_keys": [
          "c"
        ],
        "key": "c",
        "used_key_parts": [
          "Continent"
        ],
        "key_length": "1",
        "rows_examined_per_scan": 239,
        "rows_produced_per_join": 79,
        "filtered": "33.33",
        "cost_info": {
          "read_cost": "17.68",
          "eval_cost": "7.97",
          "prefix_cost": "25.65",
          "data_read_per_join": "75K"
        },
        "used_columns": [
          "Code",
          "Continent",
          "Population"
        ],
        "attached_condition": "(`world`.`country`.`Population` > 500000000)"
      }
    }
  }
}
#+end_example

**** Filtering and order
[[file:../static/image/2023/0227/103715.png]]

#+BEGIN_SRC sql :results output :exports both
  explain format=json
    select count(*) as c, continent from country where continent = 'Aisa' group by continent\G
#+END_SRC

#+RESULTS:
#+begin_example
,*************************** 1. row ***************************
EXPLAIN: {
  "query_block": {
    "select_id": 1,
    "cost_info": {
      "query_cost": "0.35"
    },
    "grouping_operation": {
      "using_filesort": false,
      "table": {
        "table_name": "country",
        "access_type": "ref",
        "possible_keys": [
          "c"
        ],
        "key": "c",
        "used_key_parts": [
          "Continent"
        ],
        "key_length": "1",
        "ref": [
          "const"
        ],
        "rows_examined_per_scan": 1,
        "rows_produced_per_join": 1,
        "filtered": "100.00",
        "using_index": true, // => 使用索引过滤
        "cost_info": {
          "read_cost": "0.25",
          "eval_cost": "0.10",
          "prefix_cost": "0.35",
          "data_read_per_join": "968"
        },
        "used_columns": [
          "Continent"
        ],
        "attached_condition": "(`world`.`country`.`Continent` = 'Aisa')"
      }
    }
  }
}
#+end_example
*** UNION
*** UNION ALL

** Sorting

** Partitioning

** Query Rewrite

** Invisible Indexes

** Profiling Queries

** JSON and Generated Columns

** Character Sets
