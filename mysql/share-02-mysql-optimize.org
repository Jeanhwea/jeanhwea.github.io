#+TITLE: MySQL优化器实现原理探索
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2023-02-22 Wed 11:36:43>
#+HTML_LINK_UP: ../readme.html
#+HTML_LINK_HOME: ../index.html
#+SETUPFILE: ~/.emacs.d/site-lisp/org-html-themes/setup/theme-readtheorg-local.setup
#+PROPERTY: header-args:sql :dbhost 127.0.0.1 :database world :engine mysql :dbuser root :exports both
#+STARTUP: indent cache num inlineimages


* 引言 MySQL Architecture
参考 [[https://dev.mysql.com/doc/dev/mysql-server/8.0.30/PAGE_SQL_EXECUTION.html][执行流程]]

[[file:../static/image/2023/0222/193853.png]]

#+BEGIN_EXAMPLE
  T@8: | | | >lex_start => 词法解析
  T@8: | | | | >LEX::new_top_level_query
  T@8: | | | | | >*LEX::new_query
  T@8: | | | | | | outer_field: creating ctx 0x11e0139e0
  T@8: | | | | | | outer_field: ctx 0x11e0139e0 <-> SL# 1
  T@8: | | | | | <*LEX::new_query
  T@8: | | | | <LEX::new_top_level_query
  T@8: | | | <lex_start

  T@8: | | | >parse_sql => 语法解析
  T@8: | | | | >*Query_block::add_table_to_list
  T@8: | | | | | >*MEM_ROOT::AllocSlow
  T@8: | | | | | | enter: root: 0x11d80ca40
  T@8: | | | | | | >*MEM_ROOT::AllocBlock
  T@8: | | | | | | | >char *PFS_instr_name::str
  T@8: | | | | | | | <char *PFS_instr_name::str
  T@8: | | | | | | <*MEM_ROOT::AllocBlock
  T@8: | | | | | <*MEM_ROOT::AllocSlow
  T@8: | | | | <*Query_block::add_table_to_list
  T@8: | | | | >Query_block::add_joined_table
  T@8: | | | | <Query_block::add_joined_table
  T@8: | | | <parse_sql

  T@8: | | | >mysql_execute_command
  T@8: | | | | >Diagnostics_area::reset_diagnostics_area

  T@8: | | | | >open_temporary_tables
  T@8: | | | | | >open_temporary_table
  T@8: | | | | | | enter: table: 'employees'.'dept_manager'
  T@8: | | | | | <open_temporary_table
  T@8: | | | | <open_temporary_tables
  T@8: | | | | >bool Sql_cmd_dml::execute => DML 执行方法
  T@8: | | | | | >bool Sql_cmd_dml::prepare
  T@8: | | | | | | >check_table_access
  T@8: | | | | | | | info: table: dept_manager derived: 0  view: 0
  T@8: | | | | | | | >check_access
  T@8: | | | | | | | | enter: db: employees  want_access: 1  master_access: 2147483647
  T@8: | | | | | | | | THD::enter_stage: 'checking permissions' /Users/bytedance/code/jeanhwea/mysql-server/sql/auth/sql_authorization.cc:2147

  T@8: | | | | | >Query_expression::optimize => 优化器
  T@8: | | | | | | >Query_block::optimize
  T@8: | | | | | | | >JOIN::optimize
  T@8: | | | | | | | | THD::enter_stage: 'optimizing' /Users/bytedance/code/jeanhwea/mysql-server/sql/sql_optimizer.cc:296

  T@8: | | | | | | | | | opt: (null): ending struct
  T@8: | | | | | | | | | opt: rows_estimation: ending struct
  T@8: | | | | | | | | | opt: (null): ending struct
  T@8: | | | | | | | | | >Optimize_table_order::choose_table_order
  T@8: | | | | | | | | | | >Query_block::reset_nj_counters
  T@8: | | | | | | | | | | <Query_block::reset_nj_counters
  T@8: | | | | | | | | | | opt: (null): starting struct
  T@8: | | | | | | | | | | opt: considered_execution_plans: starting struct
  T@8: | | | | | | | | | | >Optimize_table_order::greedy_search
  T@8: | | | | | | | | | | | >Optimize_table_order::best_extension_by_limited_search

  T@8: | | | | | | | | | | | | <Optimize_table_order::best_access_path
  T@8: | | | | | | | | | | | | opt: condition_filtering_pct: 100
  T@8: | | | | | | | | | | | | opt: rows_for_plan: 24
  T@8: | | | | | | | | | | | | opt: cost_for_plan: 3.4
  T@8: | | | | | | | | | | | | opt: sort_cost: 24
  T@8: | | | | | | | | | | | | opt: new_cost_for_plan: 27.4
  T@8: | | | | | | | | | | | | opt: chosen: 1
  T@8: | | | | | | | | | | | | opt: (null): ending struct
  T@8: | | | | | | | | | | | <Optimize_table_order::best_extension_by_limited_search
  T@8: | | | | | | | | | | <Optimize_table_order::greedy_search

  T@8: | | | | | | | <JOIN::optimize
  T@8: | | | | | | <Query_block::optimize
  T@8: | | | | | <Query_expression::optimize
  T@8: | | | | | >Query_expression::execute => 执行 SQL
  T@8: | | | | | | THD::enter_stage: 'executing' /Users/bytedance/code/jeanhwea/mysql-server/sql/sql_union.cc:1186
  T@8: | | | | | | >PROFILING::status_change
  T@8: | | | | | | <PROFILING::status_change
  T@8: | | | | | | opt: (null): starting struct
  T@8: | | | | | | opt: join_execution: starting struct
  T@8: | | | | | | opt: select#: 1
  T@8: | | | | | | opt: steps: starting struct
  T@8: | | | | | | >THD::send_result_metadata
  T@8: | | | | | | | >bool Protocol_classic::start_result_metadata
  T@8: | | | | | | | | info: num_cols 2, flags 5
  T@8: | | | | | | | | net write: Memory: 0x17131d03f  Bytes: (1)

  T@8: | | <dispatch_sql_command
  T@8: | | info: query ready
  T@8: | | >THD::send_statement_status
  T@8: | | | >bool Protocol_classic::send_eof
  T@8: | | | | >net_send_ok
  T@8: | | | | | info: affected_rows: 0  id: 0  status: 2  warning_count: 0
  T@8: | | | | | net write: Memory: 0x17132032e  Bytes: (7)
  T@8: | | | | | >vio_is_blocking
  T@8: | | | | | <vio_is_blocking
#+END_EXAMPLE

* 工具 Explain vs Optimize Trace
** Explain
Explain 可以看出简要的执行计划

#+BEGIN_SRC sql :results output :exports both
  explain format=json select emp_no from employees where emp_no < 11111\G
#+END_SRC

#+begin_example
,*************************** 1. row ***************************
EXPLAIN: {
  "query_block": {
    "select_id": 1,
    "cost_info": {
      "query_cost": "224.08" // => cost值
    },
    "table": {
      "table_name": "employees",
      "access_type": "range", // 范围扫描
      "possible_keys": [
        "PRIMARY"
      ],
      "key": "PRIMARY", // 命中主键
      "used_key_parts": [
        "emp_no"
      ],
      "key_length": "4",
      "rows_examined_per_scan": 1110, // 需要扫描 1110 行数据
      "rows_produced_per_join": 1110,
      "filtered": "100.00",
      "using_index": true,
      "cost_info": {
        "read_cost": "113.08",
        "eval_cost": "111.00",
        "prefix_cost": "224.08",
        "data_read_per_join": "147K"
      },
      "used_columns": [
        "emp_no"
      ],
      "attached_condition": "(`employees`.`employees`.`emp_no` < 11111)"
    }
  }
}
#+end_example

** Optimize Trace
Optimize Trace 工具使用步骤
#+BEGIN_SRC sql :results output
  # 开启 trace
  set optimizer_trace="enabled=on";

  # 执行 Query
  select emp_no from employees where emp_no < 11111;

  # Trace 日志表结构
  mysql> desc information_schema.optimizer_trace;
  +-----------------------------------+----------------+------+-----+---------+-------+
  | Field                             | Type           | Null | Key | Default | Extra |
  +-----------------------------------+----------------+------+-----+---------+-------+
  | QUERY                             | varchar(65535) | NO   |     |         |       |
  | TRACE                             | varchar(65535) | NO   |     |         |       |
  | MISSING_BYTES_BEYOND_MAX_MEM_SIZE | int            | NO   |     |         |       |
  | INSUFFICIENT_PRIVILEGES           | tinyint(1)     | NO   |     |         |       |
  +-----------------------------------+----------------+------+-----+---------+-------+
  4 rows in set (0.03 sec)

  # 查看结果
  select * from information_schema.optimizer_trace\G
  select trace from information_schema.optimizer_trace\G
#+END_SRC

#+BEGIN_EXAMPLE
  QUERY: select emp_no from employees where emp_no < 11111
  TRACE: {
    "steps": [
      {
        "join_preparation": {
          "select#": 1,
          "steps": [
            {
              "expanded_query": "/* select#1 */ select `employees`.`emp_no` AS `emp_no` from `employees` where (`employees`.`emp_no` < 11111)"
            }
          ]
        }
      },
      {
        "join_optimization": {
          "select#": 1,
          "steps": [
            {
              "condition_processing": {
                "condition": "WHERE",
                "original_condition": "(`employees`.`emp_no` < 11111)",
                "steps": [
                  {
                    "transformation": "equality_propagation",
                    "resulting_condition": "(`employees`.`emp_no` < 11111)"
                  },
                  {
                    "transformation": "constant_propagation",
                    "resulting_condition": "(`employees`.`emp_no` < 11111)"
                  },
                  {
                    "transformation": "trivial_condition_removal",
                    "resulting_condition": "(`employees`.`emp_no` < 11111)"
                  }
                ]
              }
            },
            {
              "substitute_generated_columns": {
              }
            },
            {
              "table_dependencies": [
                {
                  "table": "`employees`",
                  "row_may_be_null": false,
                  "map_bit": 0,
                  "depends_on_map_bits": [
                  ]
                }
              ]
            },
            {
              "ref_optimizer_key_uses": [
              ]
            },
            {
              "rows_estimation": [
                {
                  "table": "`employees`",
                  "range_analysis": {
                    "table_scan": {
                      "rows": 299556,
                      "cost": 30874.9
                    },
                    "potential_range_indexes": [
                      {
                        "index": "PRIMARY",
                        "usable": true,
                        "key_parts": [
                          "emp_no"
                        ]
                      }
                    ],
                    "best_covering_index_scan": {
                      "index": "PRIMARY",
                      "cost": 30245.1,
                      "chosen": true
                    },
                    "setup_range_conditions": [
                    ],
                    "group_index_range": {
                      "chosen": false,
                      "cause": "not_group_by_or_distinct"
                    },
                    "skip_scan_range": {
                      "potential_skip_scan_indexes": [
                        {
                          "index": "PRIMARY",
                          "usable": false,
                          "cause": "prefix_not_const_equality"
                        }
                      ]
                    },
                    "analyzing_range_alternatives": { => 范围扫描分析参数
                      "range_scan_alternatives": [
                        {
                          "index": "PRIMARY",
                          "ranges": [
                            "emp_no < 11111"
                          ],
                          "index_dives_for_eq_ranges": true,
                          "rowid_ordered": true,
                          "using_mrr": false,
                          "index_only": true,
                          "in_memory": 0.01693,
                          "rows": 1110,
                          "cost": 113.084,
                          "chosen": true
                        }
                      ],
                      "analyzing_roworder_intersect": {
                        "usable": false,
                        "cause": "too_few_roworder_scans"
                      }
                    },
                    "chosen_range_access_summary": {
                      "range_access_plan": {
                        "type": "range_scan",
                        "index": "PRIMARY",
                        "rows": 1110,
                        "ranges": [
                          "emp_no < 11111"
                        ]
                      },
                      "rows_for_plan": 1110,
                      "cost_for_plan": 113.084,
                      "chosen": true
                    }
                  }
                }
              ]
            },
            {
              "considered_execution_plans": [
                {
                  "plan_prefix": [
                  ],
                  "table": "`employees`",
                  "best_access_path": {
                    "considered_access_paths": [
                      {
                        "rows_to_scan": 1110,
                        "access_type": "range",
                        "range_details": {
                          "used_index": "PRIMARY"
                        },
                        "resulting_rows": 1110,
                        "cost": 224.084,
                        "chosen": true
                      }
                    ]
                  },
                  "condition_filtering_pct": 100,
                  "rows_for_plan": 1110,
                  "cost_for_plan": 224.084,
                  "chosen": true
                }
              ]
            },
            {
              "attaching_conditions_to_tables": {
                "original_condition": "(`employees`.`emp_no` < 11111)",
                "attached_conditions_computation": [
                ],
                "attached_conditions_summary": [
                  {
                    "table": "`employees`",
                    "attached": "(`employees`.`emp_no` < 11111)"
                  }
                ]
              }
            },
            {
              "finalizing_table_conditions": [
                {
                  "table": "`employees`",
                  "original_table_condition": "(`employees`.`emp_no` < 11111)",
                  "final_table_condition   ": "(`employees`.`emp_no` < 11111)"
                }
              ]
            },
            {
              "refine_plan": [
                {
                  "table": "`employees`"
                }
              ]
            }
          ]
        }
      },
      {
        "join_execution": {
          "select#": 1,
          "steps": [
          ]
        }
      }
    ]
  }
  MISSING_BYTES_BEYOND_MAX_MEM_SIZE: 0
            INSUFFICIENT_PRIVILEGES: 0
  1 row in set (0.01 sec)
#+END_EXAMPLE

* 主题 Topic
** Logical Transformations
*** 前置说明
Transformation 可以理解对输入的 Query 字符串进行转化，我们以例子进行分析
#+BEGIN_SRC sql
  select * from country where population > 5000000 and continent = 'Asia' and 1 = 1;
#+END_SRC

Trace 的日志的结果
#+BEGIN_SRC json
  {
    "steps": [
      {
        "join_preparation": {
          "select#": 1,
          "steps": [
            {
              "expanded_query": "/* select#1 */ select `country`.`Code` AS `Code`,`country`.`Name` AS `Name`,`country`.`Continent` AS `Continent`,`country`.`Region` AS `Region`,`country`.`SurfaceArea` AS `SurfaceArea`,`country`.`IndepYear` AS `IndepYear`,`country`.`Population` AS `Population`,`country`.`LifeExpectancy` AS `LifeExpectancy`,`country`.`GNP` AS `GNP`,`country`.`GNPOld` AS `GNPOld`,`country`.`LocalName` AS `LocalName`,`country`.`GovernmentForm` AS `GovernmentForm`,`country`.`HeadOfState` AS `HeadOfState`,`country`.`Capital` AS `Capital`,`country`.`Code2` AS `Code2` from `country` where ((`country`.`Population` > 5000000) and (`country`.`Continent` = 'Asia'))"
            }
          ]
        }
      },
      {
        "join_optimization": {
          "select#": 1,
          "steps": [
            {
              "condition_processing": {
                "condition": "WHERE",
                "original_condition": "((`country`.`Population` > 5000000) and (`country`.`Continent` = 'Asia'))",
                "steps": [
                  {
                    "transformation": "equality_propagation",
                    "resulting_condition": "((`country`.`Population` > 5000000) and multiple equal('Asia', `country`.`Continent`))"
                  },
                  {
                    "transformation": "constant_propagation",
                    "resulting_condition": "((`country`.`Population` > 5000000) and multiple equal('Asia', `country`.`Continent`))"
                  },
                  {
                    "transformation": "trivial_condition_removal",
                    "resulting_condition": "((`country`.`Population` > 5000000) and multiple equal('Asia', `country`.`Continent`))"
                  }
                ]
              }
            },
            {
              "substitute_generated_columns": {
              }
            },
            {
              "table_dependencies": [
                {
                  "table": "`country`",
                  "row_may_be_null": false,
                  "map_bit": 0,
                  "depends_on_map_bits": [
                  ]
                }
              ]
            },
            {
              "ref_optimizer_key_uses": [
              ]
            },
            {
              "rows_estimation": [
                {
                  "table": "`country`",
                  "table_scan": {
                    "rows": 239,
                    "cost": 1.75
                  }
                }
              ]
            },
            {
              "considered_execution_plans": [
                {
                  "plan_prefix": [
                  ],
                  "table": "`country`",
                  "best_access_path": {
                    "considered_access_paths": [
                      {
                        "rows_to_scan": 239,
                        "access_type": "scan",
                        "resulting_rows": 239,
                        "cost": 25.65,
                        "chosen": true
                      }
                    ]
                  },
                  "condition_filtering_pct": 100,
                  "rows_for_plan": 239,
                  "cost_for_plan": 25.65,
                  "chosen": true
                }
              ]
            },
            {
              "attaching_conditions_to_tables": {
                "original_condition": "((`country`.`Continent` = 'Asia') and (`country`.`Population` > 5000000))",
                "attached_conditions_computation": [
                ],
                "attached_conditions_summary": [
                  {
                    "table": "`country`",
                    "attached": "((`country`.`Continent` = 'Asia') and (`country`.`Population` > 5000000))"
                  }
                ]
              }
            },
            {
              "finalizing_table_conditions": [
                {
                  "table": "`country`",
                  "original_table_condition": "((`country`.`Continent` = 'Asia') and (`country`.`Population` > 5000000))",
                  "final_table_condition   ": "((`country`.`Continent` = 'Asia') and (`country`.`Population` > 5000000))"
                }
              ]
            },
            {
              "refine_plan": [
                {
                  "table": "`country`"
                }
              ]
            }
          ]
        }
      },
      {
        "join_execution": {
          "select#": 1,
          "steps": [
          ]
        }
      }
    ]
  }
#+END_SRC

这三次的转换分别是
  - equality_propagation 等值条件句转换
  - constant_propagation 常量条件句转换
  - trivial_condition_removal 无效条件移除的转换，该例子将 ~1 = 1~ 永真表达式剔除了
#+BEGIN_SRC json
  "steps": [
    {
      "transformation": "equality_propagation",
      "resulting_condition": "((`country`.`Population` > 5000000) and multiple equal('Asia', `country`.`Continent`))"
    },
    {
      "transformation": "constant_propagation",
      "resulting_condition": "((`country`.`Population` > 5000000) and multiple equal('Asia', `country`.`Continent`))"
    },
    {
      "transformation": "trivial_condition_removal",
      "resulting_condition": "((`country`.`Population` > 5000000) and multiple equal('Asia', `country`.`Continent`))"
    }
  ]
#+END_SRC

Transformation 过后生成的结果 expanded_query 如下
#+BEGIN_SRC sql
  /* select#1 */
  select
    `country`.`Code` as `Code`,
    `country`.`Name` as `Name`,
    `country`.`Continent` as `Continent`,
    `country`.`Region` as `Region`,
    `country`.`SurfaceArea` as `SurfaceArea`,
    `country`.`IndepYear` as `IndepYear`,
    `country`.`Population` as `Population`,
    `country`.`LifeExpectancy` as `LifeExpectancy`,
    `country`.`GNP` as `GNP`,
    `country`.`GNPOld` as `GNPOld`,
    `country`.`LocalName` as `LocalName`,
    `country`.`GovernmentForm` as `GovernmentForm`,
    `country`.`HeadOfState` as `HeadOfState`,
    `country`.`Capital` as `Capital`,
    `country`.`Code2` as `Code2`
  from
    `country`
  where ((`country`.`Population` > 5000000)
    and (`country`.`Continent` = 'Asia'))
#+END_SRC

*** 主键相关
#+BEGIN_SRC sql
  -- 命中主键
  select * from country where code = 'CAN';
  -- 未命中主键
  select * from country where code = 'XYZ';
#+END_SRC
[[file:../static/image/2023/0223/111928.png]]

*** 其它类型
永假式优化
#+BEGIN_SRC sql
  select * from country where code = 'CAN' and 1 = 0;
#+END_SRC

#+BEGIN_SRC sql
  /* select#1 */
  select
    `country`.`Code` as `Code`,
    `country`.`Name` as `Name`,
    `country`.`Continent` as `Continent`,
    `country`.`Region` as `Region`,
    `country`.`SurfaceArea` as `SurfaceArea`,
    `country`.`IndepYear` as `IndepYear`,
    `country`.`Population` as `Population`,
    `country`.`LifeExpectancy` as `LifeExpectancy`,
    `country`.`GNP` as `GNP`,
    `country`.`GNPOld` as `GNPOld`,
    `country`.`LocalName` as `LocalName`,
    `country`.`GovernmentForm` as `GovernmentForm`,
    `country`.`HeadOfState` as `HeadOfState`,
    `country`.`Capital` as `Capital`,
    `country`.`Code2` as `Code2`
  from
    `country`
  where
    false
#+END_SRC

嵌入式 join 的转化
#+BEGIN_SRC sql
  select
    city.*
  from
    city,
    (
      select
        ,*
      from
        country
      where
        continent = 'Asia') as country
  where
    country.code = City.countryCode
    and country.population > 5000000;
#+END_SRC

#+BEGIN_SRC json
  {
    "join_preparation": {
      "select#": 1,
      "steps": [
        {
          "join_preparation": {
            "select#": 2,
            "steps": [
              {
                "expanded_query": "/* select#2 */ select `country`.`Code` AS `Code`,`country`.`Name` AS `Name`,`country`.`Continent` AS `Continent`,`country`.`Region` AS `Region`,`country`.`SurfaceArea` AS `SurfaceArea`,`country`.`IndepYear` AS `IndepYear`,`country`.`Population` AS `Population`,`country`.`LifeExpectancy` AS `LifeExpectancy`,`country`.`GNP` AS `GNP`,`country`.`GNPOld` AS `GNPOld`,`country`.`LocalName` AS `LocalName`,`country`.`GovernmentForm` AS `GovernmentForm`,`country`.`HeadOfState` AS `HeadOfState`,`country`.`Capital` AS `Capital`,`country`.`Code2` AS `Code2` from `country` where (`country`.`Continent` = 'Asia')"
                // select
                //   `country`.`Code` as `Code`,
                //   `country`.`Name` as `Name`,
                //   `country`.`Continent` as `Continent`,
                //   `country`.`Region` as `Region`,
                //   `country`.`SurfaceArea` as `SurfaceArea`,
                //   `country`.`IndepYear` as `IndepYear`,
                //   `country`.`Population` as `Population`,
                //   `country`.`LifeExpectancy` as `LifeExpectancy`,
                //   `country`.`GNP` as `GNP`,
                //   `country`.`GNPOld` as `GNPOld`,
                //   `country`.`LocalName` as `LocalName`,
                //   `country`.`GovernmentForm` as `GovernmentForm`,
                //   `country`.`HeadOfState` as `HeadOfState`,
                //   `country`.`Capital` as `Capital`,
                //   `country`.`Code2` as `Code2`
                // from
                //   `country`
                // where (`country`.`Continent` = 'Asia')
              }
            ]
          }
        },
        {
          "derived": {
            "table": "`` `country`",
            "select#": 2,
            "merged": true
          }
        },
        {
          "expanded_query": "/* select#1 */ select `city`.`ID` AS `ID`,`city`.`Name` AS `Name`,`city`.`CountryCode` AS `CountryCode`,`city`.`District` AS `District`,`city`.`Population` AS `Population` from `city` join (`country`) on((`country`.`Continent` = 'Asia')) where ((`country`.`Code` = `city`.`CountryCode`) and (`country`.`Population` > 5000000))"
          // select
          //   `city`.`ID` as `ID`,
          //   `city`.`Name` as `Name`,
          //   `city`.`CountryCode` as `CountryCode`,
          //   `city`.`District` as `District`,
          //   `city`.`Population` as `Population`
          // from
          //   `city`
          //   join (`country`) on (`country`.`Continent` = 'Asia')
          // where ((`country`.`Code` = `city`.`CountryCode`)
          //   and (`country`.`Population` > 5000000))
        },
        {
          "transformations_to_nested_joins": {
            "transformations": [
              "JOIN_condition_to_WHERE",
              "parenthesis_removal"
            ],
            "expanded_query": "/* select#1 */ select `city`.`ID` AS `ID`,`city`.`Name` AS `Name`,`city`.`CountryCode` AS `CountryCode`,`city`.`District` AS `District`,`city`.`Population` AS `Population` from `city` join `country` where ((`country`.`Code` = `city`.`CountryCode`) and (`country`.`Population` > 5000000) and (`country`.`Continent` = 'Asia'))"
            // select
            //   `city`.`ID` as `ID`,
            //   `city`.`Name` as `Name`,
            //   `city`.`CountryCode` as `CountryCode`,
            //   `city`.`District` as `District`,
            //   `city`.`Population` as `Population`
            // from
            //   `city`
            //   join `country`
            // where ((`country`.`Code` = `city`.`CountryCode`)
            //   and (`country`.`Population` > 5000000)
            //   and (`country`.`Continent` = 'Asia'))
          }
        }
      ]
    }
  }
#+END_SRC

基于视图优化
#+BEGIN_SRC sql
  create view countries_in_asia as select * from country where continent = 'Asia';

  select * from countries_in_asia where population > 5000000;
#+END_SRC

#+BEGIN_SRC json
  {
    "join_preparation": {
      "select#": 1,
      "steps": [
        {
          "join_preparation": {
            "select#": 2,
            "steps": [
              {
                "expanded_query": "/* select#2 */ select `country`.`Code` AS `Code`,`country`.`Name` AS `Name`,`country`.`Continent` AS `Continent`,`country`.`Region` AS `Region`,`country`.`SurfaceArea` AS `SurfaceArea`,`country`.`IndepYear` AS `IndepYear`,`country`.`Population` AS `Population`,`country`.`LifeExpectancy` AS `LifeExpectancy`,`country`.`GNP` AS `GNP`,`country`.`GNPOld` AS `GNPOld`,`country`.`LocalName` AS `LocalName`,`country`.`GovernmentForm` AS `GovernmentForm`,`country`.`HeadOfState` AS `HeadOfState`,`country`.`Capital` AS `Capital`,`country`.`Code2` AS `Code2` from `country` where (`country`.`Continent` = 'Asia')"
                // select
                //   `country`.`Code` as `Code`,
                //   `country`.`Name` as `Name`,
                //   `country`.`Continent` as `Continent`,
                //   `country`.`Region` as `Region`,
                //   `country`.`SurfaceArea` as `SurfaceArea`,
                //   `country`.`IndepYear` as `IndepYear`,
                //   `country`.`Population` as `Population`,
                //   `country`.`LifeExpectancy` as `LifeExpectancy`,
                //   `country`.`GNP` as `GNP`,
                //   `country`.`GNPOld` as `GNPOld`,
                //   `country`.`LocalName` as `LocalName`,
                //   `country`.`GovernmentForm` as `GovernmentForm`,
                //   `country`.`HeadOfState` as `HeadOfState`,
                //   `country`.`Capital` as `Capital`,
                //   `country`.`Code2` as `Code2`
                // from
                //   `country`
                // where (`country`.`Continent` = 'Asia')
              }
            ]
          }
        },
        {
          "view": {
            "table": "`countries_in_asia`",
            "select#": 2,
            "merged": true
          }
        },
        {
          "expanded_query": "/* select#1 */ select `country`.`Code` AS `Code`,`country`.`Name` AS `Name`,`country`.`Continent` AS `Continent`,`country`.`Region` AS `Region`,`country`.`SurfaceArea` AS `SurfaceArea`,`country`.`IndepYear` AS `IndepYear`,`country`.`Population` AS `Population`,`country`.`LifeExpectancy` AS `LifeExpectancy`,`country`.`GNP` AS `GNP`,`country`.`GNPOld` AS `GNPOld`,`country`.`LocalName` AS `LocalName`,`country`.`GovernmentForm` AS `GovernmentForm`,`country`.`HeadOfState` AS `HeadOfState`,`country`.`Capital` AS `Capital`,`country`.`Code2` AS `Code2` from <constant table> join (`country`) on((`country`.`Continent` = 'Asia')) where (`country`.`Population` > 5000000)"
          // select
          //   `country`.`Code` as `Code`,
          //   `country`.`Name` as `Name`,
          //   `country`.`Continent` as `Continent`,
          //   `country`.`Region` as `Region`,
          //   `country`.`SurfaceArea` as `SurfaceArea`,
          //   `country`.`IndepYear` as `IndepYear`,
          //   `country`.`Population` as `Population`,
          //   `country`.`LifeExpectancy` as `LifeExpectancy`,
          //   `country`.`GNP` as `GNP`,
          //   `country`.`GNPOld` as `GNPOld`,
          //   `country`.`LocalName` as `LocalName`,
          //   `country`.`GovernmentForm` as `GovernmentForm`,
          //   `country`.`HeadOfState` as `HeadOfState`,
          //   `country`.`Capital` as `Capital`,
          //   `country`.`Code2` as `Code2`
          // from
          //   < constant table >
          //   join (`country`) on (`country`.`Continent` = 'Asia')
          // where (`country`.`Population` > 5000000)
        },
        {
          "transformations_to_nested_joins": {
            "transformations": [
              "JOIN_condition_to_WHERE",
              "parenthesis_removal"
            ],
            "expanded_query": "/* select#1 */ select `country`.`Code` AS `Code`,`country`.`Name` AS `Name`,`country`.`Continent` AS `Continent`,`country`.`Region` AS `Region`,`country`.`SurfaceArea` AS `SurfaceArea`,`country`.`IndepYear` AS `IndepYear`,`country`.`Population` AS `Population`,`country`.`LifeExpectancy` AS `LifeExpectancy`,`country`.`GNP` AS `GNP`,`country`.`GNPOld` AS `GNPOld`,`country`.`LocalName` AS `LocalName`,`country`.`GovernmentForm` AS `GovernmentForm`,`country`.`HeadOfState` AS `HeadOfState`,`country`.`Capital` AS `Capital`,`country`.`Code2` AS `Code2` from `country` where ((`country`.`Population` > 5000000) and (`country`.`Continent` = 'Asia'))"
            // select
            //   `country`.`Code` as `Code`,
            //   `country`.`Name` as `Name`,
            //   `country`.`Continent` as `Continent`,
            //   `country`.`Region` as `Region`,
            //   `country`.`SurfaceArea` as `SurfaceArea`,
            //   `country`.`IndepYear` as `IndepYear`,
            //   `country`.`Population` as `Population`,
            //   `country`.`LifeExpectancy` as `LifeExpectancy`,
            //   `country`.`GNP` as `GNP`,
            //   `country`.`GNPOld` as `GNPOld`,
            //   `country`.`LocalName` as `LocalName`,
            //   `country`.`GovernmentForm` as `GovernmentForm`,
            //   `country`.`HeadOfState` as `HeadOfState`,
            //   `country`.`Capital` as `Capital`,
            //   `country`.`Code2` as `Code2`
            // from
            //   `country`
            // where ((`country`.`Population` > 5000000)
            //   and (`country`.`Continent` = 'Asia'))
          }
        }
      ]
    }
  }
#+END_SRC
** Cost-based Optimization
*** 计算流程
CBO 是 MySQL 优化器的计算模型，其简要的流程如下：
1. 为每个操作分配一个成本 (cost)
2. 评估每个可能的计划需要多少次操作
3. 将各个操作成本相加
4. 选择总成本最低的计划
[[file:../static/image/2023/0223/165913.png]]

为什么是简化的？因为优化器不会分析每种可能的执行计划的成本，只会从中选出那些很有
可能成为最优的计划，想象一下，假如有 5 张表关联查询，每张表有 5 个索引，那么共有
$5! * 5! = 14400$ 种可能的执行计划，如果优化器都逐个分析，很有可能分析所耗费的时
间都比 sql 语句执行的时间长，这样的分析就失去了它的价值。

MySQL 的 optimizer_search_depth 参数可以控制优化器搜索的深度

正因为如此，优化器选择的计划不是每次都是最优的，如果你能明确知道某种计划是最优的，
那么你可以强制执行那个计划，比如：明确知道用索引 index_a 是最快的，那么你可以使
用 ~force index('index_a')~ 强制优化器执行

*** cost 常量
MySQL 8.0 的 cose 配置常量如下所示
服务端的 cost
#+BEGIN_SRC sql :exports both
  select * from mysql.server_cost;
#+END_SRC

#+RESULTS:
| cost_name                    | cost_value | last_update         | comment | default_value |
|------------------------------+------------+---------------------+---------+---------------|
| disk_temptable_create_cost   | NULL       | 2023-02-20 14:39:39 | NULL    |            20 |
| disk_temptable_row_cost      | NULL       | 2023-02-20 14:39:39 | NULL    |           0.5 |
| key_compare_cost             | NULL       | 2023-02-20 14:39:39 | NULL    |          0.05 |
| memory_temptable_create_cost | NULL       | 2023-02-20 14:39:39 | NULL    |             1 |
| memory_temptable_row_cost    | NULL       | 2023-02-20 14:39:39 | NULL    |           0.1 |
| row_evaluate_cost            | NULL       | 2023-02-20 14:39:39 | NULL    |           0.1 |

引擎 cost 列表
#+BEGIN_SRC sql :exports both
  select * from mysql.engine_cost;
#+END_SRC

#+RESULTS:
| engine_name | device_type | cost_name              | cost_value | last_update         | comment | default_value |
|-------------+-------------+------------------------+------------+---------------------+---------+---------------|
| default     |           0 | io_block_read_cost     | NULL       | 2023-02-20 14:39:39 | NULL    |             1 |
| default     |           0 | memory_block_read_cost | NULL       | 2023-02-20 14:39:39 | NULL    |          0.25 |

*** 元数据 & 统计数据
常见使用的元数据如下：

[[file:../static/image/2023/0223/201652.png]]

相关统计信息如下：

[[file:../static/image/2023/0223/201742.png]]

*** cost 常量配置实验
默认执行 SQL 的花费
#+BEGIN_SRC sql :results output
  explain format=json select * from country where continent='asia' and population > 5000000\G
#+END_SRC

#+RESULTS:
#+begin_example
,*************************** 1. row ***************************
EXPLAIN: {
  "query_block": {
    "select_id": 1,
    "cost_info": {
      "query_cost": "25.65" // 总体 cost 值
    },
    "table": {
      "table_name": "country",
      "access_type": "ALL",
      "rows_examined_per_scan": 239,
      "rows_produced_per_join": 11,
      "filtered": "4.76",
      "cost_info": {
        "read_cost": "24.51",
        "eval_cost": "1.14",
        "prefix_cost": "25.65",
        "data_read_per_join": "10K"
      },
      "used_columns": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "attached_condition": "((`world`.`country`.`Continent` = 'asia') and (`world`.`country`.`Population` > 5000000))"
    }
  }
}
#+end_example

将 row_evaluate_cost 从默认值 0.1 修改成 1
#+BEGIN_SRC sql :results none
  update mysql.server_cost set cost_value=1 where cost_name='row_evaluate_cost';
  flush optimizer_costs;
#+END_SRC

#+BEGIN_SRC sql :results output
  explain format=json select * from country where continent='asia' and population > 5000000\G
#+END_SRC

#+RESULTS:
#+begin_example
,*************************** 1. row ***************************
EXPLAIN: {
  "query_block": {
    "select_id": 1,
    "cost_info": {
      "query_cost": "240.75" // 总体 cost 提升了 10 倍
    },
    "table": {
      "table_name": "country",
      "access_type": "ALL",
      "rows_examined_per_scan": 239,
      "rows_produced_per_join": 11,
      "filtered": "4.76",
      "cost_info": {
        "read_cost": "229.37",
        "eval_cost": "11.38",
        "prefix_cost": "240.75",
        "data_read_per_join": "10K"
      },
      "used_columns": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "attached_condition": "((`world`.`country`.`Continent` = 'asia') and (`world`.`country`.`Population` > 5000000))"
    }
  }
}
#+end_example

恢复默认值, 防止影响后续实验
#+BEGIN_SRC sql
  update mysql.server_cost set cost_value=null where cost_name='row_evaluate_cost';
  flush optimizer_costs;
#+END_SRC
