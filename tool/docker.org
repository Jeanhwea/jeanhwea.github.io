#+TITLE: Docker 容器
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2018-11-27 Tue 11:04:00>
#+HTML_LINK_UP: ../readme.html
#+HTML_LINK_HOME: ../index.html
#+TAGS: docker cheatsheet DevOps


* Docker

  Docker 和传统虚拟机有着同样的虚拟化硬件资源的功能，但是 Docker 在完成虚拟化是
  使用的是 *容器* 的技术而非实现虚拟主机的资源，这样带来的好处就是更加轻便。

  [[file:../static/image/2018/11/container-vs-vm.png]]

  Docker 的最低依赖是 3.10.x 的 Linux 内核。并且 Docker 可以安装在 [[https://docs.docker.com/engine/installation/linux/][Linux]]，[[https://docs.docker.com/docker-for-mac/][Mac]] 和
  [[https://docs.docker.com/docker-for-windows/][Windows]] 操作系统上。如果你使用 Windows 作为开机机，需要另外配置[[https://docs.docker.com/docker-for-windows/#shared-drives][驱动共享]] 。

* Docker 的系统架构
  Docker 系统中包含容器（container）、图像（image）等常用概念。概念之间的联系见下图：

  [[file:../static/image/2018/11/docker-architecture.png]]

* Docker 容器
  容器是一个运行的实例，他是一个图像的运行实体。如果把图像比喻成数轴上点的话，容
  器就是一个区间。
** 生命周期
   - ~docker create~ : 创建容器
   - ~docker rename~ : 重命名容器
   - ~docker run~ : 创建并启动容器, ~docker run~ 是非常常用的一个命令其中比较有
     用的选项如下：
     + =-t= : 添加一个 tty 终端
     + =-d= : 当容器退出后自动进行 detach 操作，该选项是常见的后台启动应用的方法
     + =--volume $HOSTDIR:$DOCKERDIR= : 挂载容器外的磁盘
     + =--publish $HOSTPORT:$DOCKERPORT= : 暴露端口
     + =--name= : 制定容器名
     + =--restart= : 重启策略，默认是 no ，即不重启。但是有一些后台服务需要跟着
       docker 同时启动。这时需要将重启策略设置成 always 。
   - ~docker rm~ : 删除容器
   - ~docker update~ : 更新容器运行的资源约束

** 启动和停止
   - ~docker start~ : 启动容器
   - ~docker stop~ : 停止容器
   - ~docker restart~ : 重启容器
   - ~docker pause~ : 暂停容器
   - ~docker unpause~ : 重启暂停的容器
   - ~docker wait~ : 阻断直到容器停止
   - ~docker kill~ : 发送 SIGKILL 信号到容器
   - ~docker attach~ : 连接一个运行的容器

   如果需要从一个终端中 detach ，使用 *Ctrl+p, Ctrl+q* 。如果需要重新 attache 到
   终端，使用 ~docker attach~ 命令。

** 查看容器的状态
   - ~docker ps~ : 显示当前运行的容器， ~-a~ 选项可以显示所有的容器
   - ~docker logs~ : 显示容器的日志
   - ~docker inspect~ : 查看所有容器的信息（包括 IP 地址）
   - ~docker events~ : 获取容器的事件
   - ~docker port~ : 获取发布的端口
   - ~docker top~ : 显示容器中的进程
   - ~docker stats~ : 显示容器资源的使用情况， ~--all~ 显示所有的容器
   - ~docker diff~ : 显示容器的修改的文件

** 杂项
   - ~docker cp~ : 在本地和容器之间复制文件
   - ~docker export~ : 将文件系统导出成压缩文档，并输出到 STDOUT
   - ~docker exec~ : 在容器里面执行一个指令。例如可以用下面的命令进入容器里面，
     启动一个 bash 交互环境。
   #+BEGIN_SRC sh
     docker exec -it foo /bin/bash
   #+END_SRC

** 使用容器中 Ubuntu 操作系统
   下面是使用一些常用命令启动 Ubuntu 图像，并且 attache / detach 终端，具体见如
   下：
   #+BEGIN_SRC text
     ➜  ~ docker ps -a
     CONTAINER ID  IMAGE   COMMAND      CREATED         STATUS                     PORTS  NAMES
     ➜  ~ docker run -it --name=test ubuntu
     root@fde0a8727913:/# pwd
     /
     root@fde0a8727913:/# ls
     bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin
     srv  sys  tmp  usr  var
     root@fde0a8727913:/# exit
     ➜  ~ docker ps
     CONTAINER ID  IMAGE   COMMAND      CREATED         STATUS                     PORTS  NAMES
     ➜  ~ docker ps -a
     CONTAINER ID  IMAGE   COMMAND      CREATED         STATUS                     PORTS  NAMES
     fde0a8727913  ubuntu  "/bin/bash"  16 seconds ago  Exited (0) 8 seconds ago          test
     ➜  ~ docker attach test
     You cannot attach to a stopped container, start it first
     ➜  ~ docker start test
     test
     ➜  ~ docker ps
     CONTAINER ID IMAGE    COMMAND      CREATED         STATUS                     PORTS  NAMES
     fde0a8727913 ubuntu   "/bin/bash"  54 seconds ago  Up 1 second                       test
     ➜  ~ docker attach test
     root@fde0a8727913:/# ls
     bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin
     srv  sys  tmp  usr  var
     root@fde0a8727913:/# rm -rvf /var/
     removed directory '/var/opt'
     removed '/var/run'
     removed '/var/lock'
     ...
     removed directory '/var/cache'
     removed directory '/var/tmp'
     removed directory '/var/'
     root@fde0a8727913:/# exit
     ➜  ~ docker ps -a
     CONTAINER ID  IMAGE   COMMAND      CREATED             STATUS                   PORTS NAMES
     fde0a8727913  ubuntu  "/bin/bash"  About a minute ago  Exited (0) 5 seconds ago       test
     ➜  ~ docker diff test
     C /root
     A /root/.bash_history
     D /var
     ➜  ~ docker rm test
     test
     ➜  ~ docker ps -a
     CONTAINER ID  IMAGE   COMMAND      CREATED             STATUS                   PORTS NAMES
     ➜  ~
   #+END_SRC

* Docker 图像
  Docker 图像指的是容器在一个特点时间点的快照，它是一个只读的容器的存储，官网上
  说图像是容器的一个模板。

** 生命周期
   - ~docker images~ : 显示所有图像
   - ~docker import~ : 通过压缩文档导入图像
   - ~docker build~ : 通过 Dockerfile 创建图像
   - ~docker commit~ : 通过一个容器来提交一个图像
   - ~docker rmi~ : 移除一个图像
   - ~docker load~ : 通过压缩档案作为 STDIN 来导入图像，图像的标签也会一并导入
   - ~docker save~ : 将图像压缩成压缩档案输出到 STDOUT，图像的 layer, tags, version 一并输出

** 显示状态
   - ~docker history~ : 显示所有历史图像
   - ~docker tag~ : 重命名图像，打标签等操作

* 工作流
** load/save 图像
   加载文件中的图像
   #+BEGIN_SRC sh
     docker load < filename.tar.gz
   #+END_SRC

   保存图像到文件
   #+BEGIN_SRC sh
     docker save imagename:tagname | gzip > filename.tar.gz
   #+END_SRC

** import/export 容器
   从一个容器文件中导入容器
   #+BEGIN_SRC sh
     cat filename.tar.gz | docker import - imagename:tagname
   #+END_SRC

   导出一个容器
   #+BEGIN_SRC sh
     docker export containername | gzip > filename.tar.gz
   #+END_SRC

   值得一提的是： ~load~ 在新建图像时会带着相关的历史信息，tag 等，而 ~import~
   只会创建一个图像，所以 ~import~ 的图像的大小会小一点。

* Registry 和 Repository
  registry 是一个宿主机器，一个 registry 包含多个 repository。repository 是存储
  图像的仓库，一个 repository 包含多个 image，同时每个 image 又有许多 tag。常见
  的操作如下：
  - ~docker login~ : 登入 registry
  - ~docker logout~ : 注销 registry
  - ~docker search~ : 搜索图像
  - ~docker pull~ : 拉取 registry 的镜像
  - ~docker push~ : 上传本地图像到 registry

** 上传图像到私有仓库
   在上传或下载私有仓库的图像时，需要提前设置安全性。通常 docker 私有仓库默认采
   用 HTTPS，如果不设置安全性则会出现如下错误：
   #+BEGIN_SRC sh
     ➜  ~ docker tag ubuntu:18.04 192.168.1.2:5000/ubuntu:18.04
     ➜  ~ docker push 192.168.1.2:5000/ubuntu:18.04
     The push refers to repository [192.168.1.2:5000/ubuntu]
     Get https://192.168.1.2:5000/v2/: http: server gave HTTP response to HTTPS client
   #+END_SRC

   配置文件一般是 =daemon.json= ，所存放的位置因操作系统而异，具体如下：
   - Mac: =~/.docker/daemon.json=
   - Linux: =/etc/docker/daemon.json=

   需要添加 =insecure-registries= 的值，然后重启 docker 生效。
   #+BEGIN_SRC json
     {
       "insecure-registries" : [
         "192.168.1.2:5000"
       ],
       "registry-mirrors" : [
         "https://registry.docker-cn.com"
       ]
     }
   #+END_SRC

   Mac 操作系统也可以直接通过界面设置，如下图所示：

   [[file:../static/image/2019/07/docker-daemon-config.png]]

   #+BEGIN_SRC sh
     > docker tag imagename 192.168.1.2:5000/imagename
     > docker push 192.168.1.2:5000/imagename
     The push refers to repository [192.168.1.2:5000/redis]
     f37e5c653360: Pushed
     031c196d6ffa: Pushed
     215555938ee1: Pushed
     2ea66b75bc32: Pushed
     bf0b6dc2d2d7: Pushed
     cfce7a8ae632: Pushed
     lastest: digest: sha256:9b1b75fa6364b2ec538a5efdb00c3511adee5b6b2f80d5c64b06c4456ad573f6 size: 1571
   #+END_SRC
** 查询私有仓库中的镜像和 tag
   添加一些别名帮助查询远端的仓库内容

   #+BEGIN_SRC sh
     export REGISTRY='http://localhost:5000'

     alias ri='_f(){ curl -XGET $REGISTRY/v2/_catalog; }; _f'
     alias rt='_f(){ curl -XGET $REGISTRY/v2/$1/tags/list; }; _f'
   #+END_SRC

   输出结果
   #+BEGIN_SRC text
     $ ri
     {"repositories":["gitlab/gitlab-ce","registry","ubuntu"]}

     $ rt ubuntu
     {"name":"ubuntu","tags":["18.04","latest"]}
   #+END_SRC

** 查询所有的私有仓库中镜像和 tag
   #+BEGIN_SRC sh
     _reg=http://localhost:5000 && \
       curl -XGET $_reg/v2/_catalog | \
         jq '.repositories[]' | \
         xargs -I repo curl -XGET $_reg/v2/repo/tags/list
   #+END_SRC
   #+BEGIN_SRC text
     {"name":"cassandra","tags":["3.11.2"]}
     {"name":"elasticsearch","tags":["6.4.3"]}
     {"name":"gitlab/gitlab-ce","tags":["20181128"]}
     {"name":"mysql","tags":["5.7","5.7.26","8.0","8.0.16"]}
     {"name":"openjdk","tags":["8"]}
     {"name":"rabbitmq","tags":["3.7"]}
     {"name":"redis","tags":["4.0.6"]}
     {"name":"ubuntu","tags":["18.04"]}
   #+END_SRC

   #+BEGIN_SRC sh
     _reg=http://192.168.0.202:5000 && \
       wget -q $_reg/v2/_catalog -O- | \
         sed 's/^.*\[\(.*\)\].*$/\1/;s/,/\n/g' | \
         xargs -I repo wget -q $_reg/v2/repo/tags/list -O- | \
         sed 's/.*"name":"\(.*\)".*"tags":\[\(.*\)\].*/\1:\2/;s/"//g;s/,/:/g'
   #+END_SRC
   #+BEGIN_SRC text
     alpine:latest
     elasticsearch:6.4.3
     gitlab/gitlab-ce:20181127:latest
     mongo:latest
     mysql:5.7.26:8.0.16
     nginx:1.14:1.15:latest
     node:latest
     openjdk:8
     postgres:9.6:latest
     rabbitmq:3.7:latest
     redis:4.0.6
     registry:20181127:latest
     skree:20190704
     ubuntu:18.04:latest
   #+END_SRC

* 编写 Dockerfile
  Dockerfile 是配置 Docker 容器的配置文件，最佳实践参考[[https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/][这里]] 。

** Dockerfile 的指令
   常见的指令如下表:
   | Instruction | 描述                                                          |
   |-------------+---------------------------------------------------------------|
   | FROM        | 设置基的图像                                                  |
   | RUN         | 在新的层数执行一条命令，并且提交结果                          |
   | CMD         | 提供默认执行的容器                                            |
   | EXPOSE      | 暴露容器的监听端口， *这条指令只是提供端口，并不会直接暴露*   |
   | ENV         | 设置环境变量                                                  |
   | ADD         | 从容器外复制文件和目录到容器里面，避免使用 ADD，尽量使用 COPY |
   | COPY        | 使用 root 权限来复制文件                                      |
   | ENTRYPOINT  | 配置容器是入口可执行文件                                      |
   | VOLUME      | 配置一个可挂载的点                                            |
   | USER        | 设置 RUN/CMD/ENTRYPOINT 的执行用户                            |
   | WORKDIR     | 设置工作目录                                                  |
   | ARG         | 设置 build 的命令行参数                                       |
   | ONBUILD     | 添加一个当容器作为别的基容器是的触发命令                      |
   | STOPSIGNAL  | 设置系统退出的信号                                            |
   | LABEL       | 添加 key/value 属性，如：images, container, daemon            |

** 通过 docker build 创建图像
   #+BEGIN_SRC dockerfile
     FROM openjdk:8
     LABEL appname="skree" version="0.0.1" author="Jinghui Hu"
     COPY target/skree-0.0.1.jar skree.jar
     EXPOSE 9001
     CMD java -jar skree.jar
   #+END_SRC

   #+BEGIN_SRC text
     #> docker build -t skree .
     Sending build context to Docker daemon  50.45MB
     Step 1/5 : FROM openjdk:8
      ---> b84359d0cbce
     Step 2/5 : LABEL appname="skree" version="0.0.1" author="Jinghui Hu"
      ---> Running in a1f05953535b
     Removing intermediate container a1f05953535b
      ---> 43bd7d46936b
     Step 3/5 : COPY target/skree-0.0.1.jar skree.jar
      ---> dcd6b274bbb4
     Step 4/5 : EXPOSE 9001
      ---> Running in 2b0a688fa87b
     Removing intermediate container 2b0a688fa87b
      ---> e7b41e7dd672
     Step 5/5 : CMD java -jar skree.jar
      ---> Running in a006ea951dfa
     Removing intermediate container a006ea951dfa
      ---> bef45240e69c
     Successfully built bef45240e69c
     Successfully tagged skree:latest
     #>
   #+END_SRC

* 参考链接
  1. [[https://github.com/wsargent/docker-cheat-sheet][docker cheatsheet]]
  2. [[https://docs.docker.com/][docker docs]]
