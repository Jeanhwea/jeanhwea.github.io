#+TITLE: JDK 相关知识点
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2021-07-04 Sun 22:20:37>
#+HTML_LINK_UP: ../readme.html
#+HTML_LINK_HOME: ../index.html
#+SETUPFILE: ~/.emacs.d/site-lisp/org-html-themes/setup/theme-readtheorg-local.setup
#+TAGS: java jdk


* 基本用法
** 基本数据类型
   Java 语言中有 8 个基本类型，和 C++ 语言不同的是 Java 的基本类型的存储空间是固
   定的，每种类型的信息如下

   | 类型    | 存储空间 | 封装类    | 说明         |
   |---------+----------+-----------+--------------|
   | boolean | 1 bit    | Boolean   |              |
   | byte    | 1 字节   | Byte      |              |
   | char    | 2 字节   | Character | Unicode 编码 |
   | short   | 2 字节   | Short     |              |
   | int     | 4 字节   | Integer   |              |
   | long    | 8 字节   | Long      |              |
   | float   | 4 字节   | Float     |              |
   | double  | 8 字节   | Double    |              |

   数值基本类型可以存在如下的自动转换（红色虚线表示损失精度，蓝色实线表示不损失
   精度）：

   [[file:../static/image/2019/08/java-conversions-between-numeric-types.png]]

   基本类型和封装类的区别
   1. 传值方式不同，基本数据类型（原始数据类型）是值传递，封装类型是引用传递
   2. 封装类有方法和属性
      - 可以利用这些方法和属性来处理数据，例如 ~Integer.parseInt(String str);~
      - 基本数据类型都是 ~final~ 修饰的，不能被继承和扩展新的类、方法
   3. 默认值不同，
      - 如 ~int i;~ 默认值为 0，而 ~Integer j;~ 默认值为 ~null~,
      - 因为此时 ~j~ 为对象，对象默认值为 ~null~
   4. 存储位置不同, 定义的基本数据类型的变量和对象的引用变量（地址）存储在栈中，
      而实际对应的对象（value）是存储在堆中

** String 字符串
*** 字符串基本操作
    String 在 Java 中不是基本类型，对应的有一个 String 类
    #+BEGIN_SRC java
      String str1 = "";
      str1.isEmpty(); // => true
      str1.substring(0,3); // => java.lang.StringIndexOutOfBoundsException: String index out of range: 3

      String str2 = "Hello"
      str2.substring(0,3); // => "Hel"
      str2.substring(1,3); // => "el"
      str2.substring(1,3) == "el"; // => false
      str2.substring(1,3).equals("el"); // => true
    #+END_SRC

    在判断字符串 str 为非空时需要写如下的两个条件
    #+BEGIN_SRC java
      if (str != null && !str.isEmpty()) {
        // if str is not empty
      }
    #+END_SRC

*** String 的不可变性
    不可变对象指的是 *一个对象，在它创建完成之后，不能再改变它的状态* 。不能改变
    状态的意思是，不能改变对象内的成员变量，包括基本数据类型的值不能改变，引用类
    型的变量不能指向其他的对象，引用类型指向的对象的状态也不能改变。

    至于为什么要把 String 类设计成不可变类，是它的用途决定的。其实不只 String，
    很多 Java 标准类库中的类都是不可变的。在开发一个系统的时候，我们有时候也需要
    设计不可变类，来传递一组相关的值，这也是面向对象思想的体现。不可变类有一些优
    点，比如因为它的对象是只读的，所以多线程并发访问也不会有任何问题。当然也有一
    些缺点，比如每个不同的状态都要一个对象来代表，可能会造成性能上的问题。所以
    Java 标准类库还提供了一个可变版本，即 StringBuffer。

    ~javac~ 编译可以对字符串常量直接相加的表达式进行优化，不必要等到运行期去进行
    加法运算处理，而是在编译时去掉其中的加号，直接将其编译成一个这些常量相连的结
    果。所以 ~String s = "a" + "b" + "c" + "d";~ 只生成一个对象.

*** String, StringBuilder 和 StringBuffer
    Java 平台提供了两种类型的字符串：
    - ~String~ 和 ~StringBuffer~ / ~StringBuilder~, 它们可以储存和操作字符串。其
      中 String 是只读字符串，也就意味着 String 引用的字符串内容是不能被改变的。
    - 而 StringBuffer 和 StringBuilder 类表示的字符串对象可以直接进行修改。
      StringBuilder 是 JDK 1.5 中引入的，它和 StringBuffer 的方法完全相同，区别
      在 于它是在单线程环境下使用的，因为它的所有方面都没有被 ~synchronized~ 修
      饰，因 此它的效率也比 StringBuffer 略高。

** ~==~ 与 equals 的区别
   1. ~==~ 是一个运算符。 equals 则是 String 对象的方法
   2. 基本数据类型比较 ~==~ 比较两个值是否相等。相等为 true 否则为 false；equals
      不能直接用于基本类型的比较。需要将基本类型转换为包装器进行比较。
   3. 引用对象比较 ~==~ 和 equals 都是比较栈内存中的地址是否相等 。相等为 true 否
      则为 false。 需注意几点：
      - String 是一个特殊的引用类型。对于两个字符串的比较，不管是 ~==~ 和 equals
        这两者比较的都是字符串是否相同
      - 当你创建两个 String 对象时，内存中的地址是不相同的，你可以赋相同的值。所
        以字符串的内容相同。引用地址不一定相同，（相同内容的对象地址不一定相同），
        但反过来却是肯定的
      - 基本数据类型比较 (String 除外) ~==~ 和 equals 两者都是比较值

   #+HEADER: :classname App198
   #+BEGIN_SRC java exports code
     class App198 {
       public static void main(String args[]) {
         String s1 = "Hello";
         String s2 = "Hello";
         String s3 = new String("Hello");
         String s4 = "Hel" + "lo";          // String is immutable, it will compiles to "Hello"
         System.out.println(s1 == s2);      // => true
         System.out.println(s1.equals(s2)); // => ture
         System.out.println(s1 == s3);      // => false
         System.out.println(s1.equals(s3)); // => ture
         System.out.println(s1 == s4);      // => true
         System.out.println(s1.equals(s4)); // => true
       }
     }
   #+END_SRC

** hashCode() 和 equals() 方法
   1. Object 类中的方法定义如下
      #+BEGIN_SRC java
        public native int hashCode();

        public boolean equals(Object obj) {
            return (this == obj);
        }
      #+END_SRC
   2. ~==~ 比较对象的地址

** 错误和异常
   - ~java.lang.Error~ : Throwable 的子类，用于标记严重错误，表示系统级的错误和
     程序不必处理的异常。合理的应用程序不应该去 ~try/catch~ 这种错误。是恢复不是
     不可能但很困难的情况下的一种严重问题；比如内存溢出，不可能指望程序能处理这
     样的情况；
   - ~java.lang.Exception~ : Throwable 的子类，表示需要捕捉或者需要程序进行处理
     的异常，是一种设计或实现问题；也就是说，它表示如果程序运行正常，从不会发生
     的情况。并且鼓励用户程序去 ~catch~ 它。

   处理异常的一种方式是在类方法的定义中 ~throws~ 相应的异常
   #+HEADER: :classname App148
   #+BEGIN_SRC java :exports code
     class App148 {
       public static void main(String args[]) throws MyException {
         MyException myecpt = new MyException("Ops!");
         throw myexcpt;
         // System.out.println("Dead code");
       }
     }

     class MyException extends IOException {
       MyException(String message) {
         super(message);
       }
     }
   #+END_SRC

   或者使用 ~try/catch~ 块来捕获异常进行处理
   #+HEADER: :classname App253
   #+BEGIN_SRC java :exports code
     class App166 {

       public static void main(String args[]) {
         int num1, num2;
         try {
           num1 = 0;
           num2 = 62 / num1;
           System.out.println(num2);
           System.out.println("Hey I'm at the end of try block");
         } catch (ArithmeticException e) {
           System.out.println("You should not divide a number by zero");
         } catch (Exception e) {
           System.out.println("Exception occurred");
         }
         System.out.println("I'm out of try-catch block in Java.");
       }
     }
   #+END_SRC

   #+RESULTS:
   : You should not divide a number by zero
   : I'm out of try-catch block in Java.

   *Error 和 RuntimeException 及其子类都是未检查的异常* （unchecked exceptions），
   而所有其他的 Exception 类都是检查了的异常（checked exceptions）

   - checked exceptions: 上下文环境有关，即使程序设计无误，仍然可能因使用的问题
     而引发．通常是从一个可以恢复的程序中抛出来的，并且最好能够从这种异常中使用
     程序恢复。比如 FileNotFoundException, ParseException 等。检查了的异常发生在
     编译阶段，必须要使用 ~try/catch~ （或者 ~throws~ ）否则编译不通过。
     + ClassNotFoundException
     + IOException
     + FileNotFoundException
   - unchecked exceptions: 通常是如果一切正常的话本不该发生的异常，但是的确发生
     了。 发生在运行期，具有不确定性，主要是由于程序的逻辑问题所引起的。比如
     ArrayIndexOutOfBoundException, ClassCastException 等。从语言本身的角度讲，
     程序不该去 catch 这类异常，虽然能够从诸如 RuntimeException 这样的异常中
     catch 并恢复，但是并不鼓励终端程序员这么做，因为完全没要必要。因为这类错误
     本身就是 bug，应该被修复，出现此类错误时程序就应该立即停止执行。 因此，面对
     Errors 和 unchecked exceptions 应该让程序自动终止执行，程序员不该做诸如
     ~try/catch~ 这样的事情，而是应该查明原因，修改代码逻辑。
     + NullPointerException
     + ArrayIndexOutOfBoundException
     + IllegalArgumentException
     + OutOfMemoryError

   RuntimeException：RuntimeException 体系包括错误的类型转换、数组越界访问和试图
   访问空指针等等。处理 RuntimeException 的原则是：如果出现 RuntimeException，那
   么一定是程序员的错误。例如，可以通过检查数组下标和数组边界来避免数组越界访问
   异常。其他（IOException 等等）checked 异常一般是外部错误，例如试图从文件尾后
   读取数据等，这并不是程序本身的错误，而是在应用环境中出现的外部错误。

   《Effective Java》 中对于异常处理总结如下：
   - 不要将异常处理用于正常的控制流（设计良好的 API 不应该强迫它的调用者为了正常的
     控制流而使用异常）
   - 对可以恢复的情况使用受检异常，对编程错误使用运行时异常
   - 避免不必要的使用受检异常（可以通过一些状态检测手段来避免异常的发生）
   - 优先使用标准的异常
   - 每个方法抛出的异常都要有文档
   - 保持异常的原子性
   - 不要在 catch 中忽略掉捕获到的异常

** 静态变量和实例变量
   1. 在语法定义上的区别：静态变量前要加 ~static~ 关键字，而实例变量前则不加。
   2. 在程序运行时的区别：实例变量属于某个对象的属性，必须创建了实例对象，其中的
      实例变量才会被分配空间，才能使用这个实例变量。静态变量不属于某个实例对象，
      而是属于类，所以也称为类变量，只要程序加载了类的字节码，不用创建任何实例对
      象，静态变量就会被分配空间，静态变量就可以被使用了。总之，实例变量必须创建
      对象后才可以通过这个对象来使用，静态变量则可以直接使用类名来引用。
   3. 静态变量在 Java 中是属于类的，它在所有的实例中的值是一样的。当类被 Java 虚
      拟机载入的时候，会对静态变量进行初始化。如果你的代码尝试不用实例来访问非静
      态的变量，编译器会报错，因为这些变量还没有被创建出来，还没有跟任何实例关联
      上

** ~final~ 关键字
   1. 修饰类：表示该类不能被继承
   2. 修饰方法：表示方法不能被覆盖
   3. 修饰变量：表示变量只能一次赋值以后值不能被修改（常量）

** 序列化
   1. 序列化就是一种用来处理对象流的机制，所谓对象流也就是将对象的内容进行流化。
      可以对流化后的对象进行读写操作，也可将流化后的对象传输于网络之间。序列化是
      为了解决在对对象流进行读写操作时所引发的问题
   2. 序列化的实现
      - 将需要被序列化的类实现 ~Serializable~ 接口
      -  ~Serializable~ 接口没有需要实现的方法，只是为了标注该对象是可被序列化的
   4. 被 ~transient~ 修饰的变量不属于对象持久化的一部分，该变量内容在序列化后无
      法获得访问

** 数组的操作
   #+HEADER: :classname App73
   #+BEGIN_SRC java :exports code
     class App73 {
       public static void main(String args[]) {
         // int array
         int[] arr = new int[10]; // => elements are initialezd to 0
         System.out.println(arr[3]);
         System.out.println(arr.length);

         // String array
         String[] sarr = new String[3];
         sarr[0] = "Hello";
         sarr[1] = "Man";
         sarr[2] = "Welcome to Java world";

         for (String w: sarr) { System.out.println(w); }
       }
     }
   #+END_SRC

   初始化数组的数据
   #+HEADER: :classname App341
   #+BEGIN_SRC java :exports code
     class App341 {
       public static void main(String args[]) {
         int[] primes = {2, 3, 5, 7};
         int[] primes = new int[] {2, 3, 5, 7};
         int[][] magicSquare = {
           {1, 2, 3, 4},
           {1, 0, 3, 9},
           {1, 0, 3, 9},
           {1, 0, 3, 9}
         };
       }
     }
   #+END_SRC

   Java 数组默认时引用，如果需要复制可以调用 ~Arrays.copyOf(...)~ 方法
   #+BEGIN_SRC text
     java> x = new int[] {1,2,3}
     int[] x = [1, 2, 3]
     java> y = new int[] {1,2,3}
     int[] y = [1, 2, 3]
     java> z1 = x
     int[] z1 = [1, 2, 3]
     java> y.length
     java.lang.Integer res24 = 3
     java> z2 = Arrays.copyOf(y, y.length)
     int[] z2 = [1, 2, 3]
     java> z1[0] = 9
     java.lang.Integer res25 = 9
     java> z2[0] = 9
     java.lang.Integer res26 = 9
     java> x
     int[] x = [9, 2, 3]
     java> y
     int[] y = [1, 2, 3]
     java>
   #+END_SRC

   排序数组
   #+BEGIN_SRC text
     java> x
     int[] x = [9, 2, 3]
     java> Arrays.sort(x)

     java> x
     int[] x = [2, 3, 9]
   #+END_SRC

** 输入和输出
   读取数据的输入和打印到标准输出
   #+BEGIN_SRC java
     Scanner in = new Scanner(System.in);
     System.out.println("What is your name?");
     String name = in.nextLine();
   #+END_SRC

   格式化输出浮点数
   #+BEGIN_SRC text
     java> double x = 100000.0 / 3.0;
     double x = 33333.333333333336
     java> System.out.printf("%.3f", x)
     33333.333
     java> System.out.printf("%,.3f", x)
     33,333.333
   #+END_SRC

* 开发工具
** JDK 1.8 简洁和新特性
   [[https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html][JDK]] 是 Java 语言的软件开发工具包，主要用于移动设备、嵌入式设备上的 JAVA 应用
   程序。JDK 是整个 Java 开发的核心，它包含了 JAVA 的运行环境（JVM+Java 系统类库）
   和 JAVA 工具。目前主要使用的 JDK 版本为 1.8 ，其参考见 [[https://www.oracle.com/technetwork/java/javase/documentation/jdk8-doc-downloads-2133158.html][JDK Documentation]]

   1. Java 8 允许我们给接口添加一个非抽象的方法实现，只需要使用 default 关键字即
      可
   2. 新增 lambda 表达式
   3. 提供函数式接口
   4. Java 8 允许你使用关键字来传递方法或者构造函数引用
   5. 我们可以直接在 lambda 表达式中访问外层的局部变量。

   JDK 1.8 的概念图如下：

   [[file:../static/image/2019/07/jdk8-conceptual-diagram.png]]

** JDK 的安装和环境变量配置
   JDK 可以直接在 Oracle 网站上下载，链接是 [[https://www.oracle.com/java/technologies/javase-jdk8-downloads.html][JDK 1.8 Download]] ，将 JDK 直接解压放
   到一个文件夹里就可以使用 JDK，Java 一般会配置 ~JAVA_HOME~ 环境变量，
   ~JAVA_HOME~ 环境变量是指向 Java 的安装文件夹，具体配置如下所示
   #+BEGIN_SRC sh
     mkdir -p /usr/local/java && cd /usr/local/java
     tar xzvf jdk-8u231-linux-x64.tar.gz
   #+END_SRC

   配置环境变量如下
   #+BEGIN_SRC sh
     export JAVA_HOME='/usr/local/java/jdk1.8.0_231'
     export PATH=$JAVA_HOME/bin:$PATH
   #+END_SRC

** 编译器 javac 和虚拟机 java
   Java 的两个基本工具是 ~javac~ 和 ~java~, 其中这两个工具功能如下：
   - javac 是 Java 的编译器，将 Java 的源代码编译成虚拟机识别的字节码
   - java 是 Java 的执行器，可以执行 Java 编译器编译好的字节码

   下面是查看工具版本的方法
   #+BEGIN_SRC text
     $ java -version
     java version "1.8.0_221"
     Java(TM) SE Runtime Environment (build 1.8.0_221-b11)
     Java HotSpot(TM) 64-Bit Server VM (build 25.221-b11, mixed mode)
     $ javac -version
     javac 1.8.0_221
   #+END_SRC

   也可以使用 javac 和 java 一个编译并执行 Java 代码
   #+BEGIN_SRC text
     $ ls
     Hello.java
     $ cat Hello.java
     public class Hello {
       public static void main(String args[]) {
         System.out.println("hello");
       }
     }
     $ javac Hello.java
     $ ls
     Hello.class  Hello.java
     $ java Hello
     hello
     $
   #+END_SRC

** TODO 调试器 jdb
   Java 自带的调试器是 ~jdb~ 命令，通常可以使用集成开发环境（IDE）中的调试工具来
   调试 Java，所以 jdb 一般使用的比较少

** 解释器 jrepl
   Java 9 的 JDK 中就自带解释器, 可以用于调试一些常见的命令。Java 8 用户可以使用
   一个民间开发的 REPL，就叫 ~java-repl~, 该工具可以在 [[https://github.com/albertlatacz/java-repl][github]] 中下载 jar 包，然
   后直接执行
   #+BEGIN_SRC sh
     java -jar $JAVA_HOME/lib/javarepl-dev.jar
   #+END_SRC

   我一般直接建一个别名，这样运行 java 的解释器效果如下
   #+BEGIN_SRC text
     $ jrepl
     [INFO] Unable to bind key for unsupported operation: edit-and-execute-command
     Welcome to JavaREPL version dev (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_231)
     Type expression to evaluate, :help for more options or press tab to auto-complete.
     Connected to local instance at http://localhost:40173
     java> "hello world"
     java.lang.String res0 = "hello world"
     java>
   #+END_SRC

** 反汇编器 javap
   javap 时 JDK 自带的反汇编器，可以反汇编 java 的类
   #+HEADER: :classname Apple
   #+BEGIN_SRC java
     class Apple {

       public int add(int a, int b) {
         return a + b;
       }

       public static void main(String args[]) {
         System.out.println("Hello World");
       }
     }
   #+END_SRC

   使用 javap 的反汇编的示例如下
   #+BEGIN_SRC text
     $ javap Apple
     Compiled from "Apple.java"
     class Apple {
       Apple();
       public int add(int, int);
       public static void main(java.lang.String[]);
     }

     $ javap -c Apple
     Compiled from "Apple.java"
     class Apple {
       Apple();
         Code:
            0: aload_0
            1: invokespecial #1                  // Method java/lang/Object."<init>":()V
            4: return

       public int add(int, int);
         Code:
            0: iload_1
            1: iload_2
            2: iadd
            3: ireturn

       public static void main(java.lang.String[]);
         Code:
            0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;
            3: ldc           #3                  // String Hello World
            5: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V
            8: return
     }

     $ javap -v Apple
     Classfile /tmp/java/Apple.class
       Last modified Mar 17, 2020; size 471 bytes
       MD5 checksum ad20aeca420725caad4423644222e82d
       Compiled from "Apple.java"
     class Apple
       minor version: 0
       major version: 52
       flags: ACC_SUPER
     Constant pool:
        #1 = Methodref          #6.#17         // java/lang/Object."<init>":()V
        #2 = Fieldref           #18.#19        // java/lang/System.out:Ljava/io/PrintStream;
        #3 = String             #20            // Hello World
        #4 = Methodref          #21.#22        // java/io/PrintStream.println:(Ljava/lang/String;)V
        #5 = Class              #23            // Apple
        #6 = Class              #24            // java/lang/Object
        #7 = Utf8               <init>
        #8 = Utf8               ()V
        #9 = Utf8               Code
       #10 = Utf8               LineNumberTable
       #11 = Utf8               add
       #12 = Utf8               (II)I
       #13 = Utf8               main
       #14 = Utf8               ([Ljava/lang/String;)V
       #15 = Utf8               SourceFile
       #16 = Utf8               Apple.java
       #17 = NameAndType        #7:#8          // "<init>":()V
       #18 = Class              #25            // java/lang/System
       #19 = NameAndType        #26:#27        // out:Ljava/io/PrintStream;
       #20 = Utf8               Hello World
       #21 = Class              #28            // java/io/PrintStream
       #22 = NameAndType        #29:#30        // println:(Ljava/lang/String;)V
       #23 = Utf8               Apple
       #24 = Utf8               java/lang/Object
       #25 = Utf8               java/lang/System
       #26 = Utf8               out
       #27 = Utf8               Ljava/io/PrintStream;
       #28 = Utf8               java/io/PrintStream
       #29 = Utf8               println
       #30 = Utf8               (Ljava/lang/String;)V
     {
       Apple();
         descriptor: ()V
         flags:
         Code:
           stack=1, locals=1, args_size=1
              0: aload_0
              1: invokespecial #1                  // Method java/lang/Object."<init>":()V
              4: return
           LineNumberTable:
             line 1: 0

       public int add(int, int);
         descriptor: (II)I
         flags: ACC_PUBLIC
         Code:
           stack=2, locals=3, args_size=3
              0: iload_1
              1: iload_2
              2: iadd
              3: ireturn
           LineNumberTable:
             line 4: 0

       public static void main(java.lang.String[]);
         descriptor: ([Ljava/lang/String;)V
         flags: ACC_PUBLIC, ACC_STATIC
         Code:
           stack=2, locals=1, args_size=1
              0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;
              3: ldc           #3                  // String Hello World
              5: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V
              8: return
           LineNumberTable:
             line 8: 0
             line 9: 8
     }
     SourceFile: "Apple.java"
   #+END_SRC
