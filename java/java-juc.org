#+TITLE: Java 并发编程
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2021-06-21 Mon 22:27:05>
#+HTML_LINK_UP: ../readme.html
#+HTML_LINK_HOME: ../index.html
#+SETUPFILE: ~/.emacs.d/site-lisp/org-html-themes/setup/theme-readtheorg-local.setup
#+TAGS: java concurrent


* 线程
** 线程状态
   1. NEW
   2. RUNNALBE
   3. BLOCKED
   4. WAITING
   5. TIMED_WAINTING
   6. TERMINATED
** Thread

** ThreadLocal

** ThreadPoolExecutor

* 死锁
** 死锁的四个必要条件
   1. =互斥条件=: 一个资源每次只能被一个进程使用
   2. =请求与保持条件=: 一个进程因请求资源而阻塞时，对已获得的资源保持不放
   3. =不剥夺条件=: 进程已获得的资源，在末使用完之前，不能强行剥夺
   4. =循环等待条件=: 若干进程之间形成一种头尾相接的循环等待资源关系

* CAS

* AQS

* 常用工具
** CountDownLatch & CyclicBarrier
   #+BEGIN_SRC java
     private static void doWork() {
       try {
         Thread.sleep(new Double(Math.random() * 3000).longValue());
       } catch (InterruptedException e) {
         e.printStackTrace();
       }
     }

     public static void test01() throws InterruptedException {
       CountDownLatch countDownLatch = new CountDownLatch(5);
       for (int i = 0; i < 5; i++) {
         Thread t =
             new Thread(
                 () -> {
                   doWork();
                   countDownLatch.countDown(); // 不阻塞
                   System.out.printf("玩家[%s]准备就绪\n", Thread.currentThread().getName());
                 });
         t.start();
       }
       countDownLatch.await(); // 阻塞
       System.out.println("游戏开始");
     }

     public static void test02() throws InterruptedException {
       CyclicBarrier cyclicBarrier = new CyclicBarrier(5);
       for (int i = 0; i < 10; i++) {
         Thread t =
             new Thread(
                 () -> {
                   doWork();
                   try {
                     System.out.printf("玩家[%s]选择英雄\n", Thread.currentThread().getName());
                     cyclicBarrier.await(); // 不阻塞，达到循环数字时所有线程同时唤醒，并循环利用
                     System.out.printf("玩家[%s]准备就绪\n", Thread.currentThread().getName());
                   } catch (InterruptedException | BrokenBarrierException e) {
                     e.printStackTrace();
                   }
                 });
         t.start();
       }
     }

   #+END_SRC

** ReentrantLock

** ConcurrentHashMap
