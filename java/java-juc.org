#+TITLE: Java 并发编程
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2021-06-21 Mon 22:27:05>
#+HTML_LINK_UP: ../readme.html
#+HTML_LINK_HOME: ../index.html
#+SETUPFILE: ~/.emacs.d/site-lisp/org-html-themes/setup/theme-readtheorg-local.setup
#+TAGS: java concurrent


* 线程
** 线程六种状态
   1. NEW
      - 线程对象刚创建，还未调用 ~Thread.start()~ 方法之前的状态
   2. RUNNALBE
      - 线程调用 ~Thread.start()~ 方法过后，线程等待操作系统资源状态
      - 该状态线程获取到操作系统资源后会立马执行
   3. BLOCKED
      - 线程执行状态被阻塞
      - 线程进入 synchronized 代码块或 synchronized 方法时会出现 BLOCKED 状态
      - 线程重入 synchronized 代码块或 synchronized 方法，调用 ~Object.wait()~
        方法也会进入阻塞状态
   4. WAITING
      - 当前线程处于等待状态，等待其它线程释放资源
      - 调用下来方法会进入等待状态
        + 无超时版本的 ~Object.wait()~ 方法
        + 无超时版本的 ~Thread.join()~ 方法
        + ~LockSupport.park()~
   5. TIMED_WAINTING
      - 和 WAINTING 类似，只不过添加了超时
      - 调用下来方法会进入超时等待状态
        + ~Thread.sleep()~
        + 超时版本的 ~Object.wait()~ 方法
        + 超时版本的 ~Thread.join()~ 方法
        + ~LockSupport.parkNanos()~
        + ~LockSupport.parkUntil()~
   6. TERMINATED
      - 线程结束
** Thread

** ThreadLocal

** ThreadPoolExecutor
   线程执行器的继承关系如下
   #+BEGIN_SRC text
     java.util.concurrent
     Class ThreadPoolExecutor

         java.lang.Object
             java.util.concurrent.AbstractExecutorService
                 java.util.concurrent.ThreadPoolExecutor

         All Implemented Interfaces:
             Executor, ExecutorService

         Direct Known Subclasses:
             ScheduledThreadPoolExecutor
   #+END_SRC

   一般关于该类的 7 个重要参数是并行编程必须掌握的技能
   1. corePoolSize 和 maximumPoolSize: 核心线程数和最大线程数
   2. 按需创建
      - 核心线程数在初始化就创建，启动是才调用
      - 如果 BlockingQueue 是非空的话，线程在启动时就会调用
   3. 创建线程
      - 使用 ThreadFactory 工程类创建线程
      - 若未指定创建工程使用默认的工程类创建, 即 ~Executors.defaultThreadFactory()~
   4. 存活时间
      - 超过 corePoolSize 的线程会通过 keepAliveTime


* 线程死锁
** 死锁的四个必要条件
   1. =互斥条件=: 一个资源每次只能被一个进程使用
   2. =请求与保持条件=: 一个进程因请求资源而阻塞时，对已获得的资源保持不放
   3. =不剥夺条件=: 进程已获得的资源，在末使用完之前，不能强行剥夺
   4. =循环等待条件=: 若干进程之间形成一种头尾相接的循环等待资源关系

* CAS

* AQS

* 核心组件
** 原子类
*** AtmoicInteger
*** AtomicReference
** 并发队列
*** LinkedBlockingQueue
*** ArrayBlockingQueue
*** ConcurrentLinkedDeque
*** ConcurrentLinkedQueue
** 同步工具
*** CountDownLatch
    #+BEGIN_SRC java
      private static void doWork() {
        try {
          Thread.sleep(new Double(Math.random() * 3000).longValue());
        } catch (InterruptedException e) {
          e.printStackTrace();
        }
      }

      public static void test01() throws InterruptedException {
        CountDownLatch countDownLatch = new CountDownLatch(5);
        for (int i = 0; i < 5; i++) {
          Thread t =
              new Thread(
                  () -> {
                    doWork();
                    countDownLatch.countDown(); // 不阻塞
                    System.out.printf("玩家[%s]准备就绪\n", Thread.currentThread().getName());
                  });
          t.start();
        }
        countDownLatch.await(); // 阻塞
        System.out.println("游戏开始");
      }

      public static void test02() throws InterruptedException {
        CyclicBarrier cyclicBarrier = new CyclicBarrier(5);
        for (int i = 0; i < 10; i++) {
          Thread t =
              new Thread(
                  () -> {
                    doWork();
                    try {
                      System.out.printf("玩家[%s]选择英雄\n", Thread.currentThread().getName());
                      cyclicBarrier.await(); // 不阻塞，达到循环数字时所有线程同时唤醒，并循环利用
                      System.out.printf("玩家[%s]准备就绪\n", Thread.currentThread().getName());
                    } catch (InterruptedException | BrokenBarrierException e) {
                      e.printStackTrace();
                    }
                  });
          t.start();
        }
      }

    #+END_SRC

*** CyclicBarrier

*** Semaphore

*** Exchanger
** 并发集合
*** ConcurrentHashMap
*** CopyOnWriteArrayList
*** CopyOnWriteArraySet
*** ConcurrentSkipSet
*** ConcurrentSkipListMap
** 并发锁
*** ReentrantLock
*** StampedLock
*** ReentrantReadWriteLock
** 线程池
*** Fork/Join
*** Executor
