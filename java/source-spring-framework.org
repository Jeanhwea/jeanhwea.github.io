#+TITLE: Spring Framework v5.2.5.RELEASE
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2021-07-14 Wed 12:16:43>
#+HTML_LINK_UP: ../readme.html
#+HTML_LINK_HOME: ../index.html
#+SETUPFILE: ~/.emacs.d/site-lisp/org-html-themes/setup/theme-readtheorg-local.setup
#+TAGS: java spring source


* Spring 核心类梳理
  1. ApplicationContext
     - AbstractApplicationContext
       + ~refresh()~ 实现 Spring Bean 加载的核心逻辑
  2. BeanDefinition
     - AbstractBeanDefinition
  3. BeanDefinitionReader
     - 读取 BeanDefinition 对象
  4. BeanFactory
     - Bean 工厂类
     - AbstractBeanFactory
       + ~doGetBean(...)~
  5. BeanFactoryPostProcessor
     - 函数式接口 ~@FunctionalInterface~
  6. BeanPostProcessor
     - 提供自定义 Bean 实例化的处理接口扩展
     - ~postProcessBeforeInitialization(Object bean, String beanName)~
       + Bean 实例化前置处理方法
     - ~postProcessAfterInitialization(Object bean, String beanName)~
       + Bean 实例化后置处理方法

* BeanFactory
** DefaultListableBeanFactory
   XmlBeanFactory 继承自 DefaultListableBeanFactory, 并且
   DefaultListableBeanFactory 实现了大部分的 Spring 注册及加载的实现

   [[file:../static/image/2021/07/DefaultListableBeanFactory.png]]

   该类定了 BeanDefinition 类的 Map
   #+BEGIN_SRC java
     /** Map of bean definition objects, keyed by bean name. */
     private final Map<String, BeanDefinition> beanDefinitionMap = new ConcurrentHashMap<>(256);

     /** Map of singleton and non-singleton bean names, keyed by dependency type. */
     private final Map<Class<?>, String[]> allBeanNamesByType = new ConcurrentHashMap<>(64);

     /** Map of singleton-only bean names, keyed by dependency type. */
     private final Map<Class<?>, String[]> singletonBeanNamesByType = new ConcurrentHashMap<>(64);

     /** List of bean definition names, in registration order. */
     private volatile List<String> beanDefinitionNames = new ArrayList<>(256);
   #+END_SRC

** XmlBeanDefinitionReader
   主要用于读取 XML 文件中的定义，其核心读取方法如下
   #+BEGIN_SRC java
     /**
      ,* Load bean definitions from the specified XML file.
      ,* @param encodedResource the resource descriptor for the XML file,
      ,* allowing to specify an encoding to use for parsing the file
      ,* @return the number of bean definitions found
      ,* @throws BeanDefinitionStoreException in case of loading or parsing errors
      ,*/
     public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException {
         Assert.notNull(encodedResource, "EncodedResource must not be null");
         if (logger.isTraceEnabled()) {
             logger.trace("Loading XML bean definitions from " + encodedResource);
         }

         Set<EncodedResource> currentResources = this.resourcesCurrentlyBeingLoaded.get();
         if (currentResources == null) {
             currentResources = new HashSet<>(4);
             this.resourcesCurrentlyBeingLoaded.set(currentResources);
         }
         if (!currentResources.add(encodedResource)) {
             throw new BeanDefinitionStoreException(
                     "Detected cyclic loading of " + encodedResource + " - check your import definitions!");
         }

         try (InputStream inputStream = encodedResource.getResource().getInputStream()) {
             InputSource inputSource = new InputSource(inputStream);
             if (encodedResource.getEncoding() != null) {
                 inputSource.setEncoding(encodedResource.getEncoding());
             }
             return doLoadBeanDefinitions(inputSource, encodedResource.getResource());
         }
         catch (IOException ex) {
             throw new BeanDefinitionStoreException(
                     "IOException parsing XML document from " + encodedResource.getResource(), ex);
         }
         finally {
             currentResources.remove(encodedResource);
             if (currentResources.isEmpty()) {
                 this.resourcesCurrentlyBeingLoaded.remove();
             }
         }
     }
   #+END_SRC

   实际实现读取 BeanDefinition 的方法
   #+BEGIN_SRC java
     /**
      ,* Actually load bean definitions from the specified XML file.
      ,* @param inputSource the SAX InputSource to read from
      ,* @param resource the resource descriptor for the XML file
      ,* @return the number of bean definitions found
      ,* @throws BeanDefinitionStoreException in case of loading or parsing errors
      ,* @see #doLoadDocument
      ,* @see #registerBeanDefinitions
      ,*/
     protected int doLoadBeanDefinitions(InputSource inputSource, Resource resource)
             throws BeanDefinitionStoreException {

         try {
             Document doc = doLoadDocument(inputSource, resource);
             int count = registerBeanDefinitions(doc, resource);
             if (logger.isDebugEnabled()) {
                 logger.debug("Loaded " + count + " bean definitions from " + resource);
             }
             return count;
         }
         catch (BeanDefinitionStoreException ex) {
             throw ex;
         }
         catch (SAXParseException ex) {
             throw new XmlBeanDefinitionStoreException(resource.getDescription(),
                     "Line " + ex.getLineNumber() + " in XML document from " + resource + " is invalid", ex);
         }
         catch (SAXException ex) {
             throw new XmlBeanDefinitionStoreException(resource.getDescription(),
                     "XML document from " + resource + " is invalid", ex);
         }
         catch (ParserConfigurationException ex) {
             throw new BeanDefinitionStoreException(resource.getDescription(),
                     "Parser configuration exception parsing XML from " + resource, ex);
         }
         catch (IOException ex) {
             throw new BeanDefinitionStoreException(resource.getDescription(),
                     "IOException parsing XML document from " + resource, ex);
         }
         catch (Throwable ex) {
             throw new BeanDefinitionStoreException(resource.getDescription(),
                     "Unexpected exception parsing XML document from " + resource, ex);
         }
     }
   #+END_SRC

* ApplicationContext

* AOP

* SpringBoot 自动装配
