#+TITLE: Spring Framework v5.2.5.RELEASE
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2021-07-14 Wed 12:16:43>
#+HTML_LINK_UP: ../readme.html
#+HTML_LINK_HOME: ../index.html
#+SETUPFILE: ~/.emacs.d/site-lisp/org-html-themes/setup/theme-readtheorg-local.setup
#+TAGS: java spring source


* Spring 核心类梳理
  1. ApplicationContext
     - AbstractApplicationContext
       + ~refresh()~ 实现 Spring Bean 加载的核心逻辑
  2. BeanDefinition
     - AbstractBeanDefinition
  3. BeanDefinitionReader
     - 读取 BeanDefinition 对象
  4. BeanFactory
     - Bean 工厂类
     - AbstractBeanFactory
       + ~doGetBean(...)~
  5. BeanFactoryPostProcessor
     - 函数式接口 ~@FunctionalInterface~
  6. BeanPostProcessor
     - 提供自定义 Bean 实例化的处理接口扩展
     - ~postProcessBeforeInitialization(Object bean, String beanName)~
       + Bean 实例化前置处理方法
     - ~postProcessAfterInitialization(Object bean, String beanName)~
       + Bean 实例化后置处理方法

* BeanFactory
** DefaultListableBeanFactory
   XmlBeanFactory 继承自 DefaultListableBeanFactory, 并且
   DefaultListableBeanFactory 实现了大部分的 Spring 注册及加载的实现

   [[file:../static/image/2021/07/DefaultListableBeanFactory.png]]

   该类定了 BeanDefinition 类的 Map
   #+BEGIN_SRC java
     /** Map of bean definition objects, keyed by bean name. */
     private final Map<String, BeanDefinition> beanDefinitionMap = new ConcurrentHashMap<>(256);

     /** Map of singleton and non-singleton bean names, keyed by dependency type. */
     private final Map<Class<?>, String[]> allBeanNamesByType = new ConcurrentHashMap<>(64);

     /** Map of singleton-only bean names, keyed by dependency type. */
     private final Map<Class<?>, String[]> singletonBeanNamesByType = new ConcurrentHashMap<>(64);

     /** List of bean definition names, in registration order. */
     private volatile List<String> beanDefinitionNames = new ArrayList<>(256);
   #+END_SRC

* ApplicationContext
