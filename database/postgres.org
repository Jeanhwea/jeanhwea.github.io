#+TITLE: PostgreSQL 关系数据库
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2018-12-10 Mon 11:04:00>
#+HTML_LINK_UP: ../readme.html
#+HTML_LINK_HOME: ../index.html
#+SETUPFILE: ~/.emacs.d/site-lisp/org-html-themes/setup/theme-readtheorg-local.setup
#+TAGS: postgresql install setup database

* PostgreSQL
  PostgreSQL 是一种特性非常齐全的自由软件的对象-关系型数据库管理系统（ORDBMS），
  是以加州大学计算机系开发的 POSTGRES，4.2 版本为基础的对象关系型数据库管理系统。
  POSTGRES 的许多领先概念只是在比较迟的时候才出现在商业网站数据库中。PostgreSQL
  支持大部分的 SQL 标准并且提供了很多其他现代特性，如复杂查询、外键、触发器、视
  图、事务完整性、多版本并发控制等。同样，PostgreSQL 也可以用许多方法扩展，例如
  通过增加新的数据类型、函数、操作符、聚集函数、索引方法、过程语言等。另外，因为
  许可证的灵活，任何人都可以以任何目的免费使用、修改和分发 PostgreSQL

* 安装
** Windows
   首先去官网上[[https://www.enterprisedb.com/downloads/postgres-postgresql-downloads][下载]]所需的安装文件

   [[file:../static/image/2018/12/postgresql-download.png]]

   我下载的是 ~postgresql-9.6.11-1-windows-x64.exe~ ，双击点开是直接报错安装不了，
   出现如下提示：

   [[file:../static/image/2018/12/postgresql-install-error.png]]

   通过网络资料查找得知，可以通过跳过本地 C++ 运行库来解决这个错误。具体安装使用
   如下命令行。

   #+BEGIN_SRC sh
     postgresql-9.6.11-1-windows-x64.exe --install_runtimes 0
   #+END_SRC

** MacOS
*** 使用 Homebrow 安装
    这里安装 9.6 版本的 postgres
    #+BEGIN_SRC sh
      brew install postgresql@9.6
    #+END_SRC

    Homebrew 安装过后的数据库不包含任何信息，需要初始化数据库基本信息文件
    #+BEGIN_SRC sh
      initdb /usr/local/var/postgresql@9.6 -E UTF8
    #+END_SRC

*** 初始创建数据库和账户
    #+BEGIN_SRC sh
      createdb
    #+END_SRC

*** 配置允许远程连接数据库
    postgres 默认只能通过 localhost 连接，如果需要建立远程连接则需要进行配置。找
    到 postgres 配置文件所在目录，homebrew 安装后默认配置文件位于
    =/usr/local/var/postgresql@9.6=

    修改 =postgresql.conf=: 配置监听任意 IP
    #+BEGIN_SRC conf
     listen_addresses = '*'
    #+END_SRC

    修改 =pg_hba.conf=: 配置服务端允许 MD5 认证方式，即使用用户名和密码登录
    #+BEGIN_SRC conf
     host all all 0.0.0.0/0 md5
    #+END_SRC

    修改过后需要重启才能生效

* psql 命令行工具
** 登录数据库
   直接将密码放到命令行中安全性低，可以被其它用户通过 ~ps~ 命令看到。PostgreSQL
   建议将密码统一存放在[[https://www.postgresql.org/docs/9.6/libpq-pgpass.html][本地文件]]中，文件的路径如下：
   - Mac & Linux: =~/.pgpass=
   - Windows: =%APPDATA%\postgresql\pgpass.conf=

   Unix 操作系统上还需要需要设置密码文件的访问权限
   #+BEGIN_SRC sql
     touch ~/.pgpass
     chmod 0600 ~/.pgpass
   #+END_SRC

   密码文件的格式如下：
   #+BEGIN_SRC text
     hostname:port:database:username:password
   #+END_SRC
   - 使用 =#= 可以注释
   - 前四个字段可以是 =*= ，表示匹配任何数据项

   #+BEGIN_SRC sh
     psql -U user -d database -h hostname
   #+END_SRC

** Ubuntu 下登录 PostgreSQL
   Ubuntu 操作系统中默认可以通过 postgres 用户直接进入数据库
   #+BEGIN_SRC sh
     sudo -u postgres psql
   #+END_SRC

** 常见控制台命令
   #+BEGIN_SRC text
     \password：设置当前登录用户的密码
     \h：查看 SQL 命令的解释，比如\h select。
     \?：查看 psql 命令列表。
     \l：列出所有数据库。
     \c [database_name]：连接其他数据库。
     \d：列出当前数据库的所有表格。
     \d [table_name]：列出某一张表格的结构。
     \du：列出所有用户。
     \e：打开文本编辑器。
     \conninfo：列出当前数据库和连接的信息。
     \password [user]: 修改用户密码
     \q：退出
   #+END_SRC

** 查看表结构及注释
   psql 的可以使用 ~\d~ 显示一个表的结构，如果需要显示每行的注释，可以使用 ~\d+~
   选项。
   #+BEGIN_SRC text
     pgdb=> \d students;
                                       Table "public.students"
        Column   |            Type             |                    Modifiers
     ------------+-----------------------------+-------------------------------------------------
      id         | integer                     | not null default nextval('global_id'::regclass)
      code       | character varying(32)       |
      created_at | timestamp without time zone | not null default now()
      updated_at | timestamp without time zone | not null default now()
      name       | character varying(64)       | not null
      gender     | character varying(1)        |
      phone      | character varying(16)       |
      joined_at  | date                        |
     Indexes:
         "students_pkey" PRIMARY KEY, btree (id)
     Referenced by:
         TABLE "course_students" CONSTRAINT "course_students_student_id_fkey" FOREIGN KEY (student_id) REFERENCES students(id)
         TABLE "scores" CONSTRAINT "scores_student_id_fkey" FOREIGN KEY (student_id) REFERENCES students(id)

     pgdb=> \d+ students;
                                                                Table "public.students"
        Column   |            Type             |                    Modifiers                    | Storage  | Stats target |     Description
     ------------+-----------------------------+-------------------------------------------------+----------+--------------+----------------------
      id         | integer                     | not null default nextval('global_id'::regclass) | plain    |              |
      code       | character varying(32)       |                                                 | extended |              |
      created_at | timestamp without time zone | not null default now()                          | plain    |              |
      updated_at | timestamp without time zone | not null default now()                          | plain    |              |
      name       | character varying(64)       | not null                                        | extended |              |
      gender     | character varying(1)        |                                                 | extended |              | M = Male, F = Female
      phone      | character varying(16)       |                                                 | extended |              |
      joined_at  | date                        |                                                 | plain    |              |
     Indexes:
         "students_pkey" PRIMARY KEY, btree (id)
     Referenced by:
         TABLE "course_students" CONSTRAINT "course_students_student_id_fkey" FOREIGN KEY (student_id) REFERENCES students(id)
         TABLE "scores" CONSTRAINT "scores_student_id_fkey" FOREIGN KEY (student_id) REFERENCES students(id)
   #+END_SRC

** 竖行显示查询结果
   有时候查看的行数比较多，不方便一次性浏览，可以使用 ~\x~ 来开启竖行显示，这样
   结果更加易读。
   #+BEGIN_SRC text
     pgdb=> select * from users;
        id   | code |         created_at         |         updated_at         | username  |  nickname  | password |  birthday
     --------+------+----------------------------+----------------------------+-----------+------------+----------+------------
      100001 |      | 2019-06-20 20:05:56.214153 | 2019-06-20 20:05:56.214153 | admin     | SuperUser  |          |
      100000 |      | 2019-06-20 20:05:56.116695 | 2019-06-22 22:21:48.667    | hujinghui | Jinghui Hu |          | 1992-06-15
     (2 rows)

     pgdb=> \x
     Expanded display is on.

     pgdb=> select * from users;
     -[ RECORD 1 ]--------------------------
     id         | 100001
     code       |
     created_at | 2019-06-20 20:05:56.214153
     updated_at | 2019-06-20 20:05:56.214153
     username   | admin
     nickname   | SuperUser
     password   |
     birthday   |
     -[ RECORD 2 ]--------------------------
     id         | 100000
     code       |
     created_at | 2019-06-20 20:05:56.116695
     updated_at | 2019-06-22 22:21:48.667
     username   | hujinghui
     nickname   | Jinghui Hu
     password   |
     birthday   | 1992-06-15
   #+END_SRC

* 数据库
** 查看数据库基本信息
   #+BEGIN_SRC sql
     -- 查看所有数据库列表
     \l
     -- 查看当前数据库
     SELECT current_database();
   #+END_SRC

** 创建用户及数据库
   #+BEGIN_SRC sql
     CREATE DATABASE dbname OWNER username;
     GRANT ALL PRIVILEGES ON DATABASE dbname TO username;
   #+END_SRC

* 表
** 查看表基本信息
   #+BEGIN_SRC sql
     -- 查看当前数据库的所有表
     \dt
     -- 查看全局的表
     \dt *.*
   #+END_SRC

** 创建表
   #+BEGIN_SRC sql
     CREATE TABLE <table_name> (
       <column_name> <column_type>,
       <column_name> <column_type>,
       <column_name> <column_type>
     );
     -- 删除表
     DROP TABLE IF EXISTS <table_name> CASCADE;
   #+END_SRC

   #+BEGIN_SRC sql
     -- 创建用户表的例子
     create sequence global_id
       increment by 1
       minvalue 1 no maxvalue
       start with 9999;

     create table users (
       id int primary key not null default nextval('global_id'),
       code varchar(32), -- data is invalid when code is null
       created_at timestamp without time zone not null default current_timestamp,
       updated_at timestamp without time zone not null default current_timestamp,
       username varchar(64) not null,
       nickname varchar(64),
       password varchar(128),

       birthday date,
       constraint unique_username unique (username)
     );
     alter table users owner to <tabowner_name>;
     comment on table users is '用户表';
     comment on column users.username is '用户登录的用户名';
     comment on column users.nickname is '用户昵称';
   #+END_SRC

   #+BEGIN_SRC sql
     drop table if exists tb_users;

     create table if not exists tb_users (
       id serial not null, -- serial 表示 pg 会自动创建一个自增的序列
       available boolean not null default true, -- available 表示当前数据是否可用
       created_at timestamp not null default current_timestamp,
       updated_at timestamp not null default current_timestamp,
       tag varchar(64) not null, -- tag 一般是人能看懂的标签
       name varchar(64) not null,
       info json, -- pg 支持 json 类型的字段
       constraint tb_users_pk primary key (id)
     );
   #+END_SRC

* 用户/权限
** 查看用户基本信息
   #+BEGIN_SRC sql
     -- 查看所有用户列表:
     SELECT rolname FROM pg_roles;
     -- 查看当前用户:
     SELECT current_user;
     -- 查看当前用户权限
     \du
   #+END_SRC

** 创建用户
   #+BEGIN_SRC sql
     CREATE USER username WITH PASSWORD password_string;
   #+END_SRC

** 修改用户密码
   #+BEGIN_SRC sql
     ALTER USER postgres WITH PASSWORD 'postgres';
   #+END_SRC

* 常用命令速查
** 数据库相关的操作命令
   #+BEGIN_SRC sql
      -- 连接数据库
      \c <database_name>
      -- 创建数据库
      CREATE DATABASE <database_name> WITH OWNER <username>;
      -- 删除数据库
      DROP DATABASE IF EXISTS <database_name>;
      -- 重命名数据库
      ALTER DATABASE <old_name> RENAME TO <new_name>;
   #+END_SRC

** 用户信息相关的操作命令
   #+BEGIN_SRC sql
     -- 查看所有用户
     select rolname from pg_roles;
     -- 创建用户
     create user < user_name > with password '<password>';
     -- 删除用户
     drop user if exists < user_name >;
     -- 修改用户密码
     alter role < user_name > with password '<password>';
   #+END_SRC

** 数据备份与还原
   #+BEGIN_SRC sh
     # 备份数据库
     pg_dump <database_name>
     # 还原数据库
     pg_restore -d <database_name> -a <file_pathway>
   #+END_SRC

   #+BEGIN_SRC sql
     -- 导出 csv 文件
     \copy <table_name> to '<file_path>' csv;
     -- 导入 csv 文件
     \copy <table_name> from '<file_path>' csv;
   #+END_SRC

** 导出数据库表
   导出多个表可创建如下的文件，然后直接使用命令行执行脚本的方式导出文件
   #+BEGIN_SRC sql
     -- dump.sql
     set client_encoding = 'GBK'; -- Windows 的 Excel 只认 GBK 格式
     \copy (select * from vw_products) to '1.基础表.产品表.csv' with csv header;
     \copy (select u.tag as unit_tag from vm_unit u) to '2.关联表.csv' with csv header;
   #+END_SRC

   使用命令执行脚本导出
   #+BEGIN_SRC sh
     psql -U user -h host -d database -f dump.sql
   #+END_SRC

* 参考链接
  1. [[https://www.postgresql.org/docs/current/index.html][postgres docs]]
