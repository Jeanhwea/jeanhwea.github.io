#+TITLE: Redis
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2021-07-07 Wed 16:51:42>
#+HTML_LINK_UP: ../readme.html
#+HTML_LINK_HOME: ../index.html
#+SETUPFILE: ~/.emacs.d/site-lisp/org-html-themes/setup/theme-readtheorg-local.setup
#+TAGS: memory redis


* Redis 特性
  1. 速度快
     - 内存数据库
     - I/O 多路复用
     - 协议简单
     - C 语言开发
  2. 键值对的数据结构服务器
     - key 永远是 String
     - value 可以是多种类型, 可以通过 ~object encoding <key>~ 来查看
  3. 丰富的功能
  4. 简单稳定
     - 主线程是单线程
  5. 持久化
     - RDB (Redis DataBase)
     - AOF (Append-Only File)
  6. 主从复制
  7. 高可用和分布式转移
  8. 客户端语言多

* Redis 使用场景
  1. 缓存数据库
  2. 排行榜
  3. 计数器
  4. 社交网络
  5. 消息队列
  6. 分布式锁

* Redis 的安装及使用
  下载并安装
  #+BEGIN_SRC sh
    wget https://download.redis.io/releases/redis-6.2.5.tar.gz
    tar xzf redis-6.2.5.tar.gz
    cd redis-6.2.5
    make
  #+END_SRC

  启动 Redis Server
  #+BEGIN_SRC sh
    src/redis-server
  #+END_SRC

  客户端连接 Redis
  #+BEGIN_SRC sh
    $ src/redis-cli
    redis> set foo bar
    OK
    redis> get foo
    "bar"
  #+END_SRC

* Redis 的内部数据结构
** 简单动态字符串 (Simple Dynamic String)
   1. sds 是对 C 语言字符串的扩展, 除了记录底层字符串，还缓存了当前长度
      #+BEGIN_SRC c
        // sds 的实现结构体不止一个，但是定义的方式类似，只是操作系统位数不一致
        // 下面以 sdshdr64 为例展示
        struct __attribute__ ((__packed__)) sdshdr64 {
          uint64_t len; /* used */
          uint64_t alloc; /* excluding the header and null terminator */
          unsigned char flags; /* 3 lsb of type, 5 unused bits */
          char buf[];
        };
      #+END_SRC
   2. Redis 的字符串是 _二进制安全_
   3. 对比 C 语言字符串，提供了如下的特性
      - 高效计算字符串长度 ~strlen~
      - 高效追加字符串 ~append~
   4. 代码实现在 ~sds.h~ 和 ~sds.c~ 两个文件中

** 双端链表 (Doubly Linked List)
   1. 代码实现在 ~adlist.h~ 和 ~adlist.c~ 两个文件中
   2. 该数据结构的定义如下
      #+BEGIN_SRC c
        typedef struct listNode { // 记录链表节点
          struct listNode *prev;
          struct listNode *next;
          void *value;
        } listNode;

        typedef struct listIter { // 记录链表的迭代器
          listNode *next;
          int direction;
        } listIter;

        typedef struct list { // 链表的数据结构
          listNode *head;
          listNode *tail;
          void *(*dup)(void *ptr);
          void (*free)(void *ptr); // 记录链表的空闲指针
          int (*match)(void *ptr, void *key); // 匹配的函数指针
          unsigned long len; // 缓存链表长度
        } list;
      #+END_SRC

** 字典 (Hash Table)
   1. 代码实现在 ~dict.h~ 和 ~dict.c~ 两个文件中
   2. 字典的实现在 Redis 中有两个作用
      - 实现数据库键空间 (Key Space), 例如: ~DBSIZE~, ~FLUSHDB~, ~RANDOMKEY~
      - 用作 Hash 类型键的底层实现之一
   3. 该数据结构的定义如下
      #+BEGIN_SRC c
        typedef struct dictEntry { // 字典项定义
          void *key;
          union {
            void *val;
            uint64_t u64;
            int64_t s64;
            double d;
          } v;
          struct dictEntry *next; // 指向相应数据项
        } dictEntry;

        typedef struct dictType {
          uint64_t (*hashFunction)(const void *key);
          void *(*keyDup)(void *privdata, const void *key);
          void *(*valDup)(void *privdata, const void *obj);
          int (*keyCompare)(void *privdata, const void *key1, const void *key2);
          void (*keyDestructor)(void *privdata, void *key);
          void (*valDestructor)(void *privdata, void *obj);
          int (*expandAllowed)(size_t moreMem, double usedRatio);
        } dictType;

        /* This is our hash table structure. Every dictionary has two of this as we
         ,* implement incremental rehashing, for the old to the new table. */
        // 每个字典的 entry 有两个 dictht, 主要目的是可以快速 rehash
        typedef struct dictht {
          dictEntry **table; // 哈希桶 bucket
          unsigned long size; // 指针数组大小 bucket size
          unsigned long sizemask; // 指针数组长度掩码，用于计算索引值
          unsigned long used; // 哈希表现有节点数量
        } dictht;

        typedef struct dict { // 字典数据类型的定义
          dictType *type;
          void *privdata;
          dictht ht[2];
          long rehashidx; /* rehashing not in progress if rehashidx == -1 */
          int16_t pauserehash; /* If >0 rehashing is paused (<0 indicates coding error) */
        } dict;

        /* If safe is set to 1 this is a safe iterator, that means, you can call
         ,* dictAdd, dictFind, and other functions against the dictionary even while
         ,* iterating. Otherwise it is a non safe iterator, and only dictNext()
         ,* should be called while iterating. */
        typedef struct dictIterator {
          dict *d;
          long index; // 正在迭代的数组索引
          int table, safe; // table 表示正在迭代的号码（0或1）, safe=1, 表示迭代过程中修改哈希表
          dictEntry *entry, *nextEntry;
          /* unsafe iterator fingerprint for misuse detection. */
          long long fingerprint;
        } dictIterator;

        typedef void (dictScanFunction)(void *privdata, const dictEntry *de);
        typedef void (dictScanBucketFunction)(void *privdata, dictEntry **bucketref);

        /* This is the initial size of every hash table */
        #define DICT_HT_INITIAL_SIZE     4
      #+END_SRC
   4. 字典的每个项记录两个 ~dictht~
      - ~ht[0]~ 是字典主要使用的哈希表，
      - ~ht[1]~ 则只有在程序对 ~ht[0]~ 进行 rehash 时才使用
   5. ~dictCreate()~ 创建新的字典
      - ~dictCreate()~ 创建了 ~dict~ 和两个 ~dictht~
      - ~dictCreate()~ 并没有给 ~dictht~ 的 ~table~ 分配空间
   6. ~dictAdd()~ 表示向字典中添加 ~dictEntry~ 数据
      - 该过程可能触发 rehash
        + rehash 可以是扩展数据，也可能是收缩数据 (shrink)
      - rehash 使用 ~ht[1]~ 作为中转节点
      - 为了 hash 效率, Redis 采用渐进式哈希
        + ~_dictRehashStep~ 用于对数据库字典、以及哈希键的字典进行被动 rehash
        + ~dictRehashMilliseconds~ 则由 Redis 服务器常规任务程序执行，用于对数据
          库字典进行主动 rehash
   7. 字典使用 _链地址_ 解决哈希冲突

** 跳跃表 (Skip List)
   1. 跳跃表主要使用场景就是 _有序集合_ zset
      - 包含的元素数量比较多
      - 元素成员 (member) 是比较长的字符串
   2. 跳跃表以有序的方式在 _层次化_ 的链表中保存元素， 效率和平衡树媲美
   3. 查找、删除、添加等操作都可以在 _O(logN)_ 期望时间下完成
   4. 比起平衡树来说， 跳跃表的实现要简单直观得多
   5. 跳跃表的构成部分
      - 表头 (head): 负责维护跳跃表的节点指针
      - 跳跃表节点: 保存着元素值，以及多个层
      - 层: 保存着指向其他元素的指针
        + 高层的指针越过的元素数量大于等于低层的指针
        + 为了提高查找的效率，程序总是从高层先开始访问，然后随着元素值范围的缩小，
          慢慢降低层次
      - 表尾: 全部由 NULL 组成，表示跳跃表的末尾
   6. 跳跃表的定义位于 ~server.h~ 中
      #+BEGIN_SRC c
        /* ZSETs use a specialized version of Skiplists */
        typedef struct zskiplistNode {
            sds ele;
            double score;
            struct zskiplistNode *backward; // 后退指针
            struct zskiplistLevel { // 层
                struct zskiplistNode *forward; // 前进指针
                unsigned long span; // 该层跨域的节点数量
            } level[]; // level[] 在 Redis 中是 1 到 32 的随机数
        } zskiplistNode;

        typedef struct zskiplist {
            struct zskiplistNode *header, *tail; // 头节点和尾节点
            unsigned long length; // 节点数量
            int level; // 目前表内节点的最大层数
        } zskiplist;
      #+END_SRC
   7. Redis 在 William Pugh 关于 Skip List 的设计中进行修改，满足自身查询的需求
      - score 值可重复
      - 对比一个元素需要同时检查它的 score 和 member
      - 每个节点带有高度为 1 层的后退指针，用于从表尾方向向表头方向迭代

* Redis 的数据类型
  1. string 字符串, 整数, 浮点数
     - 二进制安全, 可以存储图片和序列化对象, 最多可存储 512M 的数据
     - get/set/del
     - mset 多个键设置
     - incr/decr
     - strlen/append
  2. hash 哈希表
     - hmset/hget/hgetall
     - 物理存储会在 ziplist 和 hashtable 两种类型中转换
     - ziplist 比 hashtable 节约空间，默认使用 ziplist
     - 当有需要时，Redis 会自动将 ziplist 转成 hashtable
  3. list 列表
     - 列表是一个双向链表, 最多存储 ~2^32-1~ 个元素
     - lpush/lpop/rpush/rpop
     - lrange key 0 10
     - llen
  4. set 集合
     - sadd/smembers
  5. zset 有序集合
     - 有序的集合类型, 键是不可重复的
     - zadd

  整数操作
  #+BEGIN_SRC text
    127.0.0.1:6379> flushdb
    OK
    127.0.0.1:6379> set hello 'world'
    OK
    127.0.0.1:6379> keys *
    1) "hello"
    127.0.0.1:6379> get hello
    "world"
    127.0.0.1:6379> append hello '!'
    (integer) 6
    127.0.0.1:6379> get hello
    "world!"
  #+END_SRC

  计数器
  #+BEGIN_SRC text
    127.0.0.1:6379> set count 1
    OK
    127.0.0.1:6379> incr count
    (integer) 2
    127.0.0.1:6379> get count
    "2"
    127.0.0.1:6379> incr count
    (integer) 3
    127.0.0.1:6379>
  #+END_SRC

  哈希使用
  #+BEGIN_SRC text
    127.0.0.1:6379> flushdb
    OK
    127.0.0.1:6379> hmset user name zhang age 12
    OK
    127.0.0.1:6379> hgetall user
    1) "name"
    2) "zhang"
    3) "age"
    4) "12"
  #+END_SRC

  集合操作
  #+BEGIN_SRC text
    127.0.0.1:6379> sadd course math
    (integer) 1
    127.0.0.1:6379> sadd course chinese
    (integer) 1
    127.0.0.1:6379> object encoding course
    "hashtable"
    127.0.0.1:6379> smembers course
    1) "math"
    2) "chinese"
  #+END_SRC

  获取对象存储类型
  #+BEGIN_SRC text
    127.0.0.1:6379> keys *
    1) "a"
    2) "str1"
    127.0.0.1:6379> object encoding a
    "quicklist"
    127.0.0.1:6379> object encoding str1
    "embstr"
  #+END_SRC

* Redis 缓存相关问题
  1. *缓存穿透* 指查询一个数据库中不存在的数据
     - 容易产生对数据库过大的访问压力导致数据库崩溃
     - 解决方案: 设置缓存过期时间, 即使未查到时设置一个空值
  2. *缓存雪崩* 指在某一个时间段, 缓存集中失效
     - 对数据库产生周期性的压力
     - 解决方案: 对冷数据, 超时设置短一点, 对热数据, 超时设置长一点
  3. *缓存击穿* 指一个非常热的 Key, 在失效的瞬间大并发量把数据库击穿
     - 瞬间并发量高, 直接把数据库打崩溃掉
     - 解决方案: 对于特别大的热 Key, 可以设置永不过期

* 相关连接
  1. [[https://redis.io/][Redis Official Site]]
  2. [[http://origin.redisbook.com/][Redis 设计与实现（第一版）]]
  3. [[https://github.com/huangz1990/redisbook][《Redis 设计与实现》第一版的原稿]]
