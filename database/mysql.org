#+TITLE: MySQL 关系数据库
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2019-07-05 Fri>
#+TAGS: mysql database


* 简介
  [[http://www.mysql.com][MySQL]] 是一个关系型数据库管理系统，由瑞典 MySQL AB 公司开发，目前属于 Oracle 旗
  下产品。MySQL 是最流行的关系型数据库管理系统之一，在 WEB 应用方面，MySQL 是最好
  的 RDBMS (Relational Database Management System，关系数据库管理系统) 应用软件
  之一。

** 安装 MySQL
*** Mac
    Mac 上当然是使用 Homebrew 安装最省心了，
    #+BEGIN_SRC sh
      brew install mysql@5.7
      # 初始化数据库
      sudo mysql_secure_installation
      # 添加到 homebrew 的服务
      brew services start mysql@5.7
    #+END_SRC

    使用命令行登录方法：
    #+BEGIN_SRC text
      % mysql -uroot -p
      Enter password:
      Welcome to the MySQL monitor.  Commands end with ; or \g.
      Your MySQL connection id is 902
      Server version: 5.7.25 Homebrew

      Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.

      Oracle is a registered trademark of Oracle Corporation and/or its
      affiliates. Other names may be trademarks of their respective
      owners.

      Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

      mysql>
    #+END_SRC
    #+BEGIN_SRC sh
      mysql -h <host> -u <user> -p <password> <database>
    #+END_SRC

*** Windows
    提前下载 MySQL 社区版（ [[https://dev.mysql.com/downloads/mysql/][最新版]]，[[https://dev.mysql.com/downloads/mysql/5.7.html#downloads][5.7]]）的安装文件，直接根据提示安装。
*** Unix
    Mysql 依赖 libaio 库，在安装 mysql 的机器时需要提前安装 libaio 库。
    #+BEGIN_SRC sh
      apt-get install libaio1
      apt-get install mysql-client mysql-server
    #+END_SRC

** 参考手册
   1. [[https://dev.mysql.com/doc/][MySQL 文档]]
   2. [[https://hub.docker.com/_/mysql][MySQL on Docker Hub]]

* 数据库操作
** 查看数据库基本信息
   #+BEGIN_SRC sql
     mysql> SELECT database();
     +------------+
     | database() |
     +------------+
     | sellsys    |
     +------------+
     1 row in set (0.01 sec)

     mysql> SELECT now();
     +---------------------+
     | now()               |
     +---------------------+
     | 2019-07-05 20:26:38 |
     +---------------------+
     1 row in set (0.00 sec)

     mysql> SELECT user();
     +-----------------------+
     | user()                |
     +-----------------------+
     | selladmin@192.168.1.5 |
     +-----------------------+
     1 row in set (0.01 sec)

     mysql> SELECT version();
     +-----------+
     | version() |
     +-----------+
     | 5.7.25    |
     +-----------+
     1 row in set (0.00 sec)

     mysql> SHOW PROCESSLIST; -- 查看哪些线程正在运行
     +-----+-----------+-------------------+---------+---------+------+----------+------------------+
     | Id  | User      | Host              | db      | Command | Time | State    | Info             |
     +-----+-----------+-------------------+---------+---------+------+----------+------------------+
     | 900 | selladmin | 192.168.1.5:52231 | sellsys | Query   |    0 | starting | SHOW PROCESSLIST |
     +-----+-----------+-------------------+---------+---------+------+----------+------------------+
     1 row in set (0.00 sec)

     mysql> SHOW DATABASES;
     +--------------------+
     | Database           |
     +--------------------+
     | information_schema |
     | sellsys            |
     +--------------------+
     2 rows in set (0.01 sec)

     mysql> SHOW CREATE DATABASE sellsys;
     +----------+---------------------------------------------------------------------+
     | Database | Create Database                                                     |
     +----------+---------------------------------------------------------------------+
     | sellsys  | CREATE DATABASE `sellsys` /*!40100 DEFAULT CHARACTER SET utf8mb4 */ |
     +----------+---------------------------------------------------------------------+
     1 row in set (0.00 sec)
   #+END_SRC

** 查看数据库中所有的表
   #+BEGIN_SRC sql
     mysql> SHOW TABLES;
     +-------------------+
     | Tables_in_sellsys |
     +-------------------+
     | customers         |
     | order_items       |
     | orders            |
     | product_notes     |
     | products          |
     | vendors           |
     +-------------------+
     6 rows in set (0.02 sec)
   #+END_SRC
** 创建/删除数据库
   为了节约存储空间，MySQL 的编码中 utf8 是三个字节的编码，utf8mb4 才是真正的四
   字节。如果设置数据库编码为 utf8 会导致 emoji 无法存入数据库，所以最好默认设置
   utf8mb4 编码。
   #+BEGIN_SRC sql
     CREATE DATABASE [IF NOT EXISTS] dbname
       DEFAULT CHARACTER SET utf8mb4;

     DROP DATABASE [IF EXISTS] <dbname>;
   #+END_SRC

** 字符编码和校对集
   数据编码与客户端编码不需一致
   #+BEGIN_SRC sql
     -- 查看所有字符集编码项
     SHOW VARIABLES LIKE 'character_set_%';
     -- character_set_client        客户端向服务器发送数据时使用的编码
     -- character_set_results       服务器端将结果返回给客户端所使用的编码
     -- character_set_connection    连接层编码

     -- 设置变量值
     SET variable_name = value;

     SET character_set_client = utf8;
     SET character_set_results = utf8;
     SET character_set_connection = utf8;
     SET NAMES utf8; -- 相当于上述三个设置

     -- 校对集, 校对集用以排序
     -- 查看所有字符集
     SHOW CHARACTER SET [LIKE 'pattern']/SHOW CHARSET [LIKE 'pattern'];
     -- 查看所有校对集
     SHOW COLLATION [LIKE 'pattern'];
     -- 设置字符集编码
     CHARSET charset_name;
     -- 设置校对集编码
     COLLATE collate_name;
   #+END_SRC

   Mac 下 client 编码不一致导致插入数据出现问题的解决案例
   #+BEGIN_SRC text
     mysql> insert cust (name) values('函数');
     ERROR 1366 (HY000): Incorrect string value: '\xE5\x87\xBD\xE6\x95\xB0' for column 'name' at row 1
     mysql> status
     --------------
     mysql  Ver 14.14 Distrib 5.7.23, for osx10.12 (x86_64) using  EditLine wrapper

     Connection id:		2
     Current database:	sellsys
     Current user:		root@172.17.0.1
     SSL:			Cipher in use is DHE-RSA-AES256-SHA
     Current pager:		less
     Using outfile:		''
     Using delimiter:	;
     Server version:		5.7.26 MySQL Community Server (GPL)
     Protocol version:	10
     Connection:		127.0.0.1 via TCP/IP
     Server characterset:	latin1
     Db     characterset:	latin1
     Client characterset:	utf8
     Conn.  characterset:	utf8
     TCP port:		3306
     Uptime:			18 min 40 sec

     Threads: 2  Questions: 82  Slow queries: 0  Opens: 139  Flush tables: 1  Open tables: 130  Queries per second avg: 0.073
     --------------

     mysql> SHOW VARIABLES LIKE 'character_set_%';
     +--------------------------+----------------------------+
     | Variable_name            | Value                      |
     +--------------------------+----------------------------+
     | character_set_client     | utf8                       |
     | character_set_connection | utf8                       |
     | character_set_database   | latin1                     |
     | character_set_filesystem | binary                     |
     | character_set_results    | utf8                       |
     | character_set_server     | latin1                     |
     | character_set_system     | utf8                       |
     | character_sets_dir       | /usr/share/mysql/charsets/ |
     +--------------------------+----------------------------+
     8 rows in set (0.01 sec)

     mysql> set character_set_database = utf8;
     Query OK, 0 rows affected, 1 warning (0.00 sec)

     mysql> set character_set_server = utf8;
     Query OK, 0 rows affected (0.00 sec)

     mysql> SHOW VARIABLES LIKE 'character_set_%';
     +--------------------------+----------------------------+
     | Variable_name            | Value                      |
     +--------------------------+----------------------------+
     | character_set_client     | utf8                       |
     | character_set_connection | utf8                       |
     | character_set_database   | utf8                       |
     | character_set_filesystem | binary                     |
     | character_set_results    | utf8                       |
     | character_set_server     | utf8                       |
     | character_set_system     | utf8                       |
     | character_sets_dir       | /usr/share/mysql/charsets/ |
     +--------------------------+----------------------------+
     8 rows in set (0.01 sec)

     mysql> status
     --------------
     mysql  Ver 14.14 Distrib 5.7.23, for osx10.12 (x86_64) using  EditLine wrapper

     Connection id:		2
     Current database:	sellsys
     Current user:		root@172.17.0.1
     SSL:			Cipher in use is DHE-RSA-AES256-SHA
     Current pager:		less
     Using outfile:		''
     Using delimiter:	;
     Server version:		5.7.26 MySQL Community Server (GPL)
     Protocol version:	10
     Connection:		127.0.0.1 via TCP/IP
     Server characterset:	utf8
     Db     characterset:	utf8
     Client characterset:	utf8
     Conn.  characterset:	utf8
     TCP port:		3306
     Uptime:			20 min 50 sec

     Threads: 2  Questions: 91  Slow queries: 0  Opens: 140  Flush tables: 1  Open tables: 131  Queries per second avg: 0.072
     --------------

     mysql> drop database sellsys;
     Query OK, 1 row affected (0.02 sec)

     mysql> create database aa;
     Query OK, 1 row affected (0.00 sec)

     mysql> show create database aa;
     +----------+-------------------------------------------------------------+
     | Database | Create Database                                             |
     +----------+-------------------------------------------------------------+
     | aa       | CREATE DATABASE `aa` /*!40100 DEFAULT CHARACTER SET utf8 */ |
     +----------+-------------------------------------------------------------+
     1 row in set (0.00 sec)

     mysql> status
     --------------
     mysql  Ver 14.14 Distrib 5.7.23, for osx10.12 (x86_64) using  EditLine wrapper

     Connection id:		2
     Current database:
     Current user:		root@172.17.0.1
     SSL:			Cipher in use is DHE-RSA-AES256-SHA
     Current pager:		less
     Using outfile:		''
     Using delimiter:	;
     Server version:		5.7.26 MySQL Community Server (GPL)
     Protocol version:	10
     Connection:		127.0.0.1 via TCP/IP
     Server characterset:	utf8
     Db     characterset:	utf8
     Client characterset:	utf8
     Conn.  characterset:	utf8
     TCP port:		3306
     Uptime:			22 min 9 sec

     Threads: 2  Questions: 99  Slow queries: 0  Opens: 140  Flush tables: 1  Open tables: 130  Queries per second avg: 0.074
     --------------

     mysql> use aa;
     Database changed
     mysql> create table cust(id int primary key auto_increment, name varchar(32));
     Query OK, 0 rows affected (0.03 sec)

     mysql> show create table cust\G
     *************************** 1. row ***************************
            Table: cust
     Create Table: CREATE TABLE `cust` (
       `id` int(11) NOT NULL AUTO_INCREMENT,
       `name` varchar(32) DEFAULT NULL,
       PRIMARY KEY (`id`)
     ) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8
     1 row in set (0.00 sec)

     mysql> insert cust (name) values('函数');
     Query OK, 1 row affected (0.01 sec)

     mysql> select * from cust;
     +----+--------+
     | id | name   |
     +----+--------+
     |  1 | 函数   |
     +----+--------+
     1 row in set (0.01 sec)

     mysql>
   #+END_SRC
* 表操作
** 创建表
   - ~TEMPORARY~ : 临时表，会话结束时表自动消失
   - 列定义：每个字段必须有数据类型，最后一个字段后不能有逗号
   - 字符集: ~CHARSET=charset_name~ 如果表没有设定，则使用数据库字符集
   - 存储引擎: ~ENGINE=engine_name~ 表在管理数据时采用的不同的数据结构，结构不同
     会导致处理方式、提供的特性操作等不同常见的引擎：InnoDB MyISAM Memory/Heap
     BDB Merge Example CSV MaxDB Archive 不同的引擎在保存表的结构和数据时采用不同
     的方式
     + MyISAM 表文件含义：.frm 表定义，.MYD 表数据，.MYI 表索引
     + InnoDB 表文件含义：.frm 表定义，表空间数据和日志文件
     + ~SHOW ENGINES~ :显示存储引擎的状态信息
     + ~SHOW ENGINE engine_name {LOGS|STATUS}~ :显示存储引擎的日志或状态信息
   - 数据文件目录 ~DATA DIRECTORY = 'folder'~
   - 索引文件目录 ~INDEX DIRECTORY = 'folder'~
   - 表注释 ~COMMENT = 'string'~
   #+BEGIN_SRC sql
     CREATE [TEMPORARY] TABLE[ IF NOT EXISTS] [dbname.]tabname (
       -- columns defines
       colname dbtype [NOT NULL | NULL] [DEFAULT DEFAULT_VALUE]
         [AUTO_INCREMENT] [UNIQUE [KEY] | [PRIMARY] KEY] [COMMENT 'STRING']
     ) [others];

     -- example
     CREATE TABLE `customers` (
       `cust_id` int(11) NOT NULL AUTO_INCREMENT,
       `cust_name` char(50) NOT NULL,
       `cust_address` char(50) DEFAULT NULL,
       `cust_city` char(50) DEFAULT NULL,
       `cust_state` char(5) DEFAULT NULL,
       `cust_zip` char(10) DEFAULT NULL,
       `cust_country` char(50) DEFAULT NULL,
       `cust_contact` char(50) DEFAULT NULL,
       `cust_email` char(255) DEFAULT NULL,
       PRIMARY KEY (`cust_id`)
     ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
   #+END_SRC
*** 数据类型
**** 整型
     - ~int(M)~ : M 表示总位数
     - 默认存在符号位, 使用 ~unsigned~ 来显示指定成无符号存储
     - 显示宽度，如果某个数不够定义字段时设置的位数，则前面以 0 补填, ~zerofill~
       属性修改 例：~int(5)~ 插入一个数 '123' , 补填后为 '00123'
     - 在满足要求的情况下，越小越好。
     - 1 表示真，0 表示假。MySQL 没有布尔类型，通过整型 0 和 1 表示。常用
       ~tinyint(1)~ 表示布尔型。

     | 类型      | 字节   | 范围（有符号位）   | 无符号位 |
     |-----------+--------+--------------------+----------|
     | tinyint   | 1 字节 | -128 ~ 127         | 0 ~ 255  |
     | smallint  | 2 字节 | -32768 ~ 32767     |          |
     | mediumint | 3 字节 | -8388608 ~ 8388607 |          |
     | int       | 4 字节 |                    |          |
     | bigint    | 8 字节 |                    |          |

**** 浮点型
     - 浮点型既支持符号位 ~unsigned~ 属性，也支持显示宽度 ~zerofill~ 属性。不同
       于整型，前后均会补填 0. 定义浮点型时，需指定总位数和小数位数。
     - ~float(M, D)~ ~double(M, D)~ : M 表示总位数，D 表示小数位数。 M 和 D 的大
       小 会决定浮点数的范围。不同于整型的固定范围。M 既表示总位数（不包括小数点
       和正 负号），也表示显示宽度（所有显示符号均包括）。支持科学计数法表示。浮
       点数表 示近似值。

     | 类型   | 字节   | 范围 |
     |--------+--------+------|
     | float  | 4 字节 |      |
     | double | 8 字节 |      |

**** 定点型
     - decimal 可变长度。 ~decimal(M, D)~ M 也表示总位数，D表示小数位数。保存一
       个精确的数值，不会发生数据的改变，不同于浮点数的四舍五入。将浮点数转换为
       字符串来保存，每 9 位数字保存为 4 个字节。

**** 字符串
     - char 定长字符串，速度快，但浪费空间
     - varchar 变长字符串，速度慢，但节省空间 M 表示能存储的最大长度，此长度是字
       符数，非字节数。 不同的编码，所占用的空间不同。char 最多 255 个字符，与编
       码无关。varchar 最多 65535 字符，与编码有关。 一条有效记录最大不能超过
       65535 个字节。utf8 最大 为 21844 个字符，gbk 最大为 32766 个字符，latin1
       最大为 65532 个字符 varchar 是变长的，需要利用存储空间保存 varchar 的长度，
       如果数据小于 255 个 字节，则采用一个字节来保存长度，反之需要两个字节来保
       存。varchar 的最大有效 长度由最大行大小和使用的字符集确定。最大有效长度是
       65532 字节，因为在 varchar 存字符串时，第一个字节是空的，不存在任何数据，
       然后还需两个字节来存 放字符串的长度，所以有效长度是 64432-1-2=65532 字节。
       例：若一个表定义为
       ~CREATE TABLE tb(c1 int, c2 char(30), c3 varchar(N)) charset=utf8;~
       问 N 的最 大值是多少？ 答：(65535-1-2-4-30*3)/3
     - blob 二进制字符串（字节字符串）tinyblob, blob, mediumblob, longblob
     - text 非二进制字符串（字符字符串）tinytext, text, mediumtext, longtext
       text 在定义时，不需要定义长度，也不会计算总长度。text 类型在定义时，不可
       给 default 值
     - binary, varbinary 类似于 char 和 varchar，用于保存二进制字符串，也就是保
       存字节字符串而非字符字符串。char, varchar, text 对应 binary, varbinary,
       blob.

**** 日期/时间型
     时间或日期类型数据库中直接存储时间戳格式。

     | 类型      | 字节   | 描述       | 范围                                       |
     |-----------+--------+------------+--------------------------------------------|
     | datetime  | 8 字节 | 日期及时间 | 1000-01-01 00:00:00 到 9999-12-31 23:59:59 |
     | date      | 3 字节 | 日期       | 1000-01-01 到 9999-12-31                   |
     | timestamp | 4 字节 | 时间戳     | 19700101000000 到 2038-01-19 03:14:07      |
     | time      | 3 字节 | 时间       | -838:59:59 到 838:59:59                    |
     | year      | 1 字节 | 年份       | 1901 - 2155                                |

     设置时间格式可以使用下面举例：
     - datetime 'YYYY-MM-DD hh:mm:ss'
     - timestamp 'YY-MM-DD hh:mm:ss' 'YYYYMMDDhhmmss' 'YYMMDDhhmmss'
       YYYYMMDDhhmmss YYMMDDhhmmss
     - date 'YYYY-MM-DD' 'YY-MM-DD' 'YYYYMMDD' 'YYMMDD' 'YYYYMMDD' 'YYMMDD'
     - time 'hh:mm:ss' 'hhmmss' hhmmss
     - year 'YYYY' 'YY' YYYY YY

**** 枚举和集合
     - 枚举 enum(val1, val2, val3...)  在已知的值中进行单选。最大数量为 65535.
       枚举值在保存时，以 2 个字节的整型(smallint)保存。每个枚举值，按保存的位置
       顺序，从 1 开始逐一递增。表现为字符串类型，存储却是整型。 NULL 值的索引是
       NULL。  空字符串错误值的索引值是 0。
     - 集合 set(val1, val2, val3...)
       ~CREATE TABLE tab (gender SET('男', '女', '无'));~
       ~INSERT INTO tab VALUES ('男, 女');~
       最多可以有 64 个不同的成员。以 bigint 存储，共 8 个字节。采取位运算的形式。当
       创建表时，SET 成员值的尾部空格将自动被删除。

     一般在数据库中不用， *使用整数代替* ，具体类型使用程序处理。

*** 列约束
**** 主键
    - 能唯一标识记录的字段，可以作为主键。
    - 一个表只能有一个主键。
    - 主键具有唯一性。
    - 声明字段时，用 PRIMARY KEY 标识。也可以在字段列表之后声明
      ~CREATE TABLE USER (id INT, name varchar(10), PRIMARY KEY (id));~
    - 主键字段的值不能为 NULL。
    - 主键可以由多个字段共同组成。此时需要在字段列表后声明的方法。
      ~CREATE TABLE USER (id INT, name varchar(10), age INT, PRIMARY KEY (name, age));~
**** 唯一性约束
     - UNIQUE 唯一索引（唯一约束）使得某字段的值也不能重复。

**** NULL 约束
     NULL 默认允许为空。NOT NULL, 不允许为空。
     #+BEGIN_SRC sql
       INSERT INTO TAB VALUES (NULL, 'VAL');
     #+END_SRC
     此时表示将第一个字段的值设为 NULL, 取决于该字段是否允许为 NULL

**** DEFAULT 默认值属性
     当前字段的默认值。
     #+BEGIN_SRC sql
       INSERT INTO tab VALUES (DEFAULT, 'VAL');    -- 此时表示强制使用默认值。
       CREATE TABLE tab (create_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP); -- 表示将当前时间的时间戳设为默认值。
       CURRENT_DATE, CURRENT_TIME
     #+END_SRC

**** =AUTO_INCREMENT= 自动增长约束
     自动增长必须为索引（主键或 UNIQUE）只能存在一个字段为自动增长。默认为 1 开
     始自动增长。可以通过表属性 ~AUTO_INCREMENT = x~ 进行设置，或
     #+BEGIN_SRC sql
       ALTER TABLE tbl AUTO_INCREMENT = X;
     #+END_SRC

**** 表注释和列注释
     #+BEGIN_SRC sql
       CREATE TABLE tab (id INT ) COMMENT '注释内容';
     #+END_SRC

     一般 MySQL 的列注释不好修改，但是我们可以使用下面的方式来修改列来更新注释。
     #+BEGIN_SRC text
       mysql> SHOW CREATE TABLE students\G
       ,*************************** 1. row ***************************
              Table: students
       Create Table: CREATE TABLE `students` (
         `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
         `name` varchar(255) DEFAULT NULL,
         PRIMARY KEY (`id`)
       ) ENGINE=InnoDB DEFAULT CHARSET=utf8
       1 row in set (0.00 sec)

       mysql>  ALTER TABLE students
           ->    MODIFY COLUMN id
           ->    int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键';
       Query OK, 0 rows affected (0.01 sec)
       Records: 0  Duplicates: 0  Warnings: 0

       mysql> show create table students\G
       ,*************************** 1. row ***************************
              Table: students
       Create Table: CREATE TABLE `students` (
         `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键',
         `name` varchar(255) DEFAULT NULL,
         PRIMARY KEY (`id`)
       ) ENGINE=InnoDB DEFAULT CHARSET=utf8
       1 row in set (0.00 sec)

       mysql>
     #+END_SRC

**** FOREIGN KEY 外键约束
     用于限制主表与从表数据完整性。 存在外键的表，称之为从表（子表），外键指向
     的表，称之为主表（父表）。 作用：保持数据一致性，完整性，主要目的是控制存储
     在外键表（从表）中的数据。

     #+BEGIN_SRC sql
       ALTER TABLE t1 ADD CONSTRAINT `t1_t2_fk` FOREIGN KEY (t1_id) REFERENCES t2(id);
       -- 将表 t1 的 t1_id 外键关联到表 t2 的 id 字段。
       -- 每个外键都有一个名字，可以通过 constraint 指定
     #+END_SRC

     MySQL 中，可以对 InnoDB 引擎使用外键约束：
     #+BEGIN_SRC sql
       FOREIGN KEY (外键字段） REFERENCES 主表名 (关联字段) [主表记录删除时的动作] [主表记录更新时的动作]
       -- 此时需要检测一个从表的外键需要约束为主表的已存在的值。外键在没有关联的情况下，
       -- 可以设置为 null.前提是该外键列，没有 not null。
     #+END_SRC
     可以不指定主表记录更改或更新时的动作，那么此时主表的操作被拒绝。如果指定了
     ON UPDATE 或 ON DELETE：在删除或更新时，有如下几个操作可以选择:

     - CASCADE: 级联操作。主表数据被更新（主键值更新），从表也被更新（外键值更
       新）。主表记录被删除，从表相关记录也被删除。
     - RESTRICT: 拒绝父表删除和更新。
     - SET NULL: 设置为 NULL。 主表数据被更新（主键值更新）， 从表的外键被设置为
       NULL。 主表记录被删除，从表相关记录外键被设置成 NULL。但注意，要求该外键
       的列，没有 NOT NULL 属性约束。

      注意，外键只被 InnoDB 存储引擎所支持。其他引擎是不支持的。

** 查看表结构
   #+BEGIN_SRC sql
     SHOW CREATE TABLE tabname;
     DESC/DESCRIBE/EXPLAIN tabname;
     SHOW COLUMNS FROM tabname [LIKE 'PATTERN'];
     SHOW TABLE STATUS [FROM dbname] [LIKE 'pattern'];
   #+END_SRC
   下面是查看表结构的示例
   #+BEGIN_SRC text
     mysql> SHOW CREATE TABLE customers\G
     ,*************************** 1. row ***************************
            Table: customers
     Create Table: CREATE TABLE `customers` (
       `cust_id` int(11) NOT NULL AUTO_INCREMENT,
       `cust_name` char(50) NOT NULL,
       `cust_address` char(50) DEFAULT NULL,
       `cust_city` char(50) DEFAULT NULL,
       `cust_state` char(5) DEFAULT NULL,
       `cust_zip` char(10) DEFAULT NULL,
       `cust_country` char(50) DEFAULT NULL,
       `cust_contact` char(50) DEFAULT NULL,
       `cust_email` char(255) DEFAULT NULL,
       PRIMARY KEY (`cust_id`)
     ) ENGINE=InnoDB AUTO_INCREMENT=10006 DEFAULT CHARSET=utf8mb4
     1 row in set (0.00 sec)

     mysql> DESC customers;
     +--------------+-----------+------+-----+---------+----------------+
     | Field        | Type      | Null | Key | Default | Extra          |
     +--------------+-----------+------+-----+---------+----------------+
     | cust_id      | int(11)   | NO   | PRI | NULL    | auto_increment |
     | cust_name    | char(50)  | NO   |     | NULL    |                |
     | cust_address | char(50)  | YES  |     | NULL    |                |
     | cust_city    | char(50)  | YES  |     | NULL    |                |
     | cust_state   | char(5)   | YES  |     | NULL    |                |
     | cust_zip     | char(10)  | YES  |     | NULL    |                |
     | cust_country | char(50)  | YES  |     | NULL    |                |
     | cust_contact | char(50)  | YES  |     | NULL    |                |
     | cust_email   | char(255) | YES  |     | NULL    |                |
     +--------------+-----------+------+-----+---------+----------------+
     9 rows in set (0.01 sec)

     mysql> EXPLAIN customers;
     +--------------+-----------+------+-----+---------+----------------+
     | Field        | Type      | Null | Key | Default | Extra          |
     +--------------+-----------+------+-----+---------+----------------+
     | cust_id      | int(11)   | NO   | PRI | NULL    | auto_increment |
     | cust_name    | char(50)  | NO   |     | NULL    |                |
     | cust_address | char(50)  | YES  |     | NULL    |                |
     | cust_city    | char(50)  | YES  |     | NULL    |                |
     | cust_state   | char(5)   | YES  |     | NULL    |                |
     | cust_zip     | char(10)  | YES  |     | NULL    |                |
     | cust_country | char(50)  | YES  |     | NULL    |                |
     | cust_contact | char(50)  | YES  |     | NULL    |                |
     | cust_email   | char(255) | YES  |     | NULL    |                |
     +--------------+-----------+------+-----+---------+----------------+
     9 rows in set (0.01 sec)

     mysql> SHOW COLUMNS FROM customers;
     +--------------+-----------+------+-----+---------+----------------+
     | Field        | Type      | Null | Key | Default | Extra          |
     +--------------+-----------+------+-----+---------+----------------+
     | cust_id      | int(11)   | NO   | PRI | NULL    | auto_increment |
     | cust_name    | char(50)  | NO   |     | NULL    |                |
     | cust_address | char(50)  | YES  |     | NULL    |                |
     | cust_city    | char(50)  | YES  |     | NULL    |                |
     | cust_state   | char(5)   | YES  |     | NULL    |                |
     | cust_zip     | char(10)  | YES  |     | NULL    |                |
     | cust_country | char(50)  | YES  |     | NULL    |                |
     | cust_contact | char(50)  | YES  |     | NULL    |                |
     | cust_email   | char(255) | YES  |     | NULL    |                |
     +--------------+-----------+------+-----+---------+----------------+
     9 rows in set (0.00 sec)

     mysql> SHOW TABLE STATUS FROM sellsys LIKE 'cust%'\G
     *************************** 1. row ***************************
                Name: customers
              Engine: InnoDB
             Version: 10
          Row_format: Dynamic
                Rows: 5
      Avg_row_length: 3276
         Data_length: 16384
     Max_data_length: 0
        Index_length: 0
           Data_free: 0
      Auto_increment: 10006
         Create_time: 2019-06-30 00:27:31
         Update_time: 2019-06-30 00:30:49
          Check_time: NULL
           Collation: utf8mb4_general_ci
            Checksum: NULL
      Create_options:
             Comment:
     1 row in set (0.01 sec)

     mysql>
   #+END_SRC
** 修改表结构
   #+BEGIN_SRC sql
     ALTER TABLE tabname
       ADD[ COLUMN] colname                       -- 增加字段
           AFTER colname                          -- 表示增加在该字段名后面
           FIRST                                  -- 表示增加在第一个
       ADD PRIMARY KEY(colname)                   -- 创建主键
       ADD UNIQUE [idxname] (colnam)              -- 创建唯一索引
       ADD INDEX [idxname] (colname)              -- 创建普通索引
       ADD/DROP[ COLUMN] colname                  -- 删除字段
       MODIFY[ COLUMN] colname dbtype             -- 支持对字段属性进行修改，不能修改字段名(所有原有属性也需写上)
       CHANGE[ COLUMN] colname new_colname dbtype -- 支持对字段名修改
       DROP PRIMARY KEY                           -- 删除主键(删除主键前需删除其 AUTO_INCREMENT 属性)
       DROP INDEX idxname                         -- 删除索引
       DROP FOREIGN KEY fkname                    -- 删除外键
   #+END_SRC
   #+BEGIN_SRC text
     mysql> show create table orders\G
     ,*************************** 1. row ***************************
            Table: orders
     Create Table: CREATE TABLE `orders` (
       `order_num` int(11) NOT NULL AUTO_INCREMENT,
       `order_date` datetime NOT NULL,
       `cust_id` int(11) NOT NULL,
       PRIMARY KEY (`order_num`),
       KEY `fk_orders_customers` (`cust_id`),
       CONSTRAINT `fk_orders_customers` FOREIGN KEY (`cust_id`) REFERENCES `customers` (`cust_id`)
     ) ENGINE=InnoDB AUTO_INCREMENT=20010 DEFAULT CHARSET=utf8mb4
     1 row in set (0.00 sec)

     mysql> alter table orders add column note varchar(256) comment 'Order Notes';
     Query OK, 0 rows affected (0.21 sec)
     Records: 0  Duplicates: 0  Warnings: 0

     mysql> show create table orders\G
     ,*************************** 1. row ***************************
            Table: orders
     Create Table: CREATE TABLE `orders` (
       `order_num` int(11) NOT NULL AUTO_INCREMENT,
       `order_date` datetime NOT NULL,
       `cust_id` int(11) NOT NULL,
       `note` varchar(256) DEFAULT NULL COMMENT 'Order Notes',
       PRIMARY KEY (`order_num`),
       KEY `fk_orders_customers` (`cust_id`),
       CONSTRAINT `fk_orders_customers` FOREIGN KEY (`cust_id`) REFERENCES `customers` (`cust_id`)
     ) ENGINE=InnoDB AUTO_INCREMENT=20010 DEFAULT CHARSET=utf8mb4
     1 row in set (0.00 sec)
   #+END_SRC
** 删除/清空表
   #+BEGIN_SRC sql
     -- 删除表
     DROP TABLE [IF EXISTS] tabname;
     -- 清空表数据
     TRUNCATE [TABLE] tabname;
   #+END_SRC
** 复制表
   #+BEGIN_SRC sql
     -- 复制表结构
     CREATE TABLE tabname LIKE src_tabname;
     -- 复制表结构和数据
     CREATE TABLE tabname [AS] SELECT * FROM src_tabname;
   #+END_SRC
** 优化表
   #+BEGIN_SRC sql
     -- 检查表是否有错误
     CHECK TABLE tabname [, tabname] ... [option] ...
     -- 优化表
     OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tabname [, tabname] ...
     -- 修复表
     REPAIR [LOCAL | NO_WRITE_TO_BINLOG] TABLE tabname [, tabname] ... [QUICK] [EXTENDED] [USE_FRM]
     -- 分析表
     ANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tabname [, tabname] ...
   #+END_SRC
* 数据操作：增删改查
** 插入数据
    - 如果要插入的值列表包含所有字段并且顺序一致，则可以省略字段列表。
    - 可同时插入多条数据记录！
    - REPLACE 与 INSERT 完全一样，可互换。
   #+BEGIN_SRC sql
     INSERT [INTO] tabname [(colname1, colname2, ...)]
       VALUES (value1, value2, ...) [, (value1, value2, ...), ...];

     INSERT [INTO] tabname SET colname1=value1[, colname2=value2, ...];
   #+END_SRC
** 删除数据
   - 删除数据比较危险，一般先用 SELECT 查询来调试，等到条件无误后将 SELECT 改成
     DELETE 来删除数据。
   - 没有条件子句，则会删除全部
   #+BEGIN_SRC sql
     DELETE FROM tabname[ WHERE condition];
   #+END_SRC
** 更新数据
   #+BEGIN_SRC sql
     UPDATE tabname SET colname1=value1[, colname2=value2] [WHERE condition];
   #+END_SRC
** 查询数据
   - 可来自多个表的多个字段
   - 可以不带条件限制查询
   - 字段列表可以用 =*= 代替，表示所有字段
   #+BEGIN_SRC sql
     SELECT colname1, colname2, ... FROM tabname [WHERE condition];
   #+END_SRC

* mysqldump 备份/还原库
** 导出数据
   #+BEGIN_SRC sh
     mysqldump -u user -p pass dbname tabname > /tmp/out.sql # 导出一张表
     mysqldump -u user -p pass dbname tabname1 tabname1 > /tmp/out.sql # 导出多张表
     mysqldump -u user -p pass dbname > /tmp/out.sql # 导出数据库所有表
     mysqldump -u user -p pass -B dbname1 dbname2 > /tmp/out.sql # 导出多数据库
   #+END_SRC
** 导入数据
   在 MySQL 命令行里面使用 source 导入数据
   #+BEGIN_SRC sql
     source out.sql
   #+END_SRC
   在 shell 可以使用非交互式命令导入
   #+BEGIN_SRC sh
     mysql -u user -p pass dbname < out.sql
   #+END_SRC
* 内置函数
** 数值函数
   - ~abs(x)~ : 绝对值 abs(-10.9) = 10
   - ~format(x, d)~ : 格式化千分位数值 format(1234567.456, 2) = 1,234,567.46
   - ~ceil(x)~ : 向上取整 ceil(10.1) = 11
   - ~floor(x)~ : 向下取整 floor (10.1) = 10
   - ~round(x)~ : 四舍五入去整
   - ~mod(m, n)~ : m%n m mod n 求余 10%3=1
   - ~pi()~ : 获得圆周率
   - ~pow(m, n)~ : m^n
   - ~sqrt(x)~ : 算术平方根
   - ~rand()~ : 随机数
   - ~truncate(x, d)~ : 截取 d 位小数

** 时间日期函数
   - ~now(), current_timestamp()~ : 当前日期时间
   - ~current_date()~ : 当前日期
   - ~current_time()~ : 当前时间
   - ~date('yyyy-mm-dd hh:ii:ss')~ : 获取日期部分
   - ~time('yyyy-mm-dd hh:ii:ss')~ : 获取时间部分
   - ~date_format('yyyy-mm-dd hh:ii:ss', '%d %y %a %d %m %b %j')~ : 格式化时间
   - ~unix_timestamp()~ : 获得 unix 时间戳
   - ~from_unixtime()~ : 从时间戳获得时间

** 字符串函数
   - ~length(string)~ : string 长度，字节
   - ~char_length(string)~ : string 的字符个数
   - ~substring(str, position [,length])~ : 从 str 的 position 开始,取 length 个字符
   - ~replace(str ,search_str ,replace_str)~ : 在 str 中用 =replace_str= 替换 =search_str=
   - ~instr(string ,substring)~ : 返回 substring 首次在 string 中出现的位置
   - ~concat(string [,...])~ : 连接字串
   - ~charset(str)~ : 返回字串字符集
   - ~lcase(string)~ : 转换成小写
   - ~left(string, length)~ : 从 string2 中的左边起取 length 个字符
   - ~load_file(file_name)~ : 从文件读取内容
   - ~locate(substring, string [,start_position])~ : 同 instr,但可指定开始位置
   - ~lpad(string, length, pad)~ : 重复用 pad 加在 string 开头,直到字串长度为 length
   - ~ltrim(string)~ : 去除前端空格
   - ~repeat(string, count)~ : 重复 count 次
   - ~rpad(string, length, pad)~ : 在 str 后用 pad 补充,直到长度为 length
   - ~rtrim(string)~ : 去除后端空格
   - ~strcmp(string1 ,string2)~ : 逐字符比较两字串大小

** 流程函数
   - ~case when [condition] then result [when [condition] then result ...] [else result] end~ : 多分支
   - ~if(expr1,expr2,expr3)~ 双分支。

** 聚合函数
   - ~count()~
   - ~sum()~
   - ~max()~
   - ~min()~
   - ~avg()~
   - ~group_concat()~

** 其他常用函数
   - ~md5()~
   - ~default()~
