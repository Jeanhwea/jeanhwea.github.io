#+TITLE: SpringBoot
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2019-07-10 Wed>
#+TAGS: springboot web framework springBoot


* SpringBoot
  [[https://spring.io/projects/spring-boot/#overview][SpringBoot]] 是由 Pivotal 团队提供的全新框架，其设计目的是用来简化新 Spring 应用
  的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需
  要定义样板化的配置。通过这种方式，Spring Boot 致力于在蓬勃发展的快速应用开发领
  域(rapid application development) 成为领导者。SpringBoot 的文档见[[https://docs.spring.io/spring-boot/docs/current/reference/html/][html]] ，源代码
  托管于 [[https://github.com/spring-projects/spring-boot][GitHub]] 。

* 命令行工具
   SpringBoot 命令行工具参考 [[file:../tool/springboot-cli.org][cli]]

* 编译系统
** 继承父 starter
   SpringBoot 项目需要继承的父级 Starter，配置如下：
   #+BEGIN_SRC xml
     <!-- Inherit defaults from Spring Boot -->
     <parent>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-parent</artifactId>
      <version>2.1.0.RELEASE</version>
     </parent>
   #+END_SRC
** Starters
   Starters 是 SpringBoot 对其依赖的再打包，官方的 Starter 都是以
   =spring-boot-starter= 开头，并且存放在 [[https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters][spring-boot-starters]] 中
   - ~spring-boot-starter~ : Core starter, including auto-configuration support,
     logging and YAML
   - ~spring-boot-starter-activemq~ : Starter for JMS messaging using Apache
     ActiveMQ
   - ~spring-boot-starter-amqp~ : Starter for using Spring AMQP and Rabbit MQ
   - ~spring-boot-starter-aop~ : Starter for aspect-oriented programming with
     Spring AOP and AspectJ
   - ~spring-boot-starter-artemis~ : Starter for JMS messaging using Apache
     Artemis
   - ~spring-boot-starter-batch~ : Starter for using Spring Batch
   - ~spring-boot-starter-cache~ : Starter for using Spring Framework's caching
     support
   - ~spring-boot-starter-cloud-connectors~ : Starter for using Spring Cloud
     Connectors which simplifies connecting to services in cloud platforms like
     Cloud Foundry and Heroku
   - ~spring-boot-starter-data-cassandra~ : Starter for using Cassandra
     distributed database and Spring Data Cassandra
   - ~spring-boot-starter-data-cassandra-reactive~ : Starter for using Cassandra
     distributed database and Spring Data Cassandra Reactive
   - ~spring-boot-starter-data-couchbase~ : Starter for using Couchbase
     document-oriented database and Spring Data Couchbase
   - ~spring-boot-starter-data-couchbase-reactive~ : Starter for using Couchbase
     document-oriented database and Spring Data Couchbase Reactive
   - ~spring-boot-starter-data-elasticsearch~ : Starter for using Elasticsearch
     search and analytics engine and Spring Data Elasticsearch
   - ~spring-boot-starter-data-jdbc~ : Starter for using Spring Data JDBC
   - ~spring-boot-starter-data-jpa~ : Starter for using Spring Data JPA with
     Hibernate
   - ~spring-boot-starter-data-ldap~ : Starter for using Spring Data LDAP
   - ~spring-boot-starter-data-mongodb~ : Starter for using MongoDB
     document-oriented database and Spring Data MongoDB
   - ~spring-boot-starter-data-mongodb-reactive~ : Starter for using MongoDB
     document-oriented database and Spring Data MongoDB Reactive
   - ~spring-boot-starter-data-neo4j~ : Starter for using Neo4j graph database
     and Spring Data Neo4j
   - ~spring-boot-starter-data-redis~ : Starter for using Redis key-value data
     store with Spring Data Redis and the Lettuce client
   - ~spring-boot-starter-data-redis-reactive~ : Starter for using Redis
     key-value data store with Spring Data Redis reactive and the Lettuce client
   - ~spring-boot-starter-data-rest~ : Starter for exposing Spring Data
     repositories over REST using Spring Data REST
   - ~spring-boot-starter-data-solr~ : Starter for using the Apache Solr search
     platform with Spring Data Solr
   - ~spring-boot-starter-freemarker~ : Starter for building MVC web
     applications using FreeMarker views
   - ~spring-boot-starter-groovy-templates~ : Starter for building MVC web
     applications using Groovy Templates views
   - ~spring-boot-starter-hateoas~ : Starter for building hypermedia-based
     RESTful web application with Spring MVC and Spring HATEOAS
   - ~spring-boot-starter-integration~ : Starter for using Spring Integration
   - ~spring-boot-starter-jdbc~ : Starter for using JDBC with the HikariCP
     connection pool
   - ~spring-boot-starter-jersey~ : Starter for building RESTful web
     applications using JAX-RS and Jersey. An alternative to
     spring-boot-starter-web
   - ~spring-boot-starter-jooq~ : Starter for using jOOQ to access SQL
     databases. An alternative to spring-boot-starter-data-jpa or
     spring-boot-starter-jdbc
   - ~spring-boot-starter-json~ : Starter for reading and writing json
   - ~spring-boot-starter-jta-atomikos~ : Starter for JTA transactions using
     Atomikos
   - ~spring-boot-starter-jta-bitronix~ : Starter for JTA transactions using
     Bitronix
   - ~spring-boot-starter-mail~ : Starter for using Java Mail and Spring
     Framework's email sending support
   - ~spring-boot-starter-mustache~ : Starter for building web applications
     using Mustache views
   - ~spring-boot-starter-oauth2-client~ : Starter for using Spring Security's
     OAuth2/OpenID Connect client features
   - ~spring-boot-starter-oauth2-resource-server~ : Starter for using Spring
     Security's OAuth2 resource server features
   - ~spring-boot-starter-quartz~ : Starter for using the Quartz scheduler
   - ~spring-boot-starter-security~ : Starter for using Spring Security
   - ~spring-boot-starter-test~ : Starter for testing Spring Boot applications
     with libraries including JUnit, Hamcrest and Mockito
   - ~spring-boot-starter-thymeleaf~ : Starter for building MVC web applications
     using Thymeleaf views
   - ~spring-boot-starter-validation~ : Starter for using Java Bean Validation
     with Hibernate Validator
   - ~spring-boot-starter-web~ : Starter for building web, including RESTful,
     applications using Spring MVC. Uses Tomcat as the default embedded
     container
   - ~spring-boot-starter-web-services~ : Starter for using Spring Web Services
   - ~spring-boot-starter-webflux~ : Starter for building WebFlux applications
     using Spring Framework's Reactive Web support
   - ~spring-boot-starter-websocket~ : Starter for building WebSocket
     applications using Spring Framework's WebSocket support

* Spring Beans 和依赖注入
  Spring Framework 的相关技术在 SpringBoot 工程中都是支持的，常见的标注如下：
  - ~@ComponentScan~ : 查找 Beans
  - ~@Autowired~ : 注入的构造器
  - ~@Component~ : 组件
  - ~@Repository~ : 仓库
  - ~@Service~ : 服务
  - ~@Controller~ : 控制器

  下面是依赖注入的示例
  #+BEGIN_SRC java
    package com.example.service;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Service;

    @Service
    public class DatabaseAccountService implements AccountService {
      private final RiskAssessor riskAssessor;

      @Autowired
      public DatabaseAccountService(RiskAssessor riskAssessor) {
        this.riskAssessor = riskAssessor;
      }

      // ...
    }
  #+END_SRC

  #+BEGIN_SRC java
    @Service
    public class DatabaseAccountService implements AccountService {
      private final RiskAssessor riskAssessor;

      public DatabaseAccountService(RiskAssessor riskAssessor) {
        this.riskAssessor = riskAssessor;
      }

      // ...
    }
  #+END_SRC

* ~@SpringBootApplication~ 标注
  Spring Framework 提供了下面的基本标注
  - =@EnableAutoConfiguration= : 开启自动配置
  - =@ComponentScan= : 开启自动扫描组件
  - =@Configuration= : 允许在上下文中注册其它的 Bean 或导入其它的配置类

  ~@SpringBootApplication~ 相当于同时开启了上面三项配置
  #+BEGIN_SRC java
    package com.example.myapplication;
    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;


    @SpringBootApplication // same as @Configuration @EnableAutoConfiguration @ComponentScan
    public class Application {

      public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
      }

    }
  #+END_SRC

* 外部配置
  SpringBoot 允许使用外部配置方便应用在不同的环境下运行。
**  ~@Value~ 方式配置
   #+BEGIN_SRC java
     @Component
     public class MyBean {

       @Value("${name}")
       private String name;

       // ...
     }
   #+END_SRC

** ~@ConfigurationProperties~ 方式配置
   该种配置方法比 ~@Value~ 更加安全

   先定义配置项的 Java Bean
   #+BEGIN_SRC java
     package com.example;

     import java.net.InetAddress;
     import java.util.ArrayList;
     import java.util.Collections;
     import java.util.List;

     import org.springframework.boot.context.properties.ConfigurationProperties;

     @ConfigurationProperties("acme")
     public class AcmeProperties {

         private boolean enabled;
         private InetAddress remoteAddress;
         private final Security security = new Security();

         public boolean isEnabled() { ... }
         public void setEnabled(boolean enabled) { ... }

         public InetAddress getRemoteAddress() { ... }
         public void setRemoteAddress(InetAddress remoteAddress) { ... }

         public Security getSecurity() { ... }

         public static class Security {

          private String username;
          private String password;
         private List<String> roles = new ArrayList<>(Collections.singleton("USER"));

         public String getUsername() { ... }
         public void setUsername(String username) { ... }

         public String getPassword() { ... }
         public void setPassword(String password) { ... }

         public List<String> getRoles() { ... }
         public void setRoles(List<String> roles) { ... }
         }
     }
   #+END_SRC

   上述的配置类对应于配置文件中的这些配置项
   - =acme.enabled= 定义一个值，默认为空
   - =acme.remote-address= 能通过字符串强制转换的类型
   - =acme.security.username= 自带 Security 对象，用户名
   - =acme.security.password=
   - =acme.security.roles= 字符串集合

   添加配置项，通过 =@EnableConfigurationProperties= 标注来扫描配置的 Java Bean
   #+BEGIN_SRC java
     @Configuration
     @EnableConfigurationProperties(AcmeProperties.class)
     public class MyConfiguration {
       // ...
     }
   #+END_SRC

   并且需要添加 =@Configuration= 到 Java Bean 中
   #+BEGIN_SRC java
     @Component
     @ConfigurationProperties(prefix="acme")
     public class AcmeProperties {
       // ... see the preceding example
     }
   #+END_SRC

   最后就可以将定义的 Java Bean 配置项注入到其它组件中
   #+BEGIN_SRC java
     @Service
     public class MyService {

       private final AcmeProperties properties;

       @Autowired
       public MyService(AcmeProperties properties) {
         this.properties = properties;
       }

       //...

       @PostConstruct
       public void openConnection() {
         Server server = new Server(this.properties.getRemoteAddress());
         // ...
       }

     }
   #+END_SRC

* 开发工具
  SpringBoot 的提供了开发工具套件，可以实现自动加载，仅仅需要在 =pom.xml= 文件中
  加入下面依赖即可自动添加
  #+BEGIN_SRC xml
    <dependencies>
     <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-devtools</artifactId>
      <optional>true</optional>
     </dependency>
    </dependencies>
  #+END_SRC
